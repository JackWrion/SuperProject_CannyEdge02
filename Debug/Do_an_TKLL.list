
Do_an_TKLL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be4c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000e294  0800c0f0  0800c0f0  0001c0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a384  0801a384  0002a384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a38c  0801a38c  0002a38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a390  0801a390  0002a390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000560  24000000  0801a394  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000560  0801a8f4  00030560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240005c0  0801a954  000305c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000071c  24000620  0801a9b4  00030620  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000d3c  0801a9b4  00030d3c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030620  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a5e1  00000000  00000000  0003064e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003168  00000000  00000000  0005ac2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  0005dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d48  00000000  00000000  0005fb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039cbf  00000000  00000000  000618c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267d1  00000000  00000000  0009b587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001704b4  00000000  00000000  000c1d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0023220c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093e0  00000000  00000000  0023225c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000620 	.word	0x24000620
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c0d4 	.word	0x0800c0d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000624 	.word	0x24000624
 80002dc:	0800c0d4 	.word	0x0800c0d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <stbiw__sbgrowf>:
#define stbiw__sbpush(a, v)      (stbiw__sbmaybegrow(a,1), (a)[stbiw__sbn(a)++] = (v))
#define stbiw__sbcount(a)        ((a) ? stbiw__sbn(a) : 0)
#define stbiw__sbfree(a)         ((a) ? STBIW_FREE(stbiw__sbraw(a)),0 : 0)

static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
   int m = *arr ? 2*stbiw__sbm(*arr)+increment : increment+1;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d007      	beq.n	80006a8 <stbiw__sbgrowf+0x24>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b08      	subs	r3, #8
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	005a      	lsls	r2, r3, #1
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4413      	add	r3, r2
 80006a6:	e001      	b.n	80006ac <stbiw__sbgrowf+0x28>
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3301      	adds	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
   void *p = STBIW_REALLOC_SIZED(*arr ? stbiw__sbraw(*arr) : 0, *arr ? (stbiw__sbm(*arr)*itemsize + sizeof(int)*2) : 0, itemsize * m + sizeof(int)*2);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <stbiw__sbgrowf+0x3a>
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3b08      	subs	r3, #8
 80006bc:	e000      	b.n	80006c0 <stbiw__sbgrowf+0x3c>
 80006be:	2300      	movs	r3, #0
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	6979      	ldr	r1, [r7, #20]
 80006c4:	fb01 f202 	mul.w	r2, r1, r2
 80006c8:	3208      	adds	r2, #8
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f00b f973 	bl	800b9b8 <realloc>
 80006d2:	6138      	str	r0, [r7, #16]
   STBIW_ASSERT(p);
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d106      	bne.n	80006e8 <stbiw__sbgrowf+0x64>
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <stbiw__sbgrowf+0x9c>)
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <stbiw__sbgrowf+0xa0>)
 80006de:	f240 313e 	movw	r1, #830	; 0x33e
 80006e2:	4811      	ldr	r0, [pc, #68]	; (8000728 <stbiw__sbgrowf+0xa4>)
 80006e4:	f00a fa40 	bl	800ab68 <__assert_func>
   if (p) {
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d011      	beq.n	8000712 <stbiw__sbgrowf+0x8e>
      if (!*arr) ((int *) p)[1] = 0;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d103      	bne.n	80006fe <stbiw__sbgrowf+0x7a>
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
      *arr = (void *) ((int *) p + 2);
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	f103 0208 	add.w	r2, r3, #8
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	601a      	str	r2, [r3, #0]
      stbiw__sbm(*arr) = m;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3b08      	subs	r3, #8
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	601a      	str	r2, [r3, #0]
   }
   return *arr;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	0800c9ec 	.word	0x0800c9ec
 8000724:	08018984 	.word	0x08018984
 8000728:	0800c8d4 	.word	0x0800c8d4

0800072c <stbiw__zlib_flushf>:

static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
   while (*bitcount >= 8) {
 8000738:	e02a      	b.n	8000790 <stbiw__zlib_flushf+0x64>
      stbiw__sbpush(data, STBIW_UCHAR(*bitbuffer));
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d008      	beq.n	8000752 <stbiw__zlib_flushf+0x26>
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3b04      	subs	r3, #4
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3b08      	subs	r3, #8
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	db07      	blt.n	8000762 <stbiw__zlib_flushf+0x36>
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2201      	movs	r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff92 	bl	8000684 <stbiw__sbgrowf>
 8000760:	bf00      	nop
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	681c      	ldr	r4, [r3, #0]
 8000766:	68f9      	ldr	r1, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3b04      	subs	r3, #4
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	1c50      	adds	r0, r2, #1
 8000770:	6018      	str	r0, [r3, #0]
 8000772:	4613      	mov	r3, r2
 8000774:	440b      	add	r3, r1
 8000776:	b2e2      	uxtb	r2, r4
 8000778:	701a      	strb	r2, [r3, #0]
      *bitbuffer >>= 8;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	0a1a      	lsrs	r2, r3, #8
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	601a      	str	r2, [r3, #0]
      *bitcount -= 8;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f1a3 0208 	sub.w	r2, r3, #8
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	601a      	str	r2, [r3, #0]
   while (*bitcount >= 8) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b07      	cmp	r3, #7
 8000796:	dcd0      	bgt.n	800073a <stbiw__zlib_flushf+0xe>
   }
   return data;
 8000798:	68fb      	ldr	r3, [r7, #12]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}

080007a2 <stbiw__zlib_bitrev>:

static int stbiw__zlib_bitrev(int code, int codebits)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b085      	sub	sp, #20
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
   int res=0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
   while (codebits--) {
 80007b0:	e009      	b.n	80007c6 <stbiw__zlib_bitrev+0x24>
      res = (res << 1) | (code & 1);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	005a      	lsls	r2, r3, #1
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	4313      	orrs	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
      code >>= 1;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	105b      	asrs	r3, r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
   while (codebits--) {
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	603a      	str	r2, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f0      	bne.n	80007b2 <stbiw__zlib_bitrev+0x10>
   }
   return res;
 80007d0:	68fb      	ldr	r3, [r7, #12]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <stbiw__zlib_countm>:

static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)
{
 80007de:	b480      	push	{r7}
 80007e0:	b087      	sub	sp, #28
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
   int i;
   for (i=0; i < limit && i < 258; ++i)
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e00c      	b.n	800080a <stbiw__zlib_countm+0x2c>
      if (a[i] != b[i]) break;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	4413      	add	r3, r2
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	68b9      	ldr	r1, [r7, #8]
 80007fc:	440b      	add	r3, r1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d10b      	bne.n	800081c <stbiw__zlib_countm+0x3e>
   for (i=0; i < limit && i < 258; ++i)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	da05      	bge.n	800081e <stbiw__zlib_countm+0x40>
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000818:	dbea      	blt.n	80007f0 <stbiw__zlib_countm+0x12>
 800081a:	e000      	b.n	800081e <stbiw__zlib_countm+0x40>
      if (a[i] != b[i]) break;
 800081c:	bf00      	nop
   return i;
 800081e:	697b      	ldr	r3, [r7, #20]
}
 8000820:	4618      	mov	r0, r3
 8000822:	371c      	adds	r7, #28
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <stbiw__zhash>:

static unsigned int stbiw__zhash(unsigned char *data)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
   stbiw_uint32 hash = data[0] + (data[1] << 8) + (data[2] << 16);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	441a      	add	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3302      	adds	r3, #2
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	041b      	lsls	r3, r3, #16
 800084c:	4413      	add	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
   hash ^= hash << 3;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	4053      	eors	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
   hash += hash >> 5;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	095b      	lsrs	r3, r3, #5
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	4413      	add	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]
   hash ^= hash << 4;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	011b      	lsls	r3, r3, #4
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	4053      	eors	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
   hash += hash >> 17;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	0c5b      	lsrs	r3, r3, #17
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
   hash ^= hash << 25;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	065b      	lsls	r3, r3, #25
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4053      	eors	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
   hash += hash >> 6;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	099b      	lsrs	r3, r3, #6
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	4413      	add	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
   return hash;
 800088c:	68fb      	ldr	r3, [r7, #12]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <stbi_zlib_compress>:
#define stbiw__ZHASH   16384

#endif // STBIW_ZLIB_COMPRESS

STBIWDEF unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b097      	sub	sp, #92	; 0x5c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	603b      	str	r3, [r7, #0]
#else // use builtin
   static unsigned short lengthc[] = { 3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258, 259 };
   static unsigned char  lengtheb[]= { 0,0,0,0,0,0,0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,  4,  5,  5,  5,  5,  0 };
   static unsigned short distc[]   = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577, 32768 };
   static unsigned char  disteb[]  = { 0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13 };
   unsigned int bitbuf=0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
   int i,j, bitcount=0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
   unsigned char *out = NULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
   unsigned char ***hash_table = (unsigned char***) STBIW_MALLOC(stbiw__ZHASH * sizeof(unsigned char**));
 80008b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80008ba:	f00a fc59 	bl	800b170 <malloc>
 80008be:	4603      	mov	r3, r0
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
   if (hash_table == NULL)
 80008c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <stbi_zlib_compress+0x32>
      return NULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f000 bd62 	b.w	8001392 <stbi_zlib_compress+0xaf6>
   if (quality < 5) quality = 5;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	dc01      	bgt.n	80008d8 <stbi_zlib_compress+0x3c>
 80008d4:	2305      	movs	r3, #5
 80008d6:	603b      	str	r3, [r7, #0]

   stbiw__sbpush(out, 0x78);   // DEFLATE 32K window
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d008      	beq.n	80008f0 <stbi_zlib_compress+0x54>
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	3b04      	subs	r3, #4
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	3b08      	subs	r3, #8
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	db07      	blt.n	8000900 <stbi_zlib_compress+0x64>
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fec3 	bl	8000684 <stbiw__sbgrowf>
 80008fe:	bf00      	nop
 8000900:	6939      	ldr	r1, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	3b04      	subs	r3, #4
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	1c50      	adds	r0, r2, #1
 800090a:	6018      	str	r0, [r3, #0]
 800090c:	4613      	mov	r3, r2
 800090e:	440b      	add	r3, r1
 8000910:	2278      	movs	r2, #120	; 0x78
 8000912:	701a      	strb	r2, [r3, #0]
   stbiw__sbpush(out, 0x5e);   // FLEVEL = 1
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d008      	beq.n	800092c <stbi_zlib_compress+0x90>
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	3b04      	subs	r3, #4
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3b08      	subs	r3, #8
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	db07      	blt.n	800093c <stbi_zlib_compress+0xa0>
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2201      	movs	r2, #1
 8000932:	2101      	movs	r1, #1
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fea5 	bl	8000684 <stbiw__sbgrowf>
 800093a:	bf00      	nop
 800093c:	6939      	ldr	r1, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	3b04      	subs	r3, #4
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	1c50      	adds	r0, r2, #1
 8000946:	6018      	str	r0, [r3, #0]
 8000948:	4613      	mov	r3, r2
 800094a:	440b      	add	r3, r1
 800094c:	225e      	movs	r2, #94	; 0x5e
 800094e:	701a      	strb	r2, [r3, #0]
   stbiw__zlib_add(1,1);  // BFINAL = 1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	2201      	movs	r2, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	461a      	mov	r2, r3
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	4313      	orrs	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	f107 0214 	add.w	r2, r7, #20
 800096c:	f107 0118 	add.w	r1, r7, #24
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fedb 	bl	800072c <stbiw__zlib_flushf>
 8000976:	4603      	mov	r3, r0
 8000978:	613b      	str	r3, [r7, #16]
   stbiw__zlib_add(1,2);  // BTYPE = 1 -- fixed huffman
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	2201      	movs	r2, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	461a      	mov	r2, r3
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3302      	adds	r3, #2
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	f107 0214 	add.w	r2, r7, #20
 8000996:	f107 0118 	add.w	r1, r7, #24
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fec6 	bl	800072c <stbiw__zlib_flushf>
 80009a0:	4603      	mov	r3, r0
 80009a2:	613b      	str	r3, [r7, #16]

   for (i=0; i < stbiw__ZHASH; ++i)
 80009a4:	2300      	movs	r3, #0
 80009a6:	657b      	str	r3, [r7, #84]	; 0x54
 80009a8:	e008      	b.n	80009bc <stbi_zlib_compress+0x120>
      hash_table[i] = NULL;
 80009aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009b0:	4413      	add	r3, r2
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
   for (i=0; i < stbiw__ZHASH; ++i)
 80009b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009b8:	3301      	adds	r3, #1
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
 80009bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009c2:	dbf2      	blt.n	80009aa <stbi_zlib_compress+0x10e>

   i=0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	657b      	str	r3, [r7, #84]	; 0x54
   while (i < data_len-3) {
 80009c8:	e26e      	b.n	8000ea8 <stbi_zlib_compress+0x60c>
      // hash next 3 bytes of data to be compressed
      int h = stbiw__zhash(data+i)&(stbiw__ZHASH-1), best=3;
 80009ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff2b 	bl	800082c <stbiw__zhash>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
 80009de:	2303      	movs	r3, #3
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      unsigned char *bestloc = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char **hlist = hash_table[h];
 80009e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009ec:	4413      	add	r3, r2
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      int n = stbiw__sbcount(hlist);
 80009f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d003      	beq.n	8000a00 <stbi_zlib_compress+0x164>
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80009fe:	e000      	b.n	8000a02 <stbi_zlib_compress+0x166>
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
      for (j=0; j < n; ++j) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	653b      	str	r3, [r7, #80]	; 0x50
 8000a08:	e02a      	b.n	8000a60 <stbi_zlib_compress+0x1c4>
         if (hlist[j]-data > i-32768) { // if entry lies within window
 8000a0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a0c:	4ba3      	ldr	r3, [pc, #652]	; (8000c9c <stbi_zlib_compress+0x400>)
 8000a0e:	4413      	add	r3, r2
 8000a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a16:	440a      	add	r2, r1
 8000a18:	6811      	ldr	r1, [r2, #0]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	1a8a      	subs	r2, r1, r2
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	dc1b      	bgt.n	8000a5a <stbi_zlib_compress+0x1be>
            int d = stbiw__zlib_countm(hlist[j], data+i, data_len-i);
 8000a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a28:	4413      	add	r3, r2
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	18d1      	adds	r1, r2, r3
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	f7ff fed0 	bl	80007de <stbiw__zlib_countm>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	61fb      	str	r3, [r7, #28]
            if (d >= best) { best=d; bestloc=hlist[j]; }
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a46:	429a      	cmp	r2, r3
 8000a48:	db07      	blt.n	8000a5a <stbi_zlib_compress+0x1be>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a54:	4413      	add	r3, r2
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
      for (j=0; j < n; ++j) {
 8000a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8000a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbd0      	blt.n	8000a0a <stbi_zlib_compress+0x16e>
         }
      }
      // when hash table entry is too long, delete half the entries
      if (hash_table[h] && stbiw__sbn(hash_table[h]) == 2*quality) {
 8000a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a6e:	4413      	add	r3, r2
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d024      	beq.n	8000ac0 <stbi_zlib_compress+0x224>
 8000a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a7c:	4413      	add	r3, r2
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3b04      	subs	r3, #4
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d119      	bne.n	8000ac0 <stbi_zlib_compress+0x224>
         STBIW_MEMMOVE(hash_table[h], hash_table[h]+quality, sizeof(hash_table[h][0])*quality);
 8000a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a92:	4413      	add	r3, r2
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a9c:	4413      	add	r3, r2
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	18d1      	adds	r1, r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f00a fb7e 	bl	800b1ac <memmove>
         stbiw__sbn(hash_table[h]) = quality;
 8000ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ab6:	4413      	add	r3, r2
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3b04      	subs	r3, #4
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	601a      	str	r2, [r3, #0]
      }
      stbiw__sbpush(hash_table[h],data+i);
 8000ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ac6:	4413      	add	r3, r2
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d010      	beq.n	8000af0 <stbi_zlib_compress+0x254>
 8000ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ad4:	4413      	add	r3, r2
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3b04      	subs	r3, #4
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ae4:	440b      	add	r3, r1
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3b08      	subs	r3, #8
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	db09      	blt.n	8000b04 <stbi_zlib_compress+0x268>
 8000af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000af6:	4413      	add	r3, r2
 8000af8:	2204      	movs	r2, #4
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fdc1 	bl	8000684 <stbiw__sbgrowf>
 8000b02:	bf00      	nop
 8000b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b0c:	4413      	add	r3, r2
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b16:	4413      	add	r3, r2
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	1c54      	adds	r4, r2, #1
 8000b20:	601c      	str	r4, [r3, #0]
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4403      	add	r3, r0
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	440a      	add	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]

      if (bestloc) {
 8000b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d048      	beq.n	8000bc6 <stbi_zlib_compress+0x32a>
         // "lazy matching" - check match at *next* byte, and if it's better, do cur byte as literal
         h = stbiw__zhash(data+i+1)&(stbiw__ZHASH-1);
 8000b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b36:	3301      	adds	r3, #1
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fe75 	bl	800082c <stbiw__zhash>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
         hlist = hash_table[h];
 8000b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b50:	4413      	add	r3, r2
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
         n = stbiw__sbcount(hlist);
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <stbi_zlib_compress+0x2c8>
 8000b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8000b62:	e000      	b.n	8000b66 <stbi_zlib_compress+0x2ca>
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
         for (j=0; j < n; ++j) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8000b6c:	e027      	b.n	8000bbe <stbi_zlib_compress+0x322>
            if (hlist[j]-data > i-32767) {
 8000b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b70:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <stbi_zlib_compress+0x404>)
 8000b72:	4413      	add	r3, r2
 8000b74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b7a:	440a      	add	r2, r1
 8000b7c:	6811      	ldr	r1, [r2, #0]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	1a8a      	subs	r2, r1, r2
 8000b82:	4293      	cmp	r3, r2
 8000b84:	dc18      	bgt.n	8000bb8 <stbi_zlib_compress+0x31c>
               int e = stbiw__zlib_countm(hlist[j], data+i+1, data_len-i-1);
 8000b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b8c:	4413      	add	r3, r2
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b92:	3301      	adds	r3, #1
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	18d1      	adds	r1, r2, r3
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f7ff fe1c 	bl	80007de <stbiw__zlib_countm>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
               if (e > best) { // if next match is better, bail on current match
 8000baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dd02      	ble.n	8000bb8 <stbi_zlib_compress+0x31c>
                  bestloc = NULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
                  break;
 8000bb6:	e006      	b.n	8000bc6 <stbi_zlib_compress+0x32a>
         for (j=0; j < n; ++j) {
 8000bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bba:	3301      	adds	r3, #1
 8000bbc:	653b      	str	r3, [r7, #80]	; 0x50
 8000bbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	dbd3      	blt.n	8000b6e <stbi_zlib_compress+0x2d2>
               }
            }
         }
      }

      if (bestloc) {
 8000bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8126 	beq.w	8000e1a <stbi_zlib_compress+0x57e>
         int d = (int) (data+i - bestloc); // distance back
 8000bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	441a      	add	r2, r3
 8000bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	623b      	str	r3, [r7, #32]
         STBIW_ASSERT(d <= 32767 && best <= 258);
 8000bda:	6a3b      	ldr	r3, [r7, #32]
 8000bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000be0:	da03      	bge.n	8000bea <stbi_zlib_compress+0x34e>
 8000be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000be4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000be8:	dd06      	ble.n	8000bf8 <stbi_zlib_compress+0x35c>
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <stbi_zlib_compress+0x408>)
 8000bec:	4a2e      	ldr	r2, [pc, #184]	; (8000ca8 <stbi_zlib_compress+0x40c>)
 8000bee:	f240 31bf 	movw	r1, #959	; 0x3bf
 8000bf2:	482e      	ldr	r0, [pc, #184]	; (8000cac <stbi_zlib_compress+0x410>)
 8000bf4:	f009 ffb8 	bl	800ab68 <__assert_func>
         for (j=0; best > lengthc[j+1]-1; ++j);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8000bfc:	e002      	b.n	8000c04 <stbi_zlib_compress+0x368>
 8000bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c00:	3301      	adds	r3, #1
 8000c02:	653b      	str	r3, [r7, #80]	; 0x50
 8000c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <stbi_zlib_compress+0x414>)
 8000c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c12:	4293      	cmp	r3, r2
 8000c14:	daf3      	bge.n	8000bfe <stbi_zlib_compress+0x362>
         stbiw__zlib_huff(j+257);
 8000c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c18:	f113 0f71 	cmn.w	r3, #113	; 0x71
 8000c1c:	da1c      	bge.n	8000c58 <stbi_zlib_compress+0x3bc>
 8000c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c20:	f203 1331 	addw	r3, r3, #305	; 0x131
 8000c24:	2108      	movs	r1, #8
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fdbb 	bl	80007a2 <stbiw__zlib_bitrev>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3308      	adds	r3, #8
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	f107 0214 	add.w	r2, r7, #20
 8000c48:	f107 0118 	add.w	r1, r7, #24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fd6d 	bl	800072c <stbiw__zlib_flushf>
 8000c52:	4603      	mov	r3, r0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	e067      	b.n	8000d28 <stbi_zlib_compress+0x48c>
 8000c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5e:	da29      	bge.n	8000cb4 <stbi_zlib_compress+0x418>
 8000c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c62:	f203 2301 	addw	r3, r3, #513	; 0x201
 8000c66:	2109      	movs	r1, #9
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fd9a 	bl	80007a2 <stbiw__zlib_bitrev>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3309      	adds	r3, #9
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	f107 0214 	add.w	r2, r7, #20
 8000c8a:	f107 0118 	add.w	r1, r7, #24
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fd4c 	bl	800072c <stbiw__zlib_flushf>
 8000c94:	4603      	mov	r3, r0
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	e046      	b.n	8000d28 <stbi_zlib_compress+0x48c>
 8000c9a:	bf00      	nop
 8000c9c:	ffff8001 	.word	0xffff8001
 8000ca0:	ffff8002 	.word	0xffff8002
 8000ca4:	0800c9f0 	.word	0x0800c9f0
 8000ca8:	08018994 	.word	0x08018994
 8000cac:	0800c8d4 	.word	0x0800c8d4
 8000cb0:	24000008 	.word	0x24000008
 8000cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cb6:	2b16      	cmp	r3, #22
 8000cb8:	dc1b      	bgt.n	8000cf2 <stbi_zlib_compress+0x456>
 8000cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	2107      	movs	r1, #7
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd6e 	bl	80007a2 <stbiw__zlib_bitrev>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3307      	adds	r3, #7
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	f107 0214 	add.w	r2, r7, #20
 8000ce2:	f107 0118 	add.w	r1, r7, #24
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd20 	bl	800072c <stbiw__zlib_flushf>
 8000cec:	4603      	mov	r3, r0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	e01a      	b.n	8000d28 <stbi_zlib_compress+0x48c>
 8000cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cf4:	33a9      	adds	r3, #169	; 0xa9
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fd52 	bl	80007a2 <stbiw__zlib_bitrev>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3308      	adds	r3, #8
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	f107 0214 	add.w	r2, r7, #20
 8000d1a:	f107 0118 	add.w	r1, r7, #24
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fd04 	bl	800072c <stbiw__zlib_flushf>
 8000d24:	4603      	mov	r3, r0
 8000d26:	613b      	str	r3, [r7, #16]
         if (lengtheb[j]) stbiw__zlib_add(best - lengthc[j], lengtheb[j]);
 8000d28:	4aa0      	ldr	r2, [pc, #640]	; (8000fac <stbi_zlib_compress+0x710>)
 8000d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d01f      	beq.n	8000d74 <stbi_zlib_compress+0x4d8>
 8000d34:	4a9e      	ldr	r2, [pc, #632]	; (8000fb0 <stbi_zlib_compress+0x714>)
 8000d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d40:	1a9a      	subs	r2, r3, r2
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	4a96      	ldr	r2, [pc, #600]	; (8000fac <stbi_zlib_compress+0x710>)
 8000d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d54:	4413      	add	r3, r2
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	f107 0214 	add.w	r2, r7, #20
 8000d66:	f107 0118 	add.w	r1, r7, #24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fcde 	bl	800072c <stbiw__zlib_flushf>
 8000d70:	4603      	mov	r3, r0
 8000d72:	613b      	str	r3, [r7, #16]
         for (j=0; d > distc[j+1]-1; ++j);
 8000d74:	2300      	movs	r3, #0
 8000d76:	653b      	str	r3, [r7, #80]	; 0x50
 8000d78:	e002      	b.n	8000d80 <stbi_zlib_compress+0x4e4>
 8000d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8000d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d82:	3301      	adds	r3, #1
 8000d84:	4a8b      	ldr	r2, [pc, #556]	; (8000fb4 <stbi_zlib_compress+0x718>)
 8000d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	daf3      	bge.n	8000d7a <stbi_zlib_compress+0x4de>
         stbiw__zlib_add(stbiw__zlib_bitrev(j,5),5);
 8000d92:	2105      	movs	r1, #5
 8000d94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000d96:	f7ff fd04 	bl	80007a2 <stbiw__zlib_bitrev>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3305      	adds	r3, #5
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	f107 0214 	add.w	r2, r7, #20
 8000db6:	f107 0118 	add.w	r1, r7, #24
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fcb6 	bl	800072c <stbiw__zlib_flushf>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	613b      	str	r3, [r7, #16]
         if (disteb[j]) stbiw__zlib_add(d - distc[j], disteb[j]);
 8000dc4:	4a7c      	ldr	r2, [pc, #496]	; (8000fb8 <stbi_zlib_compress+0x71c>)
 8000dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d01f      	beq.n	8000e10 <stbi_zlib_compress+0x574>
 8000dd0:	4a78      	ldr	r2, [pc, #480]	; (8000fb4 <stbi_zlib_compress+0x718>)
 8000dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	1a9a      	subs	r2, r3, r2
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	4a72      	ldr	r2, [pc, #456]	; (8000fb8 <stbi_zlib_compress+0x71c>)
 8000dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	f107 0214 	add.w	r2, r7, #20
 8000e02:	f107 0118 	add.w	r1, r7, #24
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc90 	bl	800072c <stbiw__zlib_flushf>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	613b      	str	r3, [r7, #16]
         i += best;
 8000e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e14:	4413      	add	r3, r2
 8000e16:	657b      	str	r3, [r7, #84]	; 0x54
 8000e18:	e046      	b.n	8000ea8 <stbi_zlib_compress+0x60c>
      } else {
         stbiw__zlib_huffb(data[i]);
 8000e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b8f      	cmp	r3, #143	; 0x8f
 8000e24:	d81e      	bhi.n	8000e64 <stbi_zlib_compress+0x5c8>
 8000e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3330      	adds	r3, #48	; 0x30
 8000e30:	2108      	movs	r1, #8
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fcb5 	bl	80007a2 <stbiw__zlib_bitrev>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	f107 0214 	add.w	r2, r7, #20
 8000e54:	f107 0118 	add.w	r1, r7, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fc67 	bl	800072c <stbiw__zlib_flushf>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	e01e      	b.n	8000ea2 <stbi_zlib_compress+0x606>
 8000e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e70:	2109      	movs	r1, #9
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc95 	bl	80007a2 <stbiw__zlib_bitrev>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3309      	adds	r3, #9
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	f107 0214 	add.w	r2, r7, #20
 8000e94:	f107 0118 	add.w	r1, r7, #24
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fc47 	bl	800072c <stbiw__zlib_flushf>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	613b      	str	r3, [r7, #16]
         ++i;
 8000ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	657b      	str	r3, [r7, #84]	; 0x54
   while (i < data_len-3) {
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3b03      	subs	r3, #3
 8000eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	f6ff ad8b 	blt.w	80009ca <stbi_zlib_compress+0x12e>
      }
   }
   // write out final bytes
   for (;i < data_len; ++i)
 8000eb4:	e046      	b.n	8000f44 <stbi_zlib_compress+0x6a8>
      stbiw__zlib_huffb(data[i]);
 8000eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b8f      	cmp	r3, #143	; 0x8f
 8000ec0:	d81e      	bhi.n	8000f00 <stbi_zlib_compress+0x664>
 8000ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3330      	adds	r3, #48	; 0x30
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc67 	bl	80007a2 <stbiw__zlib_bitrev>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3308      	adds	r3, #8
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	f107 0214 	add.w	r2, r7, #20
 8000ef0:	f107 0118 	add.w	r1, r7, #24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fc19 	bl	800072c <stbiw__zlib_flushf>
 8000efa:	4603      	mov	r3, r0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	e01e      	b.n	8000f3e <stbi_zlib_compress+0x6a2>
 8000f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f0c:	2109      	movs	r1, #9
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fc47 	bl	80007a2 <stbiw__zlib_bitrev>
 8000f14:	4602      	mov	r2, r0
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3309      	adds	r3, #9
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	f107 0214 	add.w	r2, r7, #20
 8000f30:	f107 0118 	add.w	r1, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbf9 	bl	800072c <stbiw__zlib_flushf>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	613b      	str	r3, [r7, #16]
   for (;i < data_len; ++i)
 8000f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f40:	3301      	adds	r3, #1
 8000f42:	657b      	str	r3, [r7, #84]	; 0x54
 8000f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbb4      	blt.n	8000eb6 <stbi_zlib_compress+0x61a>
   stbiw__zlib_huff(256); // end of block
 8000f4c:	2107      	movs	r1, #7
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff fc27 	bl	80007a2 <stbiw__zlib_bitrev>
 8000f54:	4602      	mov	r2, r0
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3307      	adds	r3, #7
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	f107 0214 	add.w	r2, r7, #20
 8000f70:	f107 0118 	add.w	r1, r7, #24
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbd9 	bl	800072c <stbiw__zlib_flushf>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	613b      	str	r3, [r7, #16]
   // pad with 0 bits to byte boundary
   while (bitcount)
 8000f7e:	e00e      	b.n	8000f9e <stbi_zlib_compress+0x702>
      stbiw__zlib_add(0,1);
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	f107 0214 	add.w	r2, r7, #20
 8000f90:	f107 0118 	add.w	r1, r7, #24
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fbc9 	bl	800072c <stbiw__zlib_flushf>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	613b      	str	r3, [r7, #16]
   while (bitcount)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1ed      	bne.n	8000f80 <stbi_zlib_compress+0x6e4>

   for (i=0; i < stbiw__ZHASH; ++i)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8000fa8:	e01b      	b.n	8000fe2 <stbi_zlib_compress+0x746>
 8000faa:	bf00      	nop
 8000fac:	24000044 	.word	0x24000044
 8000fb0:	24000008 	.word	0x24000008
 8000fb4:	24000064 	.word	0x24000064
 8000fb8:	240000a4 	.word	0x240000a4
      (void) stbiw__sbfree(hash_table[i]);
 8000fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc2:	4413      	add	r3, r2
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <stbi_zlib_compress+0x740>
 8000fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd0:	4413      	add	r3, r2
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f00a f8d2 	bl	800b180 <free>
   for (i=0; i < stbiw__ZHASH; ++i)
 8000fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fde:	3301      	adds	r3, #1
 8000fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8000fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fe8:	dbe8      	blt.n	8000fbc <stbi_zlib_compress+0x720>
   STBIW_FREE(hash_table);
 8000fea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fec:	f00a f8c8 	bl	800b180 <free>

   // store uncompressed instead if compression was worse
   if (stbiw__sbn(out) > data_len + 2 + ((data_len+32766)/32767)*5) {
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1c98      	adds	r0, r3, #2
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8001000:	4413      	add	r3, r2
 8001002:	4a7e      	ldr	r2, [pc, #504]	; (80011fc <stbi_zlib_compress+0x960>)
 8001004:	fb82 4203 	smull	r4, r2, r2, r3
 8001008:	441a      	add	r2, r3
 800100a:	1392      	asrs	r2, r2, #14
 800100c:	17db      	asrs	r3, r3, #31
 800100e:	1ad2      	subs	r2, r2, r3
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	4403      	add	r3, r0
 8001018:	4299      	cmp	r1, r3
 800101a:	f340 80d7 	ble.w	80011cc <stbi_zlib_compress+0x930>
      stbiw__sbn(out) = 2;  // truncate to DEFLATE 32K window and FLEVEL = 1
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	3b04      	subs	r3, #4
 8001022:	2202      	movs	r2, #2
 8001024:	601a      	str	r2, [r3, #0]
      for (j = 0; j < data_len;) {
 8001026:	2300      	movs	r3, #0
 8001028:	653b      	str	r3, [r7, #80]	; 0x50
 800102a:	e0ca      	b.n	80011c2 <stbi_zlib_compress+0x926>
         int blocklen = data_len - j;
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
         if (blocklen > 32767) blocklen = 32767;
 8001034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800103a:	db02      	blt.n	8001042 <stbi_zlib_compress+0x7a6>
 800103c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001040:	647b      	str	r3, [r7, #68]	; 0x44
         stbiw__sbpush(out, data_len - j == blocklen); // BFINAL = ?, BTYPE = 0 -- no compression
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <stbi_zlib_compress+0x7be>
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3b04      	subs	r3, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	3b08      	subs	r3, #8
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	db07      	blt.n	800106a <stbi_zlib_compress+0x7ce>
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2201      	movs	r2, #1
 8001060:	2101      	movs	r1, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fb0e 	bl	8000684 <stbiw__sbgrowf>
 8001068:	bf00      	nop
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001072:	429a      	cmp	r2, r3
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2dc      	uxtb	r4, r3
 800107c:	6939      	ldr	r1, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	3b04      	subs	r3, #4
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	1c50      	adds	r0, r2, #1
 8001086:	6018      	str	r0, [r3, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	440b      	add	r3, r1
 800108c:	4622      	mov	r2, r4
 800108e:	701a      	strb	r2, [r3, #0]
         stbiw__sbpush(out, STBIW_UCHAR(blocklen)); // LEN
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d008      	beq.n	80010a8 <stbi_zlib_compress+0x80c>
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	3b04      	subs	r3, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	3b08      	subs	r3, #8
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	db07      	blt.n	80010b8 <stbi_zlib_compress+0x81c>
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2201      	movs	r2, #1
 80010ae:	2101      	movs	r1, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fae7 	bl	8000684 <stbiw__sbgrowf>
 80010b6:	bf00      	nop
 80010b8:	6939      	ldr	r1, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	3b04      	subs	r3, #4
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	1c50      	adds	r0, r2, #1
 80010c2:	6018      	str	r0, [r3, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	701a      	strb	r2, [r3, #0]
         stbiw__sbpush(out, STBIW_UCHAR(blocklen >> 8));
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <stbi_zlib_compress+0x84a>
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	3b04      	subs	r3, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	3b08      	subs	r3, #8
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	db07      	blt.n	80010f6 <stbi_zlib_compress+0x85a>
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	2201      	movs	r2, #1
 80010ec:	2101      	movs	r1, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fac8 	bl	8000684 <stbiw__sbgrowf>
 80010f4:	bf00      	nop
 80010f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f8:	121c      	asrs	r4, r3, #8
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	3b04      	subs	r3, #4
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	1c50      	adds	r0, r2, #1
 8001104:	6018      	str	r0, [r3, #0]
 8001106:	4613      	mov	r3, r2
 8001108:	440b      	add	r3, r1
 800110a:	b2e2      	uxtb	r2, r4
 800110c:	701a      	strb	r2, [r3, #0]
         stbiw__sbpush(out, STBIW_UCHAR(~blocklen)); // NLEN
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <stbi_zlib_compress+0x88a>
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	3b04      	subs	r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	3b08      	subs	r3, #8
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	db07      	blt.n	8001136 <stbi_zlib_compress+0x89a>
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	2201      	movs	r2, #1
 800112c:	2101      	movs	r1, #1
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff faa8 	bl	8000684 <stbiw__sbgrowf>
 8001134:	bf00      	nop
 8001136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001138:	b2d9      	uxtb	r1, r3
 800113a:	6938      	ldr	r0, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	3b04      	subs	r3, #4
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	1c54      	adds	r4, r2, #1
 8001144:	601c      	str	r4, [r3, #0]
 8001146:	4613      	mov	r3, r2
 8001148:	4403      	add	r3, r0
 800114a:	43ca      	mvns	r2, r1
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
         stbiw__sbpush(out, STBIW_UCHAR(~blocklen >> 8));
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d008      	beq.n	8001168 <stbi_zlib_compress+0x8cc>
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3b04      	subs	r3, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3b08      	subs	r3, #8
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	db07      	blt.n	8001178 <stbi_zlib_compress+0x8dc>
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2201      	movs	r2, #1
 800116e:	2101      	movs	r1, #1
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa87 	bl	8000684 <stbiw__sbgrowf>
 8001176:	bf00      	nop
 8001178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800117a:	43db      	mvns	r3, r3
 800117c:	121c      	asrs	r4, r3, #8
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	3b04      	subs	r3, #4
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	1c50      	adds	r0, r2, #1
 8001188:	6018      	str	r0, [r3, #0]
 800118a:	4613      	mov	r3, r2
 800118c:	440b      	add	r3, r1
 800118e:	b2e2      	uxtb	r2, r4
 8001190:	701a      	strb	r2, [r3, #0]
         memcpy(out+stbiw__sbn(out), data+j, blocklen);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	3a04      	subs	r2, #4
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	1898      	adds	r0, r3, r2
 800119c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011a4:	4619      	mov	r1, r3
 80011a6:	f009 fff3 	bl	800b190 <memcpy>
         stbiw__sbn(out) += blocklen;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	3b04      	subs	r3, #4
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	3b04      	subs	r3, #4
 80011b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011b6:	440a      	add	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]
         j += blocklen;
 80011ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011be:	4413      	add	r3, r2
 80011c0:	653b      	str	r3, [r7, #80]	; 0x50
      for (j = 0; j < data_len;) {
 80011c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	f6ff af30 	blt.w	800102c <stbi_zlib_compress+0x790>
      }
   }

   {
      // compute adler32 on input
      unsigned int s1=1, s2=0;
 80011cc:	2301      	movs	r3, #1
 80011ce:	643b      	str	r3, [r7, #64]	; 0x40
 80011d0:	2300      	movs	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      int blocklen = (int) (data_len % 5552);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <stbi_zlib_compress+0x964>)
 80011d8:	fb82 1203 	smull	r1, r2, r2, r3
 80011dc:	12d1      	asrs	r1, r2, #11
 80011de:	17da      	asrs	r2, r3, #31
 80011e0:	1a8a      	subs	r2, r1, r2
 80011e2:	f241 51b0 	movw	r1, #5552	; 0x15b0
 80011e6:	fb01 f202 	mul.w	r2, r1, r2
 80011ea:	1a9b      	subs	r3, r3, r2
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
      j=0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	653b      	str	r3, [r7, #80]	; 0x50
      while (j < data_len) {
 80011f2:	e03c      	b.n	800126e <stbi_zlib_compress+0x9d2>
         for (i=0; i < blocklen; ++i) { s1 += data[j+i]; s2 += s1; }
 80011f4:	2300      	movs	r3, #0
 80011f6:	657b      	str	r3, [r7, #84]	; 0x54
 80011f8:	e016      	b.n	8001228 <stbi_zlib_compress+0x98c>
 80011fa:	bf00      	nop
 80011fc:	80010003 	.word	0x80010003
 8001200:	5e6ea9af 	.word	0x5e6ea9af
 8001204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001208:	4413      	add	r3, r2
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001216:	4413      	add	r3, r2
 8001218:	643b      	str	r3, [r7, #64]	; 0x40
 800121a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800121c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800121e:	4413      	add	r3, r2
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	3301      	adds	r3, #1
 8001226:	657b      	str	r3, [r7, #84]	; 0x54
 8001228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800122a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800122c:	429a      	cmp	r2, r3
 800122e:	dbe9      	blt.n	8001204 <stbi_zlib_compress+0x968>
         s1 %= 65521; s2 %= 65521;
 8001230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001232:	4b5a      	ldr	r3, [pc, #360]	; (800139c <stbi_zlib_compress+0xb00>)
 8001234:	fba3 2301 	umull	r2, r3, r3, r1
 8001238:	0bda      	lsrs	r2, r3, #15
 800123a:	4613      	mov	r3, r2
 800123c:	031b      	lsls	r3, r3, #12
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	4413      	add	r3, r2
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	643b      	str	r3, [r7, #64]	; 0x40
 8001248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800124a:	4b54      	ldr	r3, [pc, #336]	; (800139c <stbi_zlib_compress+0xb00>)
 800124c:	fba3 2301 	umull	r2, r3, r3, r1
 8001250:	0bda      	lsrs	r2, r3, #15
 8001252:	4613      	mov	r3, r2
 8001254:	031b      	lsls	r3, r3, #12
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4413      	add	r3, r2
 800125c:	1acb      	subs	r3, r1, r3
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
         j += blocklen;
 8001260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001264:	4413      	add	r3, r2
 8001266:	653b      	str	r3, [r7, #80]	; 0x50
         blocklen = 5552;
 8001268:	f241 53b0 	movw	r3, #5552	; 0x15b0
 800126c:	63bb      	str	r3, [r7, #56]	; 0x38
      while (j < data_len) {
 800126e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	429a      	cmp	r2, r3
 8001274:	dbbe      	blt.n	80011f4 <stbi_zlib_compress+0x958>
      }
      stbiw__sbpush(out, STBIW_UCHAR(s2 >> 8));
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d008      	beq.n	800128e <stbi_zlib_compress+0x9f2>
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	3b04      	subs	r3, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	3b08      	subs	r3, #8
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	db07      	blt.n	800129e <stbi_zlib_compress+0xa02>
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	2201      	movs	r2, #1
 8001294:	2101      	movs	r1, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f9f4 	bl	8000684 <stbiw__sbgrowf>
 800129c:	bf00      	nop
 800129e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a0:	0a1c      	lsrs	r4, r3, #8
 80012a2:	6939      	ldr	r1, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	3b04      	subs	r3, #4
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	1c50      	adds	r0, r2, #1
 80012ac:	6018      	str	r0, [r3, #0]
 80012ae:	4613      	mov	r3, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	b2e2      	uxtb	r2, r4
 80012b4:	701a      	strb	r2, [r3, #0]
      stbiw__sbpush(out, STBIW_UCHAR(s2));
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <stbi_zlib_compress+0xa32>
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	3b04      	subs	r3, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	3b08      	subs	r3, #8
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	db07      	blt.n	80012de <stbi_zlib_compress+0xa42>
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2201      	movs	r2, #1
 80012d4:	2101      	movs	r1, #1
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f9d4 	bl	8000684 <stbiw__sbgrowf>
 80012dc:	bf00      	nop
 80012de:	6939      	ldr	r1, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	3b04      	subs	r3, #4
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	1c50      	adds	r0, r2, #1
 80012e8:	6018      	str	r0, [r3, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
      stbiw__sbpush(out, STBIW_UCHAR(s1 >> 8));
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d008      	beq.n	800130c <stbi_zlib_compress+0xa70>
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	3b04      	subs	r3, #4
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	3b08      	subs	r3, #8
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	db07      	blt.n	800131c <stbi_zlib_compress+0xa80>
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2201      	movs	r2, #1
 8001312:	2101      	movs	r1, #1
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f9b5 	bl	8000684 <stbiw__sbgrowf>
 800131a:	bf00      	nop
 800131c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800131e:	0a1c      	lsrs	r4, r3, #8
 8001320:	6939      	ldr	r1, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	3b04      	subs	r3, #4
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	1c50      	adds	r0, r2, #1
 800132a:	6018      	str	r0, [r3, #0]
 800132c:	4613      	mov	r3, r2
 800132e:	440b      	add	r3, r1
 8001330:	b2e2      	uxtb	r2, r4
 8001332:	701a      	strb	r2, [r3, #0]
      stbiw__sbpush(out, STBIW_UCHAR(s1));
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d008      	beq.n	800134c <stbi_zlib_compress+0xab0>
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	3b04      	subs	r3, #4
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	3b08      	subs	r3, #8
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	db07      	blt.n	800135c <stbi_zlib_compress+0xac0>
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	2201      	movs	r2, #1
 8001352:	2101      	movs	r1, #1
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f995 	bl	8000684 <stbiw__sbgrowf>
 800135a:	bf00      	nop
 800135c:	6939      	ldr	r1, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	3b04      	subs	r3, #4
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	1c50      	adds	r0, r2, #1
 8001366:	6018      	str	r0, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	440b      	add	r3, r1
 800136c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
   }
   *out_len = stbiw__sbn(out);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	601a      	str	r2, [r3, #0]
   // make returned pointer freeable
   STBIW_MEMMOVE(stbiw__sbraw(out), out, *out_len);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f1a3 0008 	sub.w	r0, r3, #8
 8001382:	6939      	ldr	r1, [r7, #16]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	f009 ff0f 	bl	800b1ac <memmove>
   return (unsigned char *) stbiw__sbraw(out);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	3b08      	subs	r3, #8
#endif // STBIW_ZLIB_COMPRESS
}
 8001392:	4618      	mov	r0, r3
 8001394:	375c      	adds	r7, #92	; 0x5c
 8001396:	46bd      	mov	sp, r7
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	bf00      	nop
 800139c:	80078071 	.word	0x80078071

080013a0 <stbiw__crc32>:

static unsigned int stbiw__crc32(unsigned char *buffer, int len)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
      0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
      0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
      0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
   };

   unsigned int crc = ~0u;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	60fb      	str	r3, [r7, #12]
   int i;
   for (i=0; i < len; ++i)
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	e011      	b.n	80013da <stbiw__crc32+0x3a>
      crc = (crc >> 8) ^ crc_table[buffer[i] ^ (crc & 0xff)];
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	0a1a      	lsrs	r2, r3, #8
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	440b      	add	r3, r1
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	404b      	eors	r3, r1
 80013ca:	490a      	ldr	r1, [pc, #40]	; (80013f4 <stbiw__crc32+0x54>)
 80013cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013d0:	4053      	eors	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
   for (i=0; i < len; ++i)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbe9      	blt.n	80013b6 <stbiw__crc32+0x16>
   return ~crc;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
#endif
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	240000c4 	.word	0x240000c4

080013f8 <stbiw__wpcrc>:
#define stbiw__wpng4(o,a,b,c,d) ((o)[0]=STBIW_UCHAR(a),(o)[1]=STBIW_UCHAR(b),(o)[2]=STBIW_UCHAR(c),(o)[3]=STBIW_UCHAR(d),(o)+=4)
#define stbiw__wp32(data,v) stbiw__wpng4(data, (v)>>24,(v)>>16,(v)>>8,(v));
#define stbiw__wptag(data,s) stbiw__wpng4(data, s[0],s[1],s[2],s[3])

static void stbiw__wpcrc(unsigned char **data, int len)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
   unsigned int crc = stbiw__crc32(*data - len - 4, len+4);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	f06f 0303 	mvn.w	r3, #3
 800140c:	1a5b      	subs	r3, r3, r1
 800140e:	441a      	add	r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3304      	adds	r3, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff ffc2 	bl	80013a0 <stbiw__crc32>
 800141c:	60f8      	str	r0, [r7, #12]
   stbiw__wp32(*data, crc);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	0e1a      	lsrs	r2, r3, #24
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	0c1a      	lsrs	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	0a1a      	lsrs	r2, r3, #8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3302      	adds	r3, #2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3303      	adds	r3, #3
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1d1a      	adds	r2, r3, #4
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <stbiw__paeth>:

static unsigned char stbiw__paeth(int a, int b, int c)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
   int p = a + b - c, pa = abs(p-a), pb = abs(p-b), pc = abs(p-c);
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	441a      	add	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	bfb8      	it	lt
 8001486:	425b      	neglt	r3, r3
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	bfb8      	it	lt
 8001494:	425b      	neglt	r3, r3
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bfb8      	it	lt
 80014a2:	425b      	neglt	r3, r3
 80014a4:	613b      	str	r3, [r7, #16]
   if (pa <= pb && pa <= pc) return STBIW_UCHAR(a);
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dc06      	bgt.n	80014bc <stbiw__paeth+0x58>
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dc02      	bgt.n	80014bc <stbiw__paeth+0x58>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	e008      	b.n	80014ce <stbiw__paeth+0x6a>
   if (pb <= pc) return STBIW_UCHAR(b);
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dc02      	bgt.n	80014ca <stbiw__paeth+0x66>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	e001      	b.n	80014ce <stbiw__paeth+0x6a>
   return STBIW_UCHAR(c);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	b2db      	uxtb	r3, r3
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <stbiw__encode_png_line>:

// @OPTIMIZE: provide an option that always forces left-predict or paeth predict
static void stbiw__encode_png_line(unsigned char *pixels, int stride_bytes, int width, int height, int y, int n, int filter_type, signed char *line_buffer)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b08b      	sub	sp, #44	; 0x2c
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	603b      	str	r3, [r7, #0]
   static int mapping[] = { 0,1,2,3,4 };
   static int firstmap[] = { 0,1,0,5,6 };
   int *mymap = (y != 0) ? mapping : firstmap;
 80014ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <stbiw__encode_png_line+0x18>
 80014f0:	4b97      	ldr	r3, [pc, #604]	; (8001750 <stbiw__encode_png_line+0x274>)
 80014f2:	e000      	b.n	80014f6 <stbiw__encode_png_line+0x1a>
 80014f4:	4b97      	ldr	r3, [pc, #604]	; (8001754 <stbiw__encode_png_line+0x278>)
 80014f6:	623b      	str	r3, [r7, #32]
   int i;
   int type = mymap[filter_type];
 80014f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	6a3a      	ldr	r2, [r7, #32]
 80014fe:	4413      	add	r3, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	61fb      	str	r3, [r7, #28]
   unsigned char *z = pixels + stride_bytes * (stbi__flip_vertically_on_write ? height-1-y : y);
 8001504:	4b94      	ldr	r3, [pc, #592]	; (8001758 <stbiw__encode_png_line+0x27c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <stbiw__encode_png_line+0x3a>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	1e5a      	subs	r2, r3, #1
 8001510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	e000      	b.n	8001518 <stbiw__encode_png_line+0x3c>
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
   int signed_stride = stbi__flip_vertically_on_write ? -stride_bytes : stride_bytes;
 8001526:	4b8c      	ldr	r3, [pc, #560]	; (8001758 <stbiw__encode_png_line+0x27c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <stbiw__encode_png_line+0x58>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	425b      	negs	r3, r3
 8001532:	e000      	b.n	8001536 <stbiw__encode_png_line+0x5a>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	617b      	str	r3, [r7, #20]

   if (type==0) {
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <stbiw__encode_png_line+0x76>
      memcpy(line_buffer, z, width*n);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	461a      	mov	r2, r3
 8001548:	69b9      	ldr	r1, [r7, #24]
 800154a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800154c:	f009 fe20 	bl	800b190 <memcpy>
      return;
 8001550:	e17f      	b.n	8001852 <stbiw__encode_png_line+0x376>
   }

   // first loop isn't optimized since it's just one pixel
   for (i = 0; i < n; ++i) {
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
 8001556:	e075      	b.n	8001644 <stbiw__encode_png_line+0x168>
      switch (type) {
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	3b01      	subs	r3, #1
 800155c:	2b05      	cmp	r3, #5
 800155e:	d86e      	bhi.n	800163e <stbiw__encode_png_line+0x162>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <stbiw__encode_png_line+0x8c>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	08001581 	.word	0x08001581
 800156c:	08001595 	.word	0x08001595
 8001570:	080015bb 	.word	0x080015bb
 8001574:	080015e5 	.word	0x080015e5
 8001578:	08001617 	.word	0x08001617
 800157c:	0800162b 	.word	0x0800162b
         case 1: line_buffer[i] = z[i]; break;
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4413      	add	r3, r2
 8001586:	7819      	ldrb	r1, [r3, #0]
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800158c:	4413      	add	r3, r2
 800158e:	b24a      	sxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
 8001592:	e054      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 2: line_buffer[i] = z[i] - z[i-signed_stride]; break;
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4413      	add	r3, r2
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	1acb      	subs	r3, r1, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	440b      	add	r3, r1
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b2d9      	uxtb	r1, r3
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015b2:	4413      	add	r3, r2
 80015b4:	b24a      	sxtb	r2, r1
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e041      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 3: line_buffer[i] = z[i] - (z[i-signed_stride]>>1); break;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4413      	add	r3, r2
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1acb      	subs	r3, r1, r3
 80015c8:	4619      	mov	r1, r3
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	440b      	add	r3, r1
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	b2d9      	uxtb	r1, r3
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015dc:	4413      	add	r3, r2
 80015de:	b24a      	sxtb	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e02c      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 4: line_buffer[i] = (signed char) (z[i] - stbiw__paeth(0,z[i-signed_stride],0)); break;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4413      	add	r3, r2
 80015ea:	781c      	ldrb	r4, [r3, #0]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	4619      	mov	r1, r3
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff ff30 	bl	8001464 <stbiw__paeth>
 8001604:	4603      	mov	r3, r0
 8001606:	1ae3      	subs	r3, r4, r3
 8001608:	b2d9      	uxtb	r1, r3
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800160e:	4413      	add	r3, r2
 8001610:	b24a      	sxtb	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e013      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 5: line_buffer[i] = z[i]; break;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4413      	add	r3, r2
 800161c:	7819      	ldrb	r1, [r3, #0]
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001622:	4413      	add	r3, r2
 8001624:	b24a      	sxtb	r2, r1
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e009      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 6: line_buffer[i] = z[i]; break;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4413      	add	r3, r2
 8001630:	7819      	ldrb	r1, [r3, #0]
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001636:	4413      	add	r3, r2
 8001638:	b24a      	sxtb	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	bf00      	nop
   for (i = 0; i < n; ++i) {
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3301      	adds	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001648:	429a      	cmp	r2, r3
 800164a:	db85      	blt.n	8001558 <stbiw__encode_png_line+0x7c>
      }
   }
   switch (type) {
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	3b01      	subs	r3, #1
 8001650:	2b05      	cmp	r3, #5
 8001652:	f200 80fe 	bhi.w	8001852 <stbiw__encode_png_line+0x376>
 8001656:	a201      	add	r2, pc, #4	; (adr r2, 800165c <stbiw__encode_png_line+0x180>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	08001675 	.word	0x08001675
 8001660:	080016b5 	.word	0x080016b5
 8001664:	080016f5 	.word	0x080016f5
 8001668:	0800174b 	.word	0x0800174b
 800166c:	080017c3 	.word	0x080017c3
 8001670:	08001807 	.word	0x08001807
      case 1: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - z[i-n]; break;
 8001674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	e014      	b.n	80016a4 <stbiw__encode_png_line+0x1c8>
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4413      	add	r3, r2
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001686:	1acb      	subs	r3, r1, r3
 8001688:	4619      	mov	r1, r3
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	440b      	add	r3, r1
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b2d9      	uxtb	r1, r3
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001698:	4413      	add	r3, r2
 800169a:	b24a      	sxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	3301      	adds	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbe3      	blt.n	800167a <stbiw__encode_png_line+0x19e>
 80016b2:	e0ce      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 2: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - z[i-signed_stride]; break;
 80016b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
 80016b8:	e014      	b.n	80016e4 <stbiw__encode_png_line+0x208>
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4413      	add	r3, r2
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1acb      	subs	r3, r1, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	440b      	add	r3, r1
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b2d9      	uxtb	r1, r3
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016d8:	4413      	add	r3, r2
 80016da:	b24a      	sxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dbe3      	blt.n	80016ba <stbiw__encode_png_line+0x1de>
 80016f2:	e0ae      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 3: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - ((z[i-n] + z[i-signed_stride])>>1); break;
 80016f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e01f      	b.n	800173a <stbiw__encode_png_line+0x25e>
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4413      	add	r3, r2
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001706:	1acb      	subs	r3, r1, r3
 8001708:	4619      	mov	r1, r3
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	440b      	add	r3, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	1acb      	subs	r3, r1, r3
 8001718:	4619      	mov	r1, r3
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	440b      	add	r3, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4403      	add	r3, r0
 8001722:	105b      	asrs	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b2d9      	uxtb	r1, r3
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800172e:	4413      	add	r3, r2
 8001730:	b24a      	sxtb	r2, r1
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	3301      	adds	r3, #1
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	429a      	cmp	r2, r3
 8001746:	dbd8      	blt.n	80016fa <stbiw__encode_png_line+0x21e>
 8001748:	e083      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 4: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - stbiw__paeth(z[i-n], z[i-signed_stride], z[i-signed_stride-n]); break;
 800174a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
 800174e:	e030      	b.n	80017b2 <stbiw__encode_png_line+0x2d6>
 8001750:	240004c4 	.word	0x240004c4
 8001754:	240004d8 	.word	0x240004d8
 8001758:	2400063c 	.word	0x2400063c
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4413      	add	r3, r2
 8001762:	781c      	ldrb	r4, [r3, #0]
 8001764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	461a      	mov	r2, r3
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	461a      	mov	r2, r3
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1ad2      	subs	r2, r2, r3
 800178a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	461a      	mov	r2, r3
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	f7ff fe64 	bl	8001464 <stbiw__paeth>
 800179c:	4603      	mov	r3, r0
 800179e:	1ae3      	subs	r3, r4, r3
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017a6:	4413      	add	r3, r2
 80017a8:	b24a      	sxtb	r2, r1
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	3301      	adds	r3, #1
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbcd      	blt.n	800175c <stbiw__encode_png_line+0x280>
 80017c0:	e047      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 5: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - (z[i-n]>>1); break;
 80017c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	e016      	b.n	80017f6 <stbiw__encode_png_line+0x31a>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4413      	add	r3, r2
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d4:	1acb      	subs	r3, r1, r3
 80017d6:	4619      	mov	r1, r3
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	440b      	add	r3, r1
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	b2d9      	uxtb	r1, r3
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017ea:	4413      	add	r3, r2
 80017ec:	b24a      	sxtb	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3301      	adds	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	429a      	cmp	r2, r3
 8001802:	dbe1      	blt.n	80017c8 <stbiw__encode_png_line+0x2ec>
 8001804:	e025      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 6: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - stbiw__paeth(z[i-n], 0,0); break;
 8001806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	e01a      	b.n	8001842 <stbiw__encode_png_line+0x366>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4413      	add	r3, r2
 8001812:	781c      	ldrb	r4, [r3, #0]
 8001814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	461a      	mov	r2, r3
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fe1c 	bl	8001464 <stbiw__paeth>
 800182c:	4603      	mov	r3, r0
 800182e:	1ae3      	subs	r3, r4, r3
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001836:	4413      	add	r3, r2
 8001838:	b24a      	sxtb	r2, r1
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	3301      	adds	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184c:	429a      	cmp	r2, r3
 800184e:	dbdd      	blt.n	800180c <stbiw__encode_png_line+0x330>
 8001850:	bf00      	nop
   }
}
 8001852:	372c      	adds	r7, #44	; 0x2c
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}

08001858 <stbi_write_png_to_mem>:

STBIWDEF unsigned char *stbi_write_png_to_mem(const unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b09c      	sub	sp, #112	; 0x70
 800185c:	af04      	add	r7, sp, #16
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
   int force_filter = stbi_write_force_png_filter;
 8001866:	4b7f      	ldr	r3, [pc, #508]	; (8001a64 <stbi_write_png_to_mem+0x20c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	65fb      	str	r3, [r7, #92]	; 0x5c
   int ctype[5] = { -1, 0, 4, 2, 6 };
 800186c:	4b7e      	ldr	r3, [pc, #504]	; (8001a68 <stbi_write_png_to_mem+0x210>)
 800186e:	f107 0420 	add.w	r4, r7, #32
 8001872:	461d      	mov	r5, r3
 8001874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	6023      	str	r3, [r4, #0]
   unsigned char sig[8] = { 137,80,78,71,13,10,26,10 };
 800187c:	4a7b      	ldr	r2, [pc, #492]	; (8001a6c <stbi_write_png_to_mem+0x214>)
 800187e:	f107 0318 	add.w	r3, r7, #24
 8001882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001886:	e883 0003 	stmia.w	r3, {r0, r1}
   unsigned char *out,*o, *filt, *zlib;
   signed char *line_buffer;
   int j,zlen;

   if (stride_bytes == 0)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <stbi_write_png_to_mem+0x42>
      stride_bytes = x * n;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	60bb      	str	r3, [r7, #8]

   if (force_filter >= 5) {
 800189a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189c:	2b04      	cmp	r3, #4
 800189e:	dd02      	ble.n	80018a6 <stbi_write_png_to_mem+0x4e>
      force_filter = -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   }

   filt = (unsigned char *) STBIW_MALLOC((x*n+1) * y); if (!filt) return 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f009 fc5a 	bl	800b170 <malloc>
 80018bc:	4603      	mov	r3, r0
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
 80018c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <stbi_write_png_to_mem+0x72>
 80018c6:	2300      	movs	r3, #0
 80018c8:	e1d9      	b.n	8001c7e <stbi_write_png_to_mem+0x426>
   line_buffer = (signed char *) STBIW_MALLOC(x * n); if (!line_buffer) { STBIW_FREE(filt); return 0; }
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f009 fc4c 	bl	800b170 <malloc>
 80018d8:	4603      	mov	r3, r0
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <stbi_write_png_to_mem+0x94>
 80018e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80018e4:	f009 fc4c 	bl	800b180 <free>
 80018e8:	2300      	movs	r3, #0
 80018ea:	e1c8      	b.n	8001c7e <stbi_write_png_to_mem+0x426>
   for (j=0; j < y; ++j) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80018f0:	e08b      	b.n	8001a0a <stbi_write_png_to_mem+0x1b2>
      int filter_type;
      if (force_filter > -1) {
 80018f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db10      	blt.n	800191a <stbi_write_png_to_mem+0xc2>
         filter_type = force_filter;
 80018f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fa:	657b      	str	r3, [r7, #84]	; 0x54
         stbiw__encode_png_line((unsigned char*)(pixels), stride_bytes, x, y, j, n, force_filter, line_buffer);
 80018fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fe:	9303      	str	r3, [sp, #12]
 8001900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff fde2 	bl	80014dc <stbiw__encode_png_line>
 8001918:	e053      	b.n	80019c2 <stbi_write_png_to_mem+0x16a>
      } else { // Estimate the best filter by running through all of them:
         int best_filter = 0, best_filter_val = 0x7fffffff, est, i;
 800191a:	2300      	movs	r3, #0
 800191c:	653b      	str	r3, [r7, #80]	; 0x50
 800191e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
         for (filter_type = 0; filter_type < 5; filter_type++) {
 8001924:	2300      	movs	r3, #0
 8001926:	657b      	str	r3, [r7, #84]	; 0x54
 8001928:	e034      	b.n	8001994 <stbi_write_png_to_mem+0x13c>
            stbiw__encode_png_line((unsigned char*)(pixels), stride_bytes, x, y, j, n, filter_type, line_buffer);
 800192a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192c:	9303      	str	r3, [sp, #12]
 800192e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff fdcb 	bl	80014dc <stbiw__encode_png_line>

            // Estimate the entropy of the line using this filter; the less, the better.
            est = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
            for (i = 0; i < x*n; ++i) {
 800194a:	2300      	movs	r3, #0
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
 800194e:	e00f      	b.n	8001970 <stbi_write_png_to_mem+0x118>
               est += abs((signed char) line_buffer[i]);
 8001950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001952:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001954:	4413      	add	r3, r2
 8001956:	f993 3000 	ldrsb.w	r3, [r3]
 800195a:	2b00      	cmp	r3, #0
 800195c:	bfb8      	it	lt
 800195e:	425b      	neglt	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001966:	4413      	add	r3, r2
 8001968:	64bb      	str	r3, [r7, #72]	; 0x48
            for (i = 0; i < x*n; ++i) {
 800196a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196c:	3301      	adds	r3, #1
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800197a:	429a      	cmp	r2, r3
 800197c:	dbe8      	blt.n	8001950 <stbi_write_png_to_mem+0xf8>
            }
            if (est < best_filter_val) {
 800197e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001982:	429a      	cmp	r2, r3
 8001984:	da03      	bge.n	800198e <stbi_write_png_to_mem+0x136>
               best_filter_val = est;
 8001986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001988:	64fb      	str	r3, [r7, #76]	; 0x4c
               best_filter = filter_type;
 800198a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198c:	653b      	str	r3, [r7, #80]	; 0x50
         for (filter_type = 0; filter_type < 5; filter_type++) {
 800198e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001990:	3301      	adds	r3, #1
 8001992:	657b      	str	r3, [r7, #84]	; 0x54
 8001994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001996:	2b04      	cmp	r3, #4
 8001998:	ddc7      	ble.n	800192a <stbi_write_png_to_mem+0xd2>
            }
         }
         if (filter_type != best_filter) {  // If the last iteration already got us the best filter, don't redo it
 800199a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800199c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800199e:	429a      	cmp	r2, r3
 80019a0:	d00f      	beq.n	80019c2 <stbi_write_png_to_mem+0x16a>
            stbiw__encode_png_line((unsigned char*)(pixels), stride_bytes, x, y, j, n, best_filter, line_buffer);
 80019a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a4:	9303      	str	r3, [sp, #12]
 80019a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff fd8f 	bl	80014dc <stbiw__encode_png_line>
            filter_type = best_filter;
 80019be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019c0:	657b      	str	r3, [r7, #84]	; 0x54
         }
      }
      // when we get here, filter_type contains the filter type, and line_buffer contains the data
      filt[j*(x*n+1)] = (unsigned char) filter_type;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d6:	4413      	add	r3, r2
 80019d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]
      STBIW_MEMMOVE(filt+j*(x*n+1)+1, line_buffer, x*n);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019f2:	18d0      	adds	r0, r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a00:	f009 fbd4 	bl	800b1ac <memmove>
   for (j=0; j < y; ++j) {
 8001a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a06:	3301      	adds	r3, #1
 8001a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	f6ff af6f 	blt.w	80018f2 <stbi_write_png_to_mem+0x9a>
   }
   STBIW_FREE(line_buffer);
 8001a14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a16:	f009 fbb3 	bl	800b180 <free>
   zlib = stbi_zlib_compress(filt, y*( x*n+1), &zlen, stbi_write_png_compression_level);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	fb02 f103 	mul.w	r1, r2, r3
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <stbi_write_png_to_mem+0x218>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f107 0210 	add.w	r2, r7, #16
 8001a32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001a34:	f7fe ff32 	bl	800089c <stbi_zlib_compress>
 8001a38:	63b8      	str	r0, [r7, #56]	; 0x38
   STBIW_FREE(filt);
 8001a3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001a3c:	f009 fba0 	bl	800b180 <free>
   if (!zlib) return 0;
 8001a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <stbi_write_png_to_mem+0x1f2>
 8001a46:	2300      	movs	r3, #0
 8001a48:	e119      	b.n	8001c7e <stbi_write_png_to_mem+0x426>

   // each tag requires 12 bytes of overhead
   out = (unsigned char *) STBIW_MALLOC(8 + 12+13 + 12+zlen + 12);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	3339      	adds	r3, #57	; 0x39
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f009 fb8e 	bl	800b170 <malloc>
 8001a54:	4603      	mov	r3, r0
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
   if (!out) return 0;
 8001a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10a      	bne.n	8001a74 <stbi_write_png_to_mem+0x21c>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e10d      	b.n	8001c7e <stbi_write_png_to_mem+0x426>
 8001a62:	bf00      	nop
 8001a64:	24000004 	.word	0x24000004
 8001a68:	0800ca20 	.word	0x0800ca20
 8001a6c:	0800ca34 	.word	0x0800ca34
 8001a70:	24000000 	.word	0x24000000
   *out_len = 8 + 12+13 + 12+zlen + 12;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f103 0239 	add.w	r2, r3, #57	; 0x39
 8001a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a7c:	601a      	str	r2, [r3, #0]

   o=out;
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a80:	617b      	str	r3, [r7, #20]
   STBIW_MEMMOVE(o,sig,8); o+= 8;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f107 0118 	add.w	r1, r7, #24
 8001a88:	2208      	movs	r2, #8
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f009 fb8e 	bl	800b1ac <memmove>
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3308      	adds	r3, #8
 8001a94:	617b      	str	r3, [r7, #20]
   stbiw__wp32(o, 13); // header length
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	220d      	movs	r2, #13
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	617b      	str	r3, [r7, #20]
   stbiw__wptag(o, "IHDR");
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2249      	movs	r2, #73	; 0x49
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	2248      	movs	r2, #72	; 0x48
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3302      	adds	r3, #2
 8001acc:	2244      	movs	r2, #68	; 0x44
 8001ace:	701a      	strb	r2, [r3, #0]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3303      	adds	r3, #3
 8001ad4:	2252      	movs	r2, #82	; 0x52
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3304      	adds	r3, #4
 8001adc:	617b      	str	r3, [r7, #20]
   stbiw__wp32(o, x);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	161a      	asrs	r2, r3, #24
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	141a      	asrs	r2, r3, #16
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	121a      	asrs	r2, r3, #8
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3302      	adds	r3, #2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3303      	adds	r3, #3
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	617b      	str	r3, [r7, #20]
   stbiw__wp32(o, y);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	161a      	asrs	r2, r3, #24
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	141a      	asrs	r2, r3, #16
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	121a      	asrs	r2, r3, #8
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3303      	adds	r3, #3
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	617b      	str	r3, [r7, #20]
   *o++ = 8;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	617a      	str	r2, [r7, #20]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	701a      	strb	r2, [r3, #0]
   *o++ = STBIW_UCHAR(ctype[n]);
 8001b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	3360      	adds	r3, #96	; 0x60
 8001b52:	443b      	add	r3, r7
 8001b54:	f853 1c40 	ldr.w	r1, [r3, #-64]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	617a      	str	r2, [r7, #20]
 8001b5e:	b2ca      	uxtb	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
   *o++ = 0;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	617a      	str	r2, [r7, #20]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
   *o++ = 0;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	617a      	str	r2, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
   *o++ = 0;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	617a      	str	r2, [r7, #20]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
   stbiw__wpcrc(&o,13);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	210d      	movs	r1, #13
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fc36 	bl	80013f8 <stbiw__wpcrc>

   stbiw__wp32(o, zlen);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	161a      	asrs	r2, r3, #24
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	141a      	asrs	r2, r3, #16
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	121a      	asrs	r2, r3, #8
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3302      	adds	r3, #2
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	617b      	str	r3, [r7, #20]
   stbiw__wptag(o, "IDAT");
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2249      	movs	r2, #73	; 0x49
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	2244      	movs	r2, #68	; 0x44
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3302      	adds	r3, #2
 8001bd0:	2241      	movs	r2, #65	; 0x41
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3303      	adds	r3, #3
 8001bd8:	2254      	movs	r2, #84	; 0x54
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3304      	adds	r3, #4
 8001be0:	617b      	str	r3, [r7, #20]
   STBIW_MEMMOVE(o, zlib, zlen);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001be8:	4618      	mov	r0, r3
 8001bea:	f009 fadf 	bl	800b1ac <memmove>
   o += zlen;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
   STBIW_FREE(zlib);
 8001bf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bf8:	f009 fac2 	bl	800b180 <free>
   stbiw__wpcrc(&o, zlen);
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fbf7 	bl	80013f8 <stbiw__wpcrc>

   stbiw__wp32(o,0);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3303      	adds	r3, #3
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	617b      	str	r3, [r7, #20]
   stbiw__wptag(o, "IEND");
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2249      	movs	r2, #73	; 0x49
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	2245      	movs	r2, #69	; 0x45
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3302      	adds	r3, #2
 8001c40:	224e      	movs	r2, #78	; 0x4e
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3303      	adds	r3, #3
 8001c48:	2244      	movs	r2, #68	; 0x44
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	617b      	str	r3, [r7, #20]
   stbiw__wpcrc(&o,0);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fbcd 	bl	80013f8 <stbiw__wpcrc>

   STBIW_ASSERT(o == out + *out_len);
 8001c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c66:	441a      	add	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d006      	beq.n	8001c7c <stbi_write_png_to_mem+0x424>
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <stbi_write_png_to_mem+0x430>)
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <stbi_write_png_to_mem+0x434>)
 8001c72:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8001c76:	4806      	ldr	r0, [pc, #24]	; (8001c90 <stbi_write_png_to_mem+0x438>)
 8001c78:	f008 ff76 	bl	800ab68 <__assert_func>

   return out;
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3760      	adds	r7, #96	; 0x60
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bdb0      	pop	{r4, r5, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	0800ca0c 	.word	0x0800ca0c
 8001c8c:	080189a8 	.word	0x080189a8
 8001c90:	0800c8d4 	.word	0x0800c8d4

08001c94 <follow_edges>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void follow_edges(unsigned char *edgemapptr, short *edgemagptr, short lowval,
    int cols)
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b098      	sub	sp, #96	; 0x60
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	80fb      	strh	r3, [r7, #6]
    short *tempmagptr;
    unsigned char *tempmapptr;
    int i;
    //float thethresh;
    int x[8] = { 1, 1, 0, -1, -1, -1, 0, 1 },
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <follow_edges+0xd0>)
 8001ca6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001caa:	461d      	mov	r5, r3
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        y[8] = { 0, 1, 1, 1, 0, -1, -1, -1 };
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <follow_edges+0xd4>)
 8001cba:	f107 0414 	add.w	r4, r7, #20
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for (i = 0; i<8; i++){
 8001ccc:	2300      	movs	r3, #0
 8001cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cd0:	e040      	b.n	8001d54 <follow_edges+0xc0>
        tempmapptr = edgemapptr - y[i] * cols + x[i];
 8001cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	3360      	adds	r3, #96	; 0x60
 8001cd8:	443b      	add	r3, r7
 8001cda:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	3360      	adds	r3, #96	; 0x60
 8001ce6:	443b      	add	r3, r7
 8001ce8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	1acb      	subs	r3, r1, r3
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	65bb      	str	r3, [r7, #88]	; 0x58
        tempmagptr = edgemagptr - y[i] * cols + x[i];
 8001cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	3360      	adds	r3, #96	; 0x60
 8001d00:	443b      	add	r3, r7
 8001d02:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d06:	4619      	mov	r1, r3
 8001d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	3360      	adds	r3, #96	; 0x60
 8001d0e:	443b      	add	r3, r7
 8001d10:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	1acb      	subs	r3, r1, r3
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4413      	add	r3, r2
 8001d22:	657b      	str	r3, [r7, #84]	; 0x54

        if ((*tempmapptr == POSSIBLE_EDGE) && (*tempmagptr > lowval)){
 8001d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b80      	cmp	r3, #128	; 0x80
 8001d2a:	d110      	bne.n	8001d4e <follow_edges+0xba>
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	da09      	bge.n	8001d4e <follow_edges+0xba>
            *tempmapptr = (unsigned char)EDGE;
 8001d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
            follow_edges(tempmapptr, tempmagptr, lowval, cols);
 8001d40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d48:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001d4a:	f7ff ffa3 	bl	8001c94 <follow_edges>
    for (i = 0; i<8; i++){
 8001d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d50:	3301      	adds	r3, #1
 8001d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	ddbb      	ble.n	8001cd2 <follow_edges+0x3e>
        }
    }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3760      	adds	r7, #96	; 0x60
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}
 8001d64:	0800ca3c 	.word	0x0800ca3c
 8001d68:	0800ca5c 	.word	0x0800ca5c

08001d6c <apply_hysteresis>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void apply_hysteresis(short int *mag, unsigned char *nms, int rows, int cols,
    float tlow, float thigh, unsigned char *edge)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	f5ad 3d00 	sub.w	sp, sp, #131072	; 0x20000
 8001d72:	b08f      	sub	sp, #60	; 0x3c
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001d7a:	f844 0c24 	str.w	r0, [r4, #-36]
 8001d7e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001d82:	f840 1c28 	str.w	r1, [r0, #-40]
 8001d86:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d8a:	f841 2c2c 	str.w	r2, [r1, #-44]
 8001d8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d92:	f842 3c30 	str.w	r3, [r2, #-48]
 8001d96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d9a:	ed03 0a0d 	vstr	s0, [r3, #-52]	; 0xffffffcc
 8001d9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001da2:	ed43 0a0e 	vstr	s1, [r3, #-56]	; 0xffffffc8
    * suppression suggested there could be an edge except for the border. At
    * the border we say there can not be an edge because it makes the
    * follow_edges algorithm more efficient to not worry about tracking an
    * edge off the side of the image.
    ****************************************************************************/
    for (r = 0, pos = 0; r<rows; r++){
 8001da6:	2300      	movs	r3, #0
 8001da8:	4a7a      	ldr	r2, [pc, #488]	; (8001f94 <apply_hysteresis+0x228>)
 8001daa:	443a      	add	r2, r7
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	4a79      	ldr	r2, [pc, #484]	; (8001f98 <apply_hysteresis+0x22c>)
 8001db2:	443a      	add	r2, r7
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e040      	b.n	8001e3a <apply_hysteresis+0xce>
        for (c = 0; c<cols; c++, pos++){
 8001db8:	2300      	movs	r3, #0
 8001dba:	4a78      	ldr	r2, [pc, #480]	; (8001f9c <apply_hysteresis+0x230>)
 8001dbc:	443a      	add	r2, r7
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e02b      	b.n	8001e1a <apply_hysteresis+0xae>
            if (nms[pos] == POSSIBLE_EDGE) edge[pos] = POSSIBLE_EDGE;
 8001dc2:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <apply_hysteresis+0x22c>)
 8001dc4:	443b      	add	r3, r7
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dcc:	f852 2c28 	ldr.w	r2, [r2, #-40]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d109      	bne.n	8001dec <apply_hysteresis+0x80>
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <apply_hysteresis+0x22c>)
 8001dda:	443b      	add	r3, r7
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a70      	ldr	r2, [pc, #448]	; (8001fa0 <apply_hysteresis+0x234>)
 8001de0:	443a      	add	r2, r7
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e008      	b.n	8001dfe <apply_hysteresis+0x92>
            else edge[pos] = NOEDGE;
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <apply_hysteresis+0x22c>)
 8001dee:	443b      	add	r3, r7
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6b      	ldr	r2, [pc, #428]	; (8001fa0 <apply_hysteresis+0x234>)
 8001df4:	443a      	add	r2, r7
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	22ff      	movs	r2, #255	; 0xff
 8001dfc:	701a      	strb	r2, [r3, #0]
        for (c = 0; c<cols; c++, pos++){
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <apply_hysteresis+0x230>)
 8001e00:	443b      	add	r3, r7
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <apply_hysteresis+0x230>)
 8001e08:	443a      	add	r2, r7
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e0e:	443b      	add	r3, r7
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e16:	443a      	add	r2, r7
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e1e:	4a5f      	ldr	r2, [pc, #380]	; (8001f9c <apply_hysteresis+0x230>)
 8001e20:	443a      	add	r2, r7
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbca      	blt.n	8001dc2 <apply_hysteresis+0x56>
    for (r = 0, pos = 0; r<rows; r++){
 8001e2c:	4b59      	ldr	r3, [pc, #356]	; (8001f94 <apply_hysteresis+0x228>)
 8001e2e:	443b      	add	r3, r7
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <apply_hysteresis+0x228>)
 8001e36:	443a      	add	r2, r7
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e3e:	4a55      	ldr	r2, [pc, #340]	; (8001f94 <apply_hysteresis+0x228>)
 8001e40:	443a      	add	r2, r7
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbb5      	blt.n	8001db8 <apply_hysteresis+0x4c>
        }
    }

    for (r = 0, pos = 0; r<rows; r++, pos += cols){
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	4a51      	ldr	r2, [pc, #324]	; (8001f94 <apply_hysteresis+0x228>)
 8001e50:	443a      	add	r2, r7
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	2300      	movs	r3, #0
 8001e56:	4a50      	ldr	r2, [pc, #320]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e58:	443a      	add	r2, r7
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	e029      	b.n	8001eb2 <apply_hysteresis+0x146>
        edge[pos] = NOEDGE;
 8001e5e:	4b4e      	ldr	r3, [pc, #312]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e60:	443b      	add	r3, r7
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <apply_hysteresis+0x234>)
 8001e66:	443a      	add	r2, r7
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	22ff      	movs	r2, #255	; 0xff
 8001e6e:	701a      	strb	r2, [r3, #0]
        edge[pos + cols - 1] = NOEDGE;
 8001e70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e74:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e76:	443a      	add	r2, r7
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b01      	subs	r3, #1
 8001e82:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <apply_hysteresis+0x234>)
 8001e84:	443a      	add	r2, r7
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	4413      	add	r3, r2
 8001e8a:	22ff      	movs	r2, #255	; 0xff
 8001e8c:	701a      	strb	r2, [r3, #0]
    for (r = 0, pos = 0; r<rows; r++, pos += cols){
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <apply_hysteresis+0x228>)
 8001e90:	443b      	add	r3, r7
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	4a3f      	ldr	r2, [pc, #252]	; (8001f94 <apply_hysteresis+0x228>)
 8001e98:	443a      	add	r2, r7
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea0:	4a3d      	ldr	r2, [pc, #244]	; (8001f98 <apply_hysteresis+0x22c>)
 8001ea2:	443a      	add	r2, r7
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <apply_hysteresis+0x22c>)
 8001eae:	443a      	add	r2, r7
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001eb6:	4a37      	ldr	r2, [pc, #220]	; (8001f94 <apply_hysteresis+0x228>)
 8001eb8:	443a      	add	r2, r7
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbcc      	blt.n	8001e5e <apply_hysteresis+0xf2>
    }
    pos = (rows - 1) * cols;
 8001ec4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ec8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ed2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	4a2f      	ldr	r2, [pc, #188]	; (8001f98 <apply_hysteresis+0x22c>)
 8001edc:	443a      	add	r2, r7
 8001ede:	6013      	str	r3, [r2, #0]
    for (c = 0; c<cols; c++, pos++){
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <apply_hysteresis+0x230>)
 8001ee4:	443a      	add	r2, r7
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e01f      	b.n	8001f2a <apply_hysteresis+0x1be>
        edge[c] = NOEDGE;
 8001eea:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <apply_hysteresis+0x230>)
 8001eec:	443b      	add	r3, r7
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <apply_hysteresis+0x234>)
 8001ef2:	443a      	add	r2, r7
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	701a      	strb	r2, [r3, #0]
        edge[pos] = NOEDGE;
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <apply_hysteresis+0x22c>)
 8001efe:	443b      	add	r3, r7
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <apply_hysteresis+0x234>)
 8001f04:	443a      	add	r2, r7
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	701a      	strb	r2, [r3, #0]
    for (c = 0; c<cols; c++, pos++){
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <apply_hysteresis+0x230>)
 8001f10:	443b      	add	r3, r7
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <apply_hysteresis+0x230>)
 8001f18:	443a      	add	r2, r7
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <apply_hysteresis+0x22c>)
 8001f1e:	443b      	add	r3, r7
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <apply_hysteresis+0x22c>)
 8001f26:	443a      	add	r2, r7
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <apply_hysteresis+0x230>)
 8001f30:	443a      	add	r2, r7
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dbd6      	blt.n	8001eea <apply_hysteresis+0x17e>

    /****************************************************************************
    * Compute the histogram of the magnitude image. Then use the histogram to
    * compute hysteresis thresholds.
    ****************************************************************************/
    for (r = 0; r<32768; r++) hist[r] = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <apply_hysteresis+0x228>)
 8001f40:	443a      	add	r2, r7
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e011      	b.n	8001f6a <apply_hysteresis+0x1fe>
 8001f46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <apply_hysteresis+0x228>)
 8001f4e:	443b      	add	r3, r7
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	2200      	movs	r2, #0
 8001f58:	f843 2c20 	str.w	r2, [r3, #-32]
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <apply_hysteresis+0x228>)
 8001f5e:	443b      	add	r3, r7
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <apply_hysteresis+0x228>)
 8001f66:	443a      	add	r2, r7
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <apply_hysteresis+0x228>)
 8001f6c:	443b      	add	r3, r7
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f74:	dbe7      	blt.n	8001f46 <apply_hysteresis+0x1da>

//    struct timespec start;
    //clock_gettime(CLOCK_MONOTONIC, &start);

    for (r = 0, pos = 0; r<rows; r++){
 8001f76:	2300      	movs	r3, #0
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <apply_hysteresis+0x228>)
 8001f7a:	443a      	add	r2, r7
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <apply_hysteresis+0x22c>)
 8001f82:	443a      	add	r2, r7
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e050      	b.n	800202a <apply_hysteresis+0x2be>
        for (c = 0; c<cols; c++, pos++){
 8001f88:	2300      	movs	r3, #0
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <apply_hysteresis+0x230>)
 8001f8c:	443a      	add	r2, r7
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e03b      	b.n	800200a <apply_hysteresis+0x29e>
 8001f92:	bf00      	nop
 8001f94:	00020034 	.word	0x00020034
 8001f98:	0002002c 	.word	0x0002002c
 8001f9c:	00020030 	.word	0x00020030
 8001fa0:	00020048 	.word	0x00020048
            if (edge[pos] == POSSIBLE_EDGE) hist[mag[pos]]++;
 8001fa4:	4b81      	ldr	r3, [pc, #516]	; (80021ac <apply_hysteresis+0x440>)
 8001fa6:	443b      	add	r3, r7
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a81      	ldr	r2, [pc, #516]	; (80021b0 <apply_hysteresis+0x444>)
 8001fac:	443a      	add	r2, r7
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	d11a      	bne.n	8001fee <apply_hysteresis+0x282>
 8001fb8:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <apply_hysteresis+0x440>)
 8001fba:	443b      	add	r3, r7
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fc4:	f852 2c24 	ldr.w	r2, [r2, #-36]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	0093      	lsls	r3, r2, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001fde:	1c59      	adds	r1, r3, #1
 8001fe0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	0093      	lsls	r3, r2, #2
 8001fe8:	4403      	add	r3, r0
 8001fea:	f843 1c20 	str.w	r1, [r3, #-32]
        for (c = 0; c<cols; c++, pos++){
 8001fee:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <apply_hysteresis+0x448>)
 8001ff0:	443b      	add	r3, r7
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	4a6f      	ldr	r2, [pc, #444]	; (80021b4 <apply_hysteresis+0x448>)
 8001ff8:	443a      	add	r2, r7
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	; (80021ac <apply_hysteresis+0x440>)
 8001ffe:	443b      	add	r3, r7
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a69      	ldr	r2, [pc, #420]	; (80021ac <apply_hysteresis+0x440>)
 8002006:	443a      	add	r2, r7
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800200e:	4a69      	ldr	r2, [pc, #420]	; (80021b4 <apply_hysteresis+0x448>)
 8002010:	443a      	add	r2, r7
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbc3      	blt.n	8001fa4 <apply_hysteresis+0x238>
    for (r = 0, pos = 0; r<rows; r++){
 800201c:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <apply_hysteresis+0x44c>)
 800201e:	443b      	add	r3, r7
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a64      	ldr	r2, [pc, #400]	; (80021b8 <apply_hysteresis+0x44c>)
 8002026:	443a      	add	r2, r7
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800202e:	4a62      	ldr	r2, [pc, #392]	; (80021b8 <apply_hysteresis+0x44c>)
 8002030:	443a      	add	r2, r7
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002038:	429a      	cmp	r2, r3
 800203a:	dba5      	blt.n	8001f88 <apply_hysteresis+0x21c>
    //printf("Hist loop in function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

    /****************************************************************************
    * Compute the number of pixels that passed the nonmaximal suppression.
    ****************************************************************************/
    for (r = 1, numedges = 0; r<32768; r++){
 800203c:	2301      	movs	r3, #1
 800203e:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <apply_hysteresis+0x44c>)
 8002040:	443a      	add	r2, r7
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <apply_hysteresis+0x450>)
 8002048:	443a      	add	r2, r7
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e029      	b.n	80020a2 <apply_hysteresis+0x336>
        if (hist[r] != 0) maximum_mag = r;
 800204e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002052:	461a      	mov	r2, r3
 8002054:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <apply_hysteresis+0x44c>)
 8002056:	443b      	add	r3, r7
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <apply_hysteresis+0x306>
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <apply_hysteresis+0x44c>)
 8002068:	443b      	add	r3, r7
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a54      	ldr	r2, [pc, #336]	; (80021c0 <apply_hysteresis+0x454>)
 800206e:	443a      	add	r2, r7
 8002070:	8013      	strh	r3, [r2, #0]
        numedges += hist[r];
 8002072:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002076:	461a      	mov	r2, r3
 8002078:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <apply_hysteresis+0x44c>)
 800207a:	443b      	add	r3, r7
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002086:	4a4d      	ldr	r2, [pc, #308]	; (80021bc <apply_hysteresis+0x450>)
 8002088:	443a      	add	r2, r7
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4413      	add	r3, r2
 800208e:	4a4b      	ldr	r2, [pc, #300]	; (80021bc <apply_hysteresis+0x450>)
 8002090:	443a      	add	r2, r7
 8002092:	6013      	str	r3, [r2, #0]
    for (r = 1, numedges = 0; r<32768; r++){
 8002094:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <apply_hysteresis+0x44c>)
 8002096:	443b      	add	r3, r7
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3301      	adds	r3, #1
 800209c:	4a46      	ldr	r2, [pc, #280]	; (80021b8 <apply_hysteresis+0x44c>)
 800209e:	443a      	add	r2, r7
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <apply_hysteresis+0x44c>)
 80020a4:	443b      	add	r3, r7
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ac:	dbcf      	blt.n	800204e <apply_hysteresis+0x2e2>
    }

    highcount = (int)(numedges * thigh + 0.5);
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <apply_hysteresis+0x450>)
 80020b0:	443b      	add	r3, r7
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020c0:	ed53 7a0e 	vldr	s15, [r3, #-56]	; 0xffffffc8
 80020c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020cc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80020d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80020d8:	ee17 3a90 	vmov	r3, s15
 80020dc:	4a39      	ldr	r2, [pc, #228]	; (80021c4 <apply_hysteresis+0x458>)
 80020de:	443a      	add	r2, r7
 80020e0:	6013      	str	r3, [r2, #0]
    * "A Computational Approach to Edge Detection" that "The ratio of the
    * high to low threshold in the implementation is in the range two or three
    * to one." That means that in terms of this implementation, we should
    * choose tlow ~= 0.5 or 0.33333.
    ****************************************************************************/
    r = 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	4a34      	ldr	r2, [pc, #208]	; (80021b8 <apply_hysteresis+0x44c>)
 80020e6:	443a      	add	r2, r7
 80020e8:	6013      	str	r3, [r2, #0]
    numedges = hist[1];
 80020ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020ee:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80020f2:	4a32      	ldr	r2, [pc, #200]	; (80021bc <apply_hysteresis+0x450>)
 80020f4:	443a      	add	r2, r7
 80020f6:	6013      	str	r3, [r2, #0]
    while ((r<(maximum_mag - 1)) && (numedges < highcount)){
 80020f8:	e017      	b.n	800212a <apply_hysteresis+0x3be>
        r++;
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <apply_hysteresis+0x44c>)
 80020fc:	443b      	add	r3, r7
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <apply_hysteresis+0x44c>)
 8002104:	443a      	add	r2, r7
 8002106:	6013      	str	r3, [r2, #0]
        numedges += hist[r];
 8002108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800210c:	461a      	mov	r2, r3
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <apply_hysteresis+0x44c>)
 8002110:	443b      	add	r3, r7
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800211c:	4a27      	ldr	r2, [pc, #156]	; (80021bc <apply_hysteresis+0x450>)
 800211e:	443a      	add	r2, r7
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <apply_hysteresis+0x450>)
 8002126:	443a      	add	r2, r7
 8002128:	6013      	str	r3, [r2, #0]
    while ((r<(maximum_mag - 1)) && (numedges < highcount)){
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <apply_hysteresis+0x454>)
 800212c:	443b      	add	r3, r7
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	3b01      	subs	r3, #1
 8002134:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <apply_hysteresis+0x44c>)
 8002136:	443a      	add	r2, r7
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	da07      	bge.n	800214e <apply_hysteresis+0x3e2>
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <apply_hysteresis+0x450>)
 8002140:	443b      	add	r3, r7
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <apply_hysteresis+0x458>)
 8002146:	443b      	add	r3, r7
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	dbd5      	blt.n	80020fa <apply_hysteresis+0x38e>
    }
    highthreshold = r;
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <apply_hysteresis+0x44c>)
 8002150:	443b      	add	r3, r7
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <apply_hysteresis+0x45c>)
 8002156:	443a      	add	r2, r7
 8002158:	6013      	str	r3, [r2, #0]
    lowthreshold = (int)(highthreshold * tlow + 0.5);
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <apply_hysteresis+0x45c>)
 800215c:	443b      	add	r3, r7
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002168:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800216c:	ed53 7a0d 	vldr	s15, [r3, #-52]	; 0xffffffcc
 8002170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002174:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002178:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800217c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002180:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002184:	ee17 3a90 	vmov	r3, s15
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <apply_hysteresis+0x460>)
 800218a:	443a      	add	r2, r7
 800218c:	6013      	str	r3, [r2, #0]

    /****************************************************************************
    * This loop lor pixels above the highthreshold to locate edges and
    * then calls follow_edges to continue the edge.
    ****************************************************************************/
    for (r = 0, pos = 0; r<rows; r++){
 800218e:	2300      	movs	r3, #0
 8002190:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <apply_hysteresis+0x44c>)
 8002192:	443a      	add	r2, r7
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	2300      	movs	r3, #0
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <apply_hysteresis+0x440>)
 800219a:	443a      	add	r2, r7
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e073      	b.n	8002288 <apply_hysteresis+0x51c>
        for (c = 0; c<cols; c++, pos++){
 80021a0:	2300      	movs	r3, #0
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <apply_hysteresis+0x448>)
 80021a4:	443a      	add	r2, r7
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e05e      	b.n	8002268 <apply_hysteresis+0x4fc>
 80021aa:	bf00      	nop
 80021ac:	0002002c 	.word	0x0002002c
 80021b0:	00020048 	.word	0x00020048
 80021b4:	00020030 	.word	0x00020030
 80021b8:	00020034 	.word	0x00020034
 80021bc:	00020028 	.word	0x00020028
 80021c0:	00020026 	.word	0x00020026
 80021c4:	00020020 	.word	0x00020020
 80021c8:	0002001c 	.word	0x0002001c
 80021cc:	00020018 	.word	0x00020018
            if ((edge[pos] == POSSIBLE_EDGE) && (mag[pos] >= highthreshold)){
 80021d0:	4b59      	ldr	r3, [pc, #356]	; (8002338 <apply_hysteresis+0x5cc>)
 80021d2:	443b      	add	r3, r7
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a59      	ldr	r2, [pc, #356]	; (800233c <apply_hysteresis+0x5d0>)
 80021d8:	443a      	add	r2, r7
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d133      	bne.n	800224c <apply_hysteresis+0x4e0>
 80021e4:	4b54      	ldr	r3, [pc, #336]	; (8002338 <apply_hysteresis+0x5cc>)
 80021e6:	443b      	add	r3, r7
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021f0:	f852 2c24 	ldr.w	r2, [r2, #-36]
 80021f4:	4413      	add	r3, r2
 80021f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <apply_hysteresis+0x5d4>)
 80021fe:	443b      	add	r3, r7
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4293      	cmp	r3, r2
 8002204:	dc22      	bgt.n	800224c <apply_hysteresis+0x4e0>
                edge[pos] = EDGE;
 8002206:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <apply_hysteresis+0x5cc>)
 8002208:	443b      	add	r3, r7
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a4b      	ldr	r2, [pc, #300]	; (800233c <apply_hysteresis+0x5d0>)
 800220e:	443a      	add	r2, r7
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4413      	add	r3, r2
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
                follow_edges((edge + pos), (mag + pos), lowthreshold, cols);
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <apply_hysteresis+0x5cc>)
 800221a:	443b      	add	r3, r7
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a47      	ldr	r2, [pc, #284]	; (800233c <apply_hysteresis+0x5d0>)
 8002220:	443a      	add	r2, r7
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	18d0      	adds	r0, r2, r3
 8002226:	4b44      	ldr	r3, [pc, #272]	; (8002338 <apply_hysteresis+0x5cc>)
 8002228:	443b      	add	r3, r7
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002232:	f852 2c24 	ldr.w	r2, [r2, #-36]
 8002236:	18d1      	adds	r1, r2, r3
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <apply_hysteresis+0x5d8>)
 800223a:	443b      	add	r3, r7
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b21a      	sxth	r2, r3
 8002240:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002244:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002248:	f7ff fd24 	bl	8001c94 <follow_edges>
        for (c = 0; c<cols; c++, pos++){
 800224c:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <apply_hysteresis+0x5dc>)
 800224e:	443b      	add	r3, r7
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	4a3c      	ldr	r2, [pc, #240]	; (8002348 <apply_hysteresis+0x5dc>)
 8002256:	443a      	add	r2, r7
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <apply_hysteresis+0x5cc>)
 800225c:	443b      	add	r3, r7
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	4a35      	ldr	r2, [pc, #212]	; (8002338 <apply_hysteresis+0x5cc>)
 8002264:	443a      	add	r2, r7
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800226c:	4a36      	ldr	r2, [pc, #216]	; (8002348 <apply_hysteresis+0x5dc>)
 800226e:	443a      	add	r2, r7
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002276:	429a      	cmp	r2, r3
 8002278:	dbaa      	blt.n	80021d0 <apply_hysteresis+0x464>
    for (r = 0, pos = 0; r<rows; r++){
 800227a:	4b34      	ldr	r3, [pc, #208]	; (800234c <apply_hysteresis+0x5e0>)
 800227c:	443b      	add	r3, r7
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a32      	ldr	r2, [pc, #200]	; (800234c <apply_hysteresis+0x5e0>)
 8002284:	443a      	add	r2, r7
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800228c:	4a2f      	ldr	r2, [pc, #188]	; (800234c <apply_hysteresis+0x5e0>)
 800228e:	443a      	add	r2, r7
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002296:	429a      	cmp	r2, r3
 8002298:	db82      	blt.n	80021a0 <apply_hysteresis+0x434>
    }

    /****************************************************************************
    * Set all the remaining possible edges to non-edges.
    ****************************************************************************/
    for (r = 0, pos = 0; r<rows; r++){
 800229a:	2300      	movs	r3, #0
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <apply_hysteresis+0x5e0>)
 800229e:	443a      	add	r2, r7
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <apply_hysteresis+0x5cc>)
 80022a6:	443a      	add	r2, r7
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e035      	b.n	8002318 <apply_hysteresis+0x5ac>
        for (c = 0; c<cols; c++, pos++) if (edge[pos] != EDGE) edge[pos] = NOEDGE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	4a26      	ldr	r2, [pc, #152]	; (8002348 <apply_hysteresis+0x5dc>)
 80022b0:	443a      	add	r2, r7
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e020      	b.n	80022f8 <apply_hysteresis+0x58c>
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <apply_hysteresis+0x5cc>)
 80022b8:	443b      	add	r3, r7
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1f      	ldr	r2, [pc, #124]	; (800233c <apply_hysteresis+0x5d0>)
 80022be:	443a      	add	r2, r7
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <apply_hysteresis+0x570>
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <apply_hysteresis+0x5cc>)
 80022cc:	443b      	add	r3, r7
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1a      	ldr	r2, [pc, #104]	; (800233c <apply_hysteresis+0x5d0>)
 80022d2:	443a      	add	r2, r7
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	22ff      	movs	r2, #255	; 0xff
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <apply_hysteresis+0x5dc>)
 80022de:	443b      	add	r3, r7
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a18      	ldr	r2, [pc, #96]	; (8002348 <apply_hysteresis+0x5dc>)
 80022e6:	443a      	add	r2, r7
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <apply_hysteresis+0x5cc>)
 80022ec:	443b      	add	r3, r7
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a11      	ldr	r2, [pc, #68]	; (8002338 <apply_hysteresis+0x5cc>)
 80022f4:	443a      	add	r2, r7
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022fc:	4a12      	ldr	r2, [pc, #72]	; (8002348 <apply_hysteresis+0x5dc>)
 80022fe:	443a      	add	r2, r7
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002306:	429a      	cmp	r2, r3
 8002308:	dbd5      	blt.n	80022b6 <apply_hysteresis+0x54a>
    for (r = 0, pos = 0; r<rows; r++){
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <apply_hysteresis+0x5e0>)
 800230c:	443b      	add	r3, r7
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <apply_hysteresis+0x5e0>)
 8002314:	443a      	add	r2, r7
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800231c:	4a0b      	ldr	r2, [pc, #44]	; (800234c <apply_hysteresis+0x5e0>)
 800231e:	443a      	add	r2, r7
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002326:	429a      	cmp	r2, r3
 8002328:	dbc0      	blt.n	80022ac <apply_hysteresis+0x540>
    }
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	f507 3700 	add.w	r7, r7, #131072	; 0x20000
 8002332:	373c      	adds	r7, #60	; 0x3c
 8002334:	46bd      	mov	sp, r7
 8002336:	bd90      	pop	{r4, r7, pc}
 8002338:	0002002c 	.word	0x0002002c
 800233c:	00020048 	.word	0x00020048
 8002340:	0002001c 	.word	0x0002001c
 8002344:	00020018 	.word	0x00020018
 8002348:	00020030 	.word	0x00020030
 800234c:	00020034 	.word	0x00020034

08002350 <non_max_supp>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void non_max_supp(short *mag, short *gradx, short *grady, int nrows, int ncols,
    unsigned char *result)
{
 8002350:	b480      	push	{r7}
 8002352:	b097      	sub	sp, #92	; 0x5c
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]


    /****************************************************************************
    * Zero the edges of the result image.
    ****************************************************************************/
    for (count = 0, resultrowptr = result, resultptr = result + ncols*(nrows - 1);
 800235e:	2300      	movs	r3, #0
 8002360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	3b01      	subs	r3, #1
 800236a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	461a      	mov	r2, r3
 8002372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002374:	4413      	add	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	e00f      	b.n	800239a <non_max_supp+0x4a>
        count<ncols; resultptr++, resultrowptr++, count++){
        *resultrowptr = *resultptr = (unsigned char)0;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	701a      	strb	r2, [r3, #0]
        count<ncols; resultptr++, resultrowptr++, count++){
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	3301      	adds	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002396:	3301      	adds	r3, #1
 8002398:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (count = 0, resultrowptr = result, resultptr = result + ncols*(nrows - 1);
 800239a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800239c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800239e:	429a      	cmp	r2, r3
 80023a0:	dbeb      	blt.n	800237a <non_max_supp+0x2a>
    }

    for (count = 0, resultptr = result, resultrowptr = result + ncols - 1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ac:	3b01      	subs	r3, #1
 80023ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80023b0:	4413      	add	r3, r2
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	e011      	b.n	80023da <non_max_supp+0x8a>
        count<nrows; count++, resultptr += ncols, resultrowptr += ncols){
        *resultptr = *resultrowptr = (unsigned char)0;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	701a      	strb	r2, [r3, #0]
        count<nrows; count++, resultptr += ncols, resultrowptr += ncols){
 80023c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c6:	3301      	adds	r3, #1
 80023c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	4413      	add	r3, r2
 80023d8:	61fb      	str	r3, [r7, #28]
    for (count = 0, resultptr = result, resultrowptr = result + ncols - 1;
 80023da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	dbe9      	blt.n	80023b6 <non_max_supp+0x66>
  clock_gettime(CLOCK_MONOTONIC, &start);
*/
    /****************************************************************************
    * Suppress non-maximum points.
    ****************************************************************************/
    for (rowcount = 1, magrowptr = mag + ncols + 1, gxrowptr = gradx + ncols + 1,
 80023e2:	2301      	movs	r3, #1
 80023e4:	657b      	str	r3, [r7, #84]	; 0x54
 80023e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e8:	3301      	adds	r3, #1
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f4:	3301      	adds	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4413      	add	r3, r2
 80023fc:	643b      	str	r3, [r7, #64]	; 0x40
        gyrowptr = grady + ncols + 1, resultrowptr = result + ncols + 1;
 80023fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002400:	3301      	adds	r3, #1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
 800240a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800240c:	3301      	adds	r3, #1
 800240e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002410:	4413      	add	r3, r2
 8002412:	61fb      	str	r3, [r7, #28]
    for (rowcount = 1, magrowptr = mag + ncols + 1, gxrowptr = gradx + ncols + 1,
 8002414:	e36e      	b.n	8002af4 <non_max_supp+0x7a4>
        rowcount<nrows - 2;
    rowcount++, magrowptr += ncols, gyrowptr += ncols, gxrowptr += ncols,
        resultrowptr += ncols){
        for (colcount = 1, magptr = magrowptr, gxptr = gxrowptr, gyptr = gyrowptr,
 8002416:	2301      	movs	r3, #1
 8002418:	653b      	str	r3, [r7, #80]	; 0x50
 800241a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
 800241e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
            resultptr = resultrowptr; colcount<ncols - 2;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	61bb      	str	r3, [r7, #24]
        for (colcount = 1, magptr = magrowptr, gxptr = gxrowptr, gyptr = gyrowptr,
 800242a:	e347      	b.n	8002abc <non_max_supp+0x76c>
            colcount++, magptr++, gxptr++, gyptr++, resultptr++){
            m00 = *magptr;
 800242c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	82fb      	strh	r3, [r7, #22]
            if (m00 == 0){
 8002432:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <non_max_supp+0xf2>
                *resultptr = (unsigned char)NOEDGE;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	22ff      	movs	r2, #255	; 0xff
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e026      	b.n	8002490 <non_max_supp+0x140>
            }
            else{
                xperp = -(gx = *gxptr) / ((float)m00);
 8002442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	867b      	strh	r3, [r7, #50]	; 0x32
 8002448:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800244c:	425b      	negs	r3, r3
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002456:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002466:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                yperp = (gy = *gyptr) / ((float)m00);
 800246a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	863b      	strh	r3, [r7, #48]	; 0x30
 8002470:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800247c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248c:	edc7 7a08 	vstr	s15, [r7, #32]
            }

            if (gx >= 0){
 8002490:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002494:	2b00      	cmp	r3, #0
 8002496:	f2c0 8170 	blt.w	800277a <non_max_supp+0x42a>
                if (gy >= 0){
 800249a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f2c0 80b4 	blt.w	800260c <non_max_supp+0x2bc>
                    if (gx >= gy)
 80024a4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80024a8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80024ac:	429a      	cmp	r2, r3
 80024ae:	db53      	blt.n	8002558 <non_max_supp+0x208>
                    {
                        /* 111 */
                        /* Left point */
                        z1 = *(magptr - 1);
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b2:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80024b6:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols - 1);
 80024b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024c4:	4413      	add	r3, r2
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	827b      	strh	r3, [r7, #18]

                        mag1 = (m00 - z1)*xperp + (z2 - z1)*yperp;
 80024ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80024ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80024fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002502:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr + 1);
 8002506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002508:	885b      	ldrh	r3, [r3, #2]
 800250a:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols + 1);
 800250c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250e:	3301      	adds	r3, #1
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002514:	4413      	add	r3, r2
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	827b      	strh	r3, [r7, #18]

                        mag2 = (m00 - z1)*xperp + (z2 - z1)*yperp;
 800251a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800251e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800252c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002534:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002538:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002546:	edd7 7a08 	vldr	s15, [r7, #32]
 800254a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002552:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8002556:	e282      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                    else
                    {
                        /* 110 */
                        /* Left point */
                        z1 = *(magptr - ncols);
 8002558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	425b      	negs	r3, r3
 800255e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002560:	4413      	add	r3, r2
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols - 1);
 8002566:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002568:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002572:	4413      	add	r3, r2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	827b      	strh	r3, [r7, #18]

                        mag1 = (z1 - z2)*xperp + (z1 - m00)*yperp;
 8002578:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800257c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800258e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002592:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002596:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80025a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr + ncols);
 80025b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ba:	4413      	add	r3, r2
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols + 1);
 80025c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c2:	3301      	adds	r3, #1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025c8:	4413      	add	r3, r2
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	827b      	strh	r3, [r7, #18]

                        mag2 = (z1 - z2)*xperp + (z1 - m00)*yperp;
 80025ce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80025d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80025ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80025fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002606:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800260a:	e228      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                }
                else
                {
                    if (gx >= -gy)
 800260c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002610:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002614:	425b      	negs	r3, r3
 8002616:	429a      	cmp	r2, r3
 8002618:	db54      	blt.n	80026c4 <non_max_supp+0x374>
                    {
                        /* 101 */
                        /* Left point */
                        z1 = *(magptr - 1);
 800261a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8002620:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols - 1);
 8002622:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002624:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002628:	4413      	add	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800262e:	4413      	add	r3, r2
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	827b      	strh	r3, [r7, #18]

                        mag1 = (m00 - z1)*xperp + (z1 - z2)*yperp;
 8002634:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002638:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002646:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800264a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800264e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002652:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002660:	edd7 7a08 	vldr	s15, [r7, #32]
 8002664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr + 1);
 8002670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002672:	885b      	ldrh	r3, [r3, #2]
 8002674:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols + 1);
 8002676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002678:	f1c3 0301 	rsb	r3, r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002680:	4413      	add	r3, r2
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	827b      	strh	r3, [r7, #18]

                        mag2 = (m00 - z1)*xperp + (z1 - z2)*yperp;
 8002686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800268a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002698:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800269c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	ee07 3a90 	vmov	s15, r3
 80026ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80026b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80026c2:	e1cc      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                    else
                    {
                        /* 100 */
                        /* Left point */
                        z1 = *(magptr + ncols);
 80026c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026ca:	4413      	add	r3, r2
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols - 1);
 80026d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80026d6:	4413      	add	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026dc:	4413      	add	r3, r2
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	827b      	strh	r3, [r7, #18]

                        mag1 = (z1 - z2)*xperp + (m00 - z1)*yperp;
 80026e2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002700:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800270e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr - ncols);
 800271e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	425b      	negs	r3, r3
 8002724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002726:	4413      	add	r3, r2
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols + 1);
 800272c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272e:	f1c3 0301 	rsb	r3, r3, #1
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002736:	4413      	add	r3, r2
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	827b      	strh	r3, [r7, #18]

                        mag2 = (z1 - z2)*xperp + (m00 - z1)*yperp;
 800273c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	ee07 3a90 	vmov	s15, r3
 800274a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800274e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002756:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800275a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002768:	edd7 7a08 	vldr	s15, [r7, #32]
 800276c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8002778:	e171      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                }
            }
            else
            {
                if ((gy = *gyptr) >= 0)
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	863b      	strh	r3, [r7, #48]	; 0x30
 8002780:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002784:	2b00      	cmp	r3, #0
 8002786:	f2c0 80b7 	blt.w	80028f8 <non_max_supp+0x5a8>
                {
                    if (-gx >= gy)
 800278a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800278e:	425a      	negs	r2, r3
 8002790:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002794:	429a      	cmp	r2, r3
 8002796:	db54      	blt.n	8002842 <non_max_supp+0x4f2>
                    {
                        /* 011 */
                        /* Left point */
                        z1 = *(magptr + 1);
 8002798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279a:	885b      	ldrh	r3, [r3, #2]
 800279c:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols + 1);
 800279e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a0:	f1c3 0301 	rsb	r3, r3, #1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027a8:	4413      	add	r3, r2
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	827b      	strh	r3, [r7, #18]

                        mag1 = (z1 - m00)*xperp + (z2 - z1)*yperp;
 80027ae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80027b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027da:	edd7 7a08 	vldr	s15, [r7, #32]
 80027de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr - 1);
 80027ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ec:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80027f0:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols - 1);
 80027f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80027f8:	4413      	add	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	827b      	strh	r3, [r7, #18]

                        mag2 = (z1 - m00)*xperp + (z2 - z1)*yperp;
 8002804:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002808:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002816:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800281a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002822:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002830:	edd7 7a08 	vldr	s15, [r7, #32]
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8002840:	e10d      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                    else
                    {
                        /* 010 */
                        /* Left point */
                        z1 = *(magptr - ncols);
 8002842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	425b      	negs	r3, r3
 8002848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols + 1);
 8002850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002852:	f1c3 0301 	rsb	r3, r3, #1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800285a:	4413      	add	r3, r2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	827b      	strh	r3, [r7, #18]

                        mag1 = (z2 - z1)*xperp + (z1 - m00)*yperp;
 8002860:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002864:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002872:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800287a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800287e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800288c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr + ncols);
 800289c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols - 1);
 80028a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80028ae:	4413      	add	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028b4:	4413      	add	r3, r2
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	827b      	strh	r3, [r7, #18]

                        mag2 = (z2 - z1)*xperp + (z1 - m00)*yperp;
 80028ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80028be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80028d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80028ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80028f6:	e0b2      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                }
                else
                {
                    if (-gx > -gy)
 80028f8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80028fc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002900:	429a      	cmp	r2, r3
 8002902:	da53      	bge.n	80029ac <non_max_supp+0x65c>
                    {
                        /* 001 */
                        /* Left point */
                        z1 = *(magptr + 1);
 8002904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002906:	885b      	ldrh	r3, [r3, #2]
 8002908:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols + 1);
 800290a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800290c:	3301      	adds	r3, #1
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002912:	4413      	add	r3, r2
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	827b      	strh	r3, [r7, #18]

                        mag1 = (z1 - m00)*xperp + (z1 - z2)*yperp;
 8002918:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800291c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800292e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002932:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002936:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	ee07 3a90 	vmov	s15, r3
 8002940:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002944:	edd7 7a08 	vldr	s15, [r7, #32]
 8002948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr - 1);
 8002954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002956:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 800295a:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols - 1);
 800295c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800295e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002968:	4413      	add	r3, r2
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	827b      	strh	r3, [r7, #18]

                        mag2 = (z1 - m00)*xperp + (z1 - z2)*yperp;
 800296e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002972:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	ee07 3a90 	vmov	s15, r3
 800297c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002980:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002988:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800298c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800299a:	edd7 7a08 	vldr	s15, [r7, #32]
 800299e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80029aa:	e058      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                    else
                    {
                        /* 000 */
                        /* Left point */
                        z1 = *(magptr + ncols);
 80029ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b2:	4413      	add	r3, r2
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols + 1);
 80029b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029c0:	4413      	add	r3, r2
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	827b      	strh	r3, [r7, #18]

                        mag1 = (z2 - z1)*xperp + (m00 - z1)*yperp;
 80029c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80029e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80029f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr - ncols);
 8002a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	425b      	negs	r3, r3
 8002a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a0a:	4413      	add	r3, r2
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols - 1);
 8002a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a1c:	4413      	add	r3, r2
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	827b      	strh	r3, [r7, #18]

                        mag2 = (z2 - z1)*xperp + (m00 - z1)*yperp;
 8002a22:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                }
            }

            /* Now determine if the current point is a maximum point */

            if ((mag1 > 0.0) || (mag2 > 0.0))
 8002a5e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	dc06      	bgt.n	8002a7a <non_max_supp+0x72a>
 8002a6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a78:	dd03      	ble.n	8002a82 <non_max_supp+0x732>
            {
                *resultptr = (unsigned char)NOEDGE;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e00d      	b.n	8002a9e <non_max_supp+0x74e>
            }
            else
            {
                if (mag2 == 0.0)
 8002a82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8e:	d103      	bne.n	8002a98 <non_max_supp+0x748>
                    *resultptr = (unsigned char)NOEDGE;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e002      	b.n	8002a9e <non_max_supp+0x74e>
                else
                    *resultptr = (unsigned char)POSSIBLE_EDGE;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	701a      	strb	r2, [r3, #0]
            colcount++, magptr++, gxptr++, gyptr++, resultptr++){
 8002a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aac:	3302      	adds	r3, #2
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61bb      	str	r3, [r7, #24]
            resultptr = resultrowptr; colcount<ncols - 2;
 8002abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abe:	3b02      	subs	r3, #2
        for (colcount = 1, magptr = magrowptr, gxptr = gxrowptr, gyptr = gyrowptr,
 8002ac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	f6ff acb2 	blt.w	800242c <non_max_supp+0xdc>
    rowcount++, magrowptr += ncols, gyrowptr += ncols, gxrowptr += ncols,
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	3301      	adds	r3, #1
 8002acc:	657b      	str	r3, [r7, #84]	; 0x54
 8002ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ad4:	4413      	add	r3, r2
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ade:	4413      	add	r3, r2
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ae8:	4413      	add	r3, r2
 8002aea:	643b      	str	r3, [r7, #64]	; 0x40
        resultrowptr += ncols){
 8002aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	61fb      	str	r3, [r7, #28]
        rowcount<nrows - 2;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	3b02      	subs	r3, #2
    for (rowcount = 1, magrowptr = mag + ncols + 1, gxrowptr = gradx + ncols + 1,
 8002af8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002afa:	429a      	cmp	r2, r3
 8002afc:	f6ff ac8b 	blt.w	8002416 <non_max_supp+0xc6>
        }
    }

  //  printf("Function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	375c      	adds	r7, #92	; 0x5c
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <canny>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void canny(unsigned char *image, int rows, int cols, float sigma,
    float tlow, float thigh, unsigned char **edge, char *fname)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b090      	sub	sp, #64	; 0x40
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	61f8      	str	r0, [r7, #28]
 8002b18:	61b9      	str	r1, [r7, #24]
 8002b1a:	617a      	str	r2, [r7, #20]
 8002b1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b20:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b24:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b28:	607b      	str	r3, [r7, #4]
    /****************************************************************************
    * Perform gaussian smoothing on the image using the input standard
    * deviation.
    ****************************************************************************/

    gaussian_smooth(image, rows, cols, sigma, &smoothedim);
 8002b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b2e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	69f8      	ldr	r0, [r7, #28]
 8002b38:	f000 fa36 	bl	8002fa8 <gaussian_smooth>

    /****************************************************************************
    * Compute the first derivative in the x and y directions.
    ****************************************************************************/
    derrivative_x_y(smoothedim, rows, cols, &delta_x, &delta_y);
 8002b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	69b9      	ldr	r1, [r7, #24]
 8002b4e:	f000 f8f9 	bl	8002d44 <derrivative_x_y>

    free(smoothedim);
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	4618      	mov	r0, r3
 8002b56:	f008 fb13 	bl	800b180 <free>

    /****************************************************************************
    * Compute the magnitude of the gradient.
    ****************************************************************************/
    magnitude_x_y(delta_x, delta_y, rows, cols, &magnitude);
 8002b5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	f000 f864 	bl	8002c34 <magnitude_x_y>

    /****************************************************************************
    * Perform non-maximal suppression.
    ****************************************************************************/
    if ((nms = (unsigned char *)calloc(rows*cols, sizeof(unsigned char))) == NULL){
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f008 f814 	bl	800aba4 <calloc>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <canny+0x8c>
        fprintf(stderr, "Error allocating the nms image.\n");
 8002b86:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <canny+0x118>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4826      	ldr	r0, [pc, #152]	; (8002c2c <canny+0x11c>)
 8002b92:	f008 fa53 	bl	800b03c <fwrite>
        exit(1);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f008 f812 	bl	800abc0 <exit>
    }

    non_max_supp(magnitude, delta_x, delta_y, rows, cols, nms);
 8002b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f7ff fbd0 	bl	8002350 <non_max_supp>

    free(delta_x);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f008 fae4 	bl	800b180 <free>
    free(delta_y);
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f008 fae0 	bl	800b180 <free>
    /****************************************************************************
    * Use hysteresis to mark the edge pixels.
    ****************************************************************************/
    if (CANNY_LIB_VERBOSE) printf("Doing hysteresis thresholding.\n");

    if ((*edge = (unsigned char *)calloc(rows*cols, sizeof(unsigned char))) == NULL){
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f007 ffea 	bl	800aba4 <calloc>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <canny+0xe6>
        fprintf(stderr, "Error allocating the edge image.\n");
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <canny+0x118>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2221      	movs	r2, #33	; 0x21
 8002be8:	2101      	movs	r1, #1
 8002bea:	4811      	ldr	r0, [pc, #68]	; (8002c30 <canny+0x120>)
 8002bec:	f008 fa26 	bl	800b03c <fwrite>
        exit(1);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f007 ffe5 	bl	800abc0 <exit>
    }

    apply_hysteresis(magnitude, nms, rows, cols, tlow, thigh, *edge);
 8002bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c02:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c0c:	f7ff f8ae 	bl	8001d6c <apply_hysteresis>
    /****************************************************************************
    * Free all of the memory that we allocated except for the edge image that
    * is still being used to store out result.
    ****************************************************************************/

    free(magnitude);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f008 fab4 	bl	800b180 <free>
    free(nms);
 8002c18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c1a:	f008 fab1 	bl	800b180 <free>
}
 8002c1e:	bf00      	nop
 8002c20:	3738      	adds	r7, #56	; 0x38
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	240004fc 	.word	0x240004fc
 8002c2c:	0800ca7c 	.word	0x0800ca7c
 8002c30:	0800caa0 	.word	0x0800caa0

08002c34 <magnitude_x_y>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void magnitude_x_y(short int *delta_x, short int *delta_y, int rows, int cols,
    short int **magnitude)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
    int r, c, pos, sq1, sq2;

    /****************************************************************************
    * Allocate an image to store the magnitude of the gradient.
    ****************************************************************************/
    if ((*magnitude = (short *)calloc(rows*cols, sizeof(short))) == NULL){
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f007 ffa9 	bl	800aba4 <calloc>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <magnitude_x_y+0x44>
        fprintf(stderr, "Error allocating the magnitude image.\n");
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <magnitude_x_y+0x108>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2226      	movs	r2, #38	; 0x26
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4834      	ldr	r0, [pc, #208]	; (8002d40 <magnitude_x_y+0x10c>)
 8002c6e:	f008 f9e5 	bl	800b03c <fwrite>
        exit(1);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f007 ffa4 	bl	800abc0 <exit>
    }

    //struct timespec start;
    //clock_gettime(CLOCK_MONOTONIC, &start);

    for (r = 0, pos = 0; r<rows; r++){
 8002c78:	2300      	movs	r3, #0
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	e052      	b.n	8002d28 <magnitude_x_y+0xf4>
        for (c = 0; c<cols; c++, pos++){
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	e048      	b.n	8002d1a <magnitude_x_y+0xe6>
            sq1 = (int)delta_x[pos] * (int)delta_x[pos];
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c94:	4619      	mov	r1, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	61bb      	str	r3, [r7, #24]
            sq2 = (int)delta_y[pos] * (int)delta_y[pos];
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	617b      	str	r3, [r7, #20]
            (*magnitude)[pos] = (short)(0.5 + sqrt((float)sq1 + (float)sq2));
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ce4:	eeb0 0b47 	vmov.f64	d0, d7
 8002ce8:	f007 feaa 	bl	800aa40 <sqrt>
 8002cec:	eeb0 7b40 	vmov.f64	d7, d0
 8002cf0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002cf4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d06:	ee17 2a90 	vmov	r2, s15
 8002d0a:	b212      	sxth	r2, r2
 8002d0c:	801a      	strh	r2, [r3, #0]
        for (c = 0; c<cols; c++, pos++){
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	3301      	adds	r3, #1
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	dbb2      	blt.n	8002c88 <magnitude_x_y+0x54>
    for (r = 0, pos = 0; r<rows; r++){
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	3301      	adds	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	dba8      	blt.n	8002c82 <magnitude_x_y+0x4e>
        }
    }

    //printf("Loop in function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3728      	adds	r7, #40	; 0x28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	240004fc 	.word	0x240004fc
 8002d40:	0800cac4 	.word	0x0800cac4

08002d44 <derrivative_x_y>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void derrivative_x_y(short int *smoothedim, int rows, int cols,
    short int **delta_x, short int **delta_y)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
    int r, c, pos;

    /****************************************************************************
    * Allocate images to store the derivatives.
    ****************************************************************************/
    if (((*delta_x) = (short *)calloc(rows*cols, sizeof(short))) == NULL){
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f007 ff21 	bl	800aba4 <calloc>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <derrivative_x_y+0x44>
        fprintf(stderr, "Error allocating the delta_x image.\n");
 8002d72:	4b8a      	ldr	r3, [pc, #552]	; (8002f9c <derrivative_x_y+0x258>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2224      	movs	r2, #36	; 0x24
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4888      	ldr	r0, [pc, #544]	; (8002fa0 <derrivative_x_y+0x25c>)
 8002d7e:	f008 f95d 	bl	800b03c <fwrite>
        exit(1);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f007 ff1c 	bl	800abc0 <exit>
    }
    if (((*delta_y) = (short *)calloc(rows*cols, sizeof(short))) == NULL){
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	2102      	movs	r1, #2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f007 ff06 	bl	800aba4 <calloc>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <derrivative_x_y+0x7a>
        fprintf(stderr, "Error allocating the delta_x image.\n");
 8002da8:	4b7c      	ldr	r3, [pc, #496]	; (8002f9c <derrivative_x_y+0x258>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	2101      	movs	r1, #1
 8002db2:	487b      	ldr	r0, [pc, #492]	; (8002fa0 <derrivative_x_y+0x25c>)
 8002db4:	f008 f942 	bl	800b03c <fwrite>
        exit(1);
 8002db8:	2001      	movs	r0, #1
 8002dba:	f007 ff01 	bl	800abc0 <exit>
    if (CANNY_LIB_VERBOSE) printf("   Computing the X-direction derivative.\n");

    //struct timespec start;
    //clock_gettime(CLOCK_MONOTONIC, &start);

    for (r = 0; r<rows; r++){
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e065      	b.n	8002e90 <derrivative_x_y+0x14c>
        pos = r * cols;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
        (*delta_x)[pos] = smoothedim[pos + 1] - smoothedim[pos];
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	440b      	add	r3, r1
 8002de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	b299      	uxth	r1, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	b20a      	sxth	r2, r1
 8002dfc:	801a      	strh	r2, [r3, #0]
        pos++;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
        for (c = 1; c<(cols - 1); c++, pos++){
 8002e04:	2301      	movs	r3, #1
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	e020      	b.n	8002e4c <derrivative_x_y+0x108>
            (*delta_x)[pos] = smoothedim[pos + 1] - smoothedim[pos - 1];
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	6979      	ldr	r1, [r7, #20]
 8002e1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002e20:	440b      	add	r3, r1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	440b      	add	r3, r1
 8002e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	b299      	uxth	r1, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b20a      	sxth	r2, r1
 8002e3e:	801a      	strh	r2, [r3, #0]
        for (c = 1; c<(cols - 1); c++, pos++){
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dbd9      	blt.n	8002e0a <derrivative_x_y+0xc6>
        }
        (*delta_x)[pos] = smoothedim[pos] - smoothedim[pos - 1];
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	6979      	ldr	r1, [r7, #20]
 8002e66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002e6a:	440b      	add	r3, r1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	68f9      	ldr	r1, [r7, #12]
 8002e70:	440b      	add	r3, r1
 8002e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	b299      	uxth	r1, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	b20a      	sxth	r2, r1
 8002e88:	801a      	strh	r2, [r3, #0]
    for (r = 0; r<rows; r++){
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	db95      	blt.n	8002dc4 <derrivative_x_y+0x80>
    /****************************************************************************
    * Compute the y-derivative. Adjust the derivative at the borders to avoid
    * losing pixels.
    ****************************************************************************/
    if (CANNY_LIB_VERBOSE) printf("   Computing the Y-direction derivative.\n");
    for (c = 0; c < cols; c++) {
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e03e      	b.n	8002f1c <derrivative_x_y+0x1d8>
        pos = c;
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	617b      	str	r3, [r7, #20]
        (*delta_y)[pos] = smoothedim[pos + cols] - smoothedim[pos];
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	440b      	add	r3, r1
 8002ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	b299      	uxth	r1, r3
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	b20a      	sxth	r2, r1
 8002ed2:	801a      	strh	r2, [r3, #0]
        pos = rows * (rows - 1) + c;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
        (*delta_y)[pos] = smoothedim[pos] - smoothedim[pos - cols];
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	6979      	ldr	r1, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	1acb      	subs	r3, r1, r3
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	440b      	add	r3, r1
 8002efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	b299      	uxth	r1, r3
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	b20a      	sxth	r2, r1
 8002f14:	801a      	strh	r2, [r3, #0]
    for (c = 0; c < cols; c++) {
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbbc      	blt.n	8002e9e <derrivative_x_y+0x15a>
    }
    for (r = 1; r < (rows - 1); r++) {
 8002f24:	2301      	movs	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	e02e      	b.n	8002f88 <derrivative_x_y+0x244>
        for (c = 0; c < cols; c++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e024      	b.n	8002f7a <derrivative_x_y+0x236>
            pos = r * cols + c;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
            (*delta_y)[pos] = smoothedim[pos + cols] - smoothedim[pos - cols];
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6979      	ldr	r1, [r7, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1acb      	subs	r3, r1, r3
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b299      	uxth	r1, r3
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	b20a      	sxth	r2, r1
 8002f72:	801a      	strh	r2, [r3, #0]
        for (c = 0; c < cols; c++) {
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	3301      	adds	r3, #1
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	dbd6      	blt.n	8002f30 <derrivative_x_y+0x1ec>
    for (r = 1; r < (rows - 1); r++) {
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	dbcb      	blt.n	8002f2a <derrivative_x_y+0x1e6>
        }
    }

    //printf("Loop in function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	240004fc 	.word	0x240004fc
 8002fa0:	0800caec 	.word	0x0800caec
 8002fa4:	00000000 	.word	0x00000000

08002fa8 <gaussian_smooth>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void gaussian_smooth(unsigned char *image, int rows, int cols, float sigma,
    short int **smoothedim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b092      	sub	sp, #72	; 0x48
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6178      	str	r0, [r7, #20]
 8002fb0:	6139      	str	r1, [r7, #16]
 8002fb2:	60fa      	str	r2, [r7, #12]
 8002fb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fb8:	607b      	str	r3, [r7, #4]
    int r, c, rr, cc,     /* Counter variables. */
        windowsize,        /* Dimension of the gaussian kernel. */
        center;            /* Half of the windowsize. */
    float *tempim,        /* Buffer for separable filter gaussian smoothing. */
        *kernel = NULL;        /* A one dimensional gaussian kernel. */
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34

    /****************************************************************************
    * Create a 1-dimensional gaussian smoothing kernel.
    ****************************************************************************/

    float *ktmp = kernel;
 8002fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc0:	61fb      	str	r3, [r7, #28]

    make_gaussian_kernel(sigma, &ktmp, &windowsize);
 8002fc2:	f107 0220 	add.w	r2, r7, #32
 8002fc6:	f107 031c 	add.w	r3, r7, #28
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fd2:	f000 f9a9 	bl	8003328 <make_gaussian_kernel>
    kernel = ktmp;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
    center = windowsize / 2;
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da00      	bge.n	8002fe2 <gaussian_smooth+0x3a>
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	105b      	asrs	r3, r3, #1
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30

    /****************************************************************************
    * Allocate a temporary buffer image and the smoothed image.
    ****************************************************************************/
    if ((tempim = (float *)calloc(rows*cols, sizeof(float))) == NULL){
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	2104      	movs	r1, #4
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f007 fdd7 	bl	800aba4 <calloc>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <gaussian_smooth+0x6e>
        fprintf(stderr, "Error allocating the buffer image.\n");
 8003000:	4b9f      	ldr	r3, [pc, #636]	; (8003280 <gaussian_smooth+0x2d8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2223      	movs	r2, #35	; 0x23
 8003008:	2101      	movs	r1, #1
 800300a:	489e      	ldr	r0, [pc, #632]	; (8003284 <gaussian_smooth+0x2dc>)
 800300c:	f008 f816 	bl	800b03c <fwrite>
        exit(1);
 8003010:	2001      	movs	r0, #1
 8003012:	f007 fdd5 	bl	800abc0 <exit>
    }
    if (((*smoothedim) = (short int *)calloc(rows*cols,
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	2102      	movs	r1, #2
 8003020:	4618      	mov	r0, r3
 8003022:	f007 fdbf 	bl	800aba4 <calloc>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <gaussian_smooth+0xa4>
        sizeof(short int))) == NULL){
        fprintf(stderr, "Error allocating the smoothed image.\n");
 8003036:	4b92      	ldr	r3, [pc, #584]	; (8003280 <gaussian_smooth+0x2d8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2225      	movs	r2, #37	; 0x25
 800303e:	2101      	movs	r1, #1
 8003040:	4891      	ldr	r0, [pc, #580]	; (8003288 <gaussian_smooth+0x2e0>)
 8003042:	f007 fffb 	bl	800b03c <fwrite>
        exit(1);
 8003046:	2001      	movs	r0, #1
 8003048:	f007 fdba 	bl	800abc0 <exit>

    /****************************************************************************
    * Blur in the x - direction.
    ****************************************************************************/

    float* dot_arr = calloc(cols, sizeof(float));
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2104      	movs	r1, #4
 8003050:	4618      	mov	r0, r3
 8003052:	f007 fda7 	bl	800aba4 <calloc>
 8003056:	4603      	mov	r3, r0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
    float* sum_arr = calloc(cols, sizeof(float));
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2104      	movs	r1, #4
 800305e:	4618      	mov	r0, r3
 8003060:	f007 fda0 	bl	800aba4 <calloc>
 8003064:	4603      	mov	r3, r0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24

    for (r = 0; r < rows; r++) {
 8003068:	2300      	movs	r3, #0
 800306a:	647b      	str	r3, [r7, #68]	; 0x44
 800306c:	e093      	b.n	8003196 <gaussian_smooth+0x1ee>
        memset(dot_arr, 0, cols * sizeof(float));
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	461a      	mov	r2, r3
 8003074:	2100      	movs	r1, #0
 8003076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003078:	f008 f8b2 	bl	800b1e0 <memset>
        memset(sum_arr, 0, cols * sizeof(float));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	2100      	movs	r1, #0
 8003084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003086:	f008 f8ab 	bl	800b1e0 <memset>
        for (cc = (-center); cc <= center; cc++) {
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	425b      	negs	r3, r3
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003090:	e057      	b.n	8003142 <gaussian_smooth+0x19a>
            for (c = MAX(0, -cc); c < MIN(cols, cols - cc); c++) {
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	2b00      	cmp	r3, #0
 8003096:	dc02      	bgt.n	800309e <gaussian_smooth+0xf6>
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	425b      	negs	r3, r3
 800309c:	e000      	b.n	80030a0 <gaussian_smooth+0xf8>
 800309e:	2300      	movs	r3, #0
 80030a0:	643b      	str	r3, [r7, #64]	; 0x40
 80030a2:	e040      	b.n	8003126 <gaussian_smooth+0x17e>
                dot_arr[c] +=
 80030a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030aa:	4413      	add	r3, r2
 80030ac:	ed93 7a00 	vldr	s14, [r3]
                    (float)image[r * cols + (c + cc)] * kernel[center + cc];
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	fb03 f202 	mul.w	r2, r3, r2
 80030b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	440b      	add	r3, r1
 80030be:	4413      	add	r3, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030da:	4413      	add	r3, r2
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
                dot_arr[c] +=
 80030e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ea:	4413      	add	r3, r2
 80030ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f0:	edc3 7a00 	vstr	s15, [r3]
                sum_arr[c] += kernel[center + cc];
 80030f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	4413      	add	r3, r2
 80030fc:	ed93 7a00 	vldr	s14, [r3]
 8003100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800310a:	4413      	add	r3, r2
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	4413      	add	r3, r2
 8003118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311c:	edc3 7a00 	vstr	s15, [r3]
            for (c = MAX(0, -cc); c < MIN(cols, cols - cc); c++) {
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	3301      	adds	r3, #1
 8003124:	643b      	str	r3, [r7, #64]	; 0x40
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	2b00      	cmp	r3, #0
 800312a:	db03      	blt.n	8003134 <gaussian_smooth+0x18c>
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	e000      	b.n	8003136 <gaussian_smooth+0x18e>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003138:	4293      	cmp	r3, r2
 800313a:	dcb3      	bgt.n	80030a4 <gaussian_smooth+0xfc>
        for (cc = (-center); cc <= center; cc++) {
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	3301      	adds	r3, #1
 8003140:	63bb      	str	r3, [r7, #56]	; 0x38
 8003142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	429a      	cmp	r2, r3
 8003148:	dda3      	ble.n	8003092 <gaussian_smooth+0xea>
            }
        }

        for (c = 0; c < cols; c++) {
 800314a:	2300      	movs	r3, #0
 800314c:	643b      	str	r3, [r7, #64]	; 0x40
 800314e:	e01b      	b.n	8003188 <gaussian_smooth+0x1e0>
            tempim[r * cols + c] = dot_arr[c] / sum_arr[c];
 8003150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003156:	4413      	add	r3, r2
 8003158:	edd3 6a00 	vldr	s13, [r3]
 800315c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	4413      	add	r3, r2
 8003164:	ed93 7a00 	vldr	s14, [r3]
 8003168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	fb03 f202 	mul.w	r2, r3, r2
 8003170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003178:	4413      	add	r3, r2
 800317a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800317e:	edc3 7a00 	vstr	s15, [r3]
        for (c = 0; c < cols; c++) {
 8003182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003184:	3301      	adds	r3, #1
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
 8003188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	dbdf      	blt.n	8003150 <gaussian_smooth+0x1a8>
    for (r = 0; r < rows; r++) {
 8003190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003192:	3301      	adds	r3, #1
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
 8003196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	429a      	cmp	r2, r3
 800319c:	f6ff af67 	blt.w	800306e <gaussian_smooth+0xc6>

    /****************************************************************************
    * Blur in the y - direction.
    ****************************************************************************/

    for (r = 0; r < rows; r++) {
 80031a0:	2300      	movs	r3, #0
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
 80031a4:	e0a6      	b.n	80032f4 <gaussian_smooth+0x34c>
        memset(dot_arr, 0, cols * sizeof(float));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	461a      	mov	r2, r3
 80031ac:	2100      	movs	r1, #0
 80031ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b0:	f008 f816 	bl	800b1e0 <memset>
        memset(sum_arr, 0, cols * sizeof(float));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	461a      	mov	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031be:	f008 f80f 	bl	800b1e0 <memset>
        for (rr = (-center); rr <= center; rr++) {
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	425b      	negs	r3, r3
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c8:	e052      	b.n	8003270 <gaussian_smooth+0x2c8>
            if (((r + rr) >= 0) && ((r + rr) < rows)) {
 80031ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ce:	4413      	add	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	db4a      	blt.n	800326a <gaussian_smooth+0x2c2>
 80031d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d8:	4413      	add	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	dd44      	ble.n	800326a <gaussian_smooth+0x2c2>
                for (c = 0; c < cols; c++) {
 80031e0:	2300      	movs	r3, #0
 80031e2:	643b      	str	r3, [r7, #64]	; 0x40
 80031e4:	e03d      	b.n	8003262 <gaussian_smooth+0x2ba>
                    dot_arr[c] +=
 80031e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ec:	4413      	add	r3, r2
 80031ee:	ed93 7a00 	vldr	s14, [r3]
                        tempim[(r + rr) * cols + c] * kernel[center + rr];
 80031f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	4413      	add	r3, r2
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	fb03 f202 	mul.w	r2, r3, r2
 80031fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003206:	4413      	add	r3, r2
 8003208:	edd3 6a00 	vldr	s13, [r3]
 800320c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003216:	4413      	add	r3, r2
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	ee66 7aa7 	vmul.f32	s15, s13, s15
                    dot_arr[c] +=
 8003220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003226:	4413      	add	r3, r2
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	edc3 7a00 	vstr	s15, [r3]
                    sum_arr[c] += kernel[center + rr];
 8003230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003236:	4413      	add	r3, r2
 8003238:	ed93 7a00 	vldr	s14, [r3]
 800323c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003246:	4413      	add	r3, r2
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003252:	4413      	add	r3, r2
 8003254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003258:	edc3 7a00 	vstr	s15, [r3]
                for (c = 0; c < cols; c++) {
 800325c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325e:	3301      	adds	r3, #1
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
 8003262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	429a      	cmp	r2, r3
 8003268:	dbbd      	blt.n	80031e6 <gaussian_smooth+0x23e>
        for (rr = (-center); rr <= center; rr++) {
 800326a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326c:	3301      	adds	r3, #1
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	429a      	cmp	r2, r3
 8003276:	dda8      	ble.n	80031ca <gaussian_smooth+0x222>
                }
            }
        }
        for (c = 0; c < cols; c++) {
 8003278:	2300      	movs	r3, #0
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
 800327c:	e033      	b.n	80032e6 <gaussian_smooth+0x33e>
 800327e:	bf00      	nop
 8003280:	240004fc 	.word	0x240004fc
 8003284:	0800cb14 	.word	0x0800cb14
 8003288:	0800cb38 	.word	0x0800cb38
            (*smoothedim)[r * cols + c] =
                (short int)(dot_arr[c] * BOOSTBLURFACTOR / sum_arr[c] + 0.5);
 800328c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003292:	4413      	add	r3, r2
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800329c:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8003320 <gaussian_smooth+0x378>
 80032a0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	4413      	add	r3, r2
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80032b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80032b8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80032bc:	ee37 7b06 	vadd.f64	d7, d7, d6
            (*smoothedim)[r * cols + c] =
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	fb03 f101 	mul.w	r1, r3, r1
 80032cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ce:	440b      	add	r3, r1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
                (short int)(dot_arr[c] * BOOSTBLURFACTOR / sum_arr[c] + 0.5);
 80032d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80032d8:	ee17 2a90 	vmov	r2, s15
 80032dc:	b212      	sxth	r2, r2
            (*smoothedim)[r * cols + c] =
 80032de:	801a      	strh	r2, [r3, #0]
        for (c = 0; c < cols; c++) {
 80032e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e2:	3301      	adds	r3, #1
 80032e4:	643b      	str	r3, [r7, #64]	; 0x40
 80032e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	dbce      	blt.n	800328c <gaussian_smooth+0x2e4>
    for (r = 0; r < rows; r++) {
 80032ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f0:	3301      	adds	r3, #1
 80032f2:	647b      	str	r3, [r7, #68]	; 0x44
 80032f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f6ff af54 	blt.w	80031a6 <gaussian_smooth+0x1fe>
        }
    }
    free(dot_arr);
 80032fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003300:	f007 ff3e 	bl	800b180 <free>
    free(sum_arr);
 8003304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003306:	f007 ff3b 	bl	800b180 <free>

    //printf("Loops in function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

    free(tempim);
 800330a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800330c:	f007 ff38 	bl	800b180 <free>
    free(kernel);
 8003310:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003312:	f007 ff35 	bl	800b180 <free>
}
 8003316:	bf00      	nop
 8003318:	3748      	adds	r7, #72	; 0x48
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	00000000 	.word	0x00000000
 8003324:	40568000 	.word	0x40568000

08003328 <make_gaussian_kernel>:
* PURPOSE: Create a one dimensional gaussian kernel.
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void make_gaussian_kernel(float sigma, float **kernel, int *windowsize)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003332:	60b8      	str	r0, [r7, #8]
 8003334:	6079      	str	r1, [r7, #4]
    int i, center;
    float x, fx, sum = 0.0;
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	623b      	str	r3, [r7, #32]

    *windowsize = 1 + 2 * ceil(2.5 * sigma);
 800333c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003340:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003344:	eeb0 6b04 	vmov.f64	d6, #4	; 0x40200000  2.5
 8003348:	ee27 7b06 	vmul.f64	d7, d7, d6
 800334c:	eeb0 0b47 	vmov.f64	d0, d7
 8003350:	f007 fafe 	bl	800a950 <ceil>
 8003354:	eeb0 7b40 	vmov.f64	d7, d0
 8003358:	ee37 7b07 	vadd.f64	d7, d7, d7
 800335c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003360:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003364:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003368:	ee17 2a90 	vmov	r2, s15
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
    center = (*windowsize) / 2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	da00      	bge.n	800337a <make_gaussian_kernel+0x52>
 8003378:	3301      	adds	r3, #1
 800337a:	105b      	asrs	r3, r3, #1
 800337c:	61fb      	str	r3, [r7, #28]


    if ((*kernel = (float *)calloc((*windowsize), sizeof(float))) == NULL){
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2104      	movs	r1, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f007 fc0d 	bl	800aba4 <calloc>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <make_gaussian_kernel+0x88>
        fprintf(stderr, "Error callocing the gaussian kernel array.\n");
 800339a:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <make_gaussian_kernel+0x180>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	222b      	movs	r2, #43	; 0x2b
 80033a2:	2101      	movs	r1, #1
 80033a4:	4841      	ldr	r0, [pc, #260]	; (80034ac <make_gaussian_kernel+0x184>)
 80033a6:	f007 fe49 	bl	800b03c <fwrite>
        exit(1);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f007 fc08 	bl	800abc0 <exit>
    }

    for (i = 0; i<(*windowsize); i++){
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	e046      	b.n	8003444 <make_gaussian_kernel+0x11c>
        x = (float)(i - center);
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c4:	edc7 7a06 	vstr	s15, [r7, #24]
        fx = pow(2.71828, -0.5*x*x / (sigma*sigma)) / (sigma * sqrt(6.2831853));
 80033c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80033cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033d0:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 80033d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80033d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80033dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80033e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80033e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033f0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80033f4:	eeb0 1b45 	vmov.f64	d1, d5
 80033f8:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8003498 <make_gaussian_kernel+0x170>
 80033fc:	f007 f854 	bl	800a4a8 <pow>
 8003400:	eeb0 5b40 	vmov.f64	d5, d0
 8003404:	edd7 7a03 	vldr	s15, [r7, #12]
 8003408:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800340c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80034a0 <make_gaussian_kernel+0x178>
 8003410:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003414:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003418:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800341c:	edc7 7a05 	vstr	s15, [r7, #20]
        (*kernel)[i] = fx;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	601a      	str	r2, [r3, #0]
        sum += fx;
 800342e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003432:	edd7 7a05 	vldr	s15, [r7, #20]
 8003436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (i = 0; i<(*windowsize); i++){
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	3301      	adds	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	429a      	cmp	r2, r3
 800344c:	dbb3      	blt.n	80033b6 <make_gaussian_kernel+0x8e>
    }

    for (i = 0; i<(*windowsize); i++) (*kernel)[i] /= sum;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	e014      	b.n	800347e <make_gaussian_kernel+0x156>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	edd3 6a00 	vldr	s13, [r3]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003474:	edc3 7a00 	vstr	s15, [r3]
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	3301      	adds	r3, #1
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003484:	429a      	cmp	r2, r3
 8003486:	dbe5      	blt.n	8003454 <make_gaussian_kernel+0x12c>

}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3728      	adds	r7, #40	; 0x28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	f3af 8000 	nop.w
 8003498:	95aaf790 	.word	0x95aaf790
 800349c:	4005bf09 	.word	0x4005bf09
 80034a0:	1fc4f1f6 	.word	0x1fc4f1f6
 80034a4:	40040d93 	.word	0x40040d93
 80034a8:	240004fc 	.word	0x240004fc
 80034ac:	0800cb60 	.word	0x0800cb60

080034b0 <startTimer>:

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int flag = 0;
int counter = 0;
void startTimer(int flag){
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	if (flag) counter++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d004      	beq.n	80034c8 <startTimer+0x18>
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <startTimer+0x24>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3301      	adds	r3, #1
 80034c4:	4a03      	ldr	r2, [pc, #12]	; (80034d4 <startTimer+0x24>)
 80034c6:	6013      	str	r3, [r2, #0]
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	24000644 	.word	0x24000644

080034d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b0a4      	sub	sp, #144	; 0x90
 80034dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034de:	f000 feb9 	bl	8004254 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034e2:	f000 f88d 	bl	8003600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034e6:	f000 fa23 	bl	8003930 <MX_GPIO_Init>
  MX_ETH_Init();
 80034ea:	f000 f909 	bl	8003700 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80034ee:	f000 f9a1 	bl	8003834 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80034f2:	f000 f9eb 	bl	80038cc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80034f6:	f000 f94f 	bl	8003798 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80034fa:	4836      	ldr	r0, [pc, #216]	; (80035d4 <main+0xfc>)
 80034fc:	f004 fe94 	bl	8008228 <HAL_TIM_Base_Start_IT>


      char *dirfilename = NULL; /* Name of the output gradient direction image */
 8003500:	2300      	movs	r3, #0
 8003502:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      uint8_t *edge;      /* The output edge image */
      //int rows = 0, cols =0, channels = 0;           /* The dimensions of the image. */
      float   sigma =0.7,              /* Standard deviation of the gaussian kernel. */
 8003506:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <main+0x100>)
 8003508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              tlow = 0.6,                 /* Fraction of the high threshold in hysteresis. */
 800350c:	4b33      	ldr	r3, [pc, #204]	; (80035dc <main+0x104>)
 800350e:	67fb      	str	r3, [r7, #124]	; 0x7c
              thigh =0.9;
 8003510:	4b33      	ldr	r3, [pc, #204]	; (80035e0 <main+0x108>)
 8003512:	67bb      	str	r3, [r7, #120]	; 0x78


      //---Read by file.h and set flag for timer counter
      flag = 1;
 8003514:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <main+0x10c>)
 8003516:	2201      	movs	r2, #1
 8003518:	601a      	str	r2, [r3, #0]
      canny((uint8_t*)road2, ROAD_HEIGHT, ROAD_WIDTH, sigma, tlow, thigh, &edge, dirfilename);
 800351a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800351e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	ed97 1a1e 	vldr	s2, [r7, #120]	; 0x78
 800352a:	edd7 0a1f 	vldr	s1, [r7, #124]	; 0x7c
 800352e:	ed97 0a20 	vldr	s0, [r7, #128]	; 0x80
 8003532:	22b4      	movs	r2, #180	; 0xb4
 8003534:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003538:	482b      	ldr	r0, [pc, #172]	; (80035e8 <main+0x110>)
 800353a:	f7ff fae9 	bl	8002b10 <canny>
      flag = 0;
 800353e:	4b29      	ldr	r3, [pc, #164]	; (80035e4 <main+0x10c>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
    	  }
      }
	*/

      //--Print image as binary to PNG
      int len = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	66fb      	str	r3, [r7, #108]	; 0x6c
      uint8_t* result = stbi_write_png_to_mem(edge,ROAD_WIDTH,ROAD_WIDTH,ROAD_HEIGHT,1,&len);
 8003548:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800354a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	2301      	movs	r3, #1
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8003558:	22b4      	movs	r2, #180	; 0xb4
 800355a:	21b4      	movs	r1, #180	; 0xb4
 800355c:	f7fe f97c 	bl	8001858 <stbi_write_png_to_mem>
 8003560:	6778      	str	r0, [r7, #116]	; 0x74
      HAL_UART_Transmit(&huart3, result, len, 100000);
 8003562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003564:	b29a      	uxth	r2, r3
 8003566:	4b21      	ldr	r3, [pc, #132]	; (80035ec <main+0x114>)
 8003568:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800356a:	4821      	ldr	r0, [pc, #132]	; (80035f0 <main+0x118>)
 800356c:	f005 fb48 	bl	8008c00 <HAL_UART_Transmit>
      uint8_t str = '\r';
 8003570:	230d      	movs	r3, #13
 8003572:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
      HAL_UART_Transmit(&huart3, &str, 1, 100000);
 8003576:	f107 016b 	add.w	r1, r7, #107	; 0x6b
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <main+0x114>)
 800357c:	2201      	movs	r2, #1
 800357e:	481c      	ldr	r0, [pc, #112]	; (80035f0 <main+0x118>)
 8003580:	f005 fb3e 	bl	8008c00 <HAL_UART_Transmit>


      //-- Print info as comment---//
      char str2[100] = "";
 8003584:	2300      	movs	r3, #0
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	f107 0308 	add.w	r3, r7, #8
 800358c:	2260      	movs	r2, #96	; 0x60
 800358e:	2100      	movs	r1, #0
 8003590:	4618      	mov	r0, r3
 8003592:	f007 fe25 	bl	800b1e0 <memset>
      HAL_UART_Transmit(&huart3, (uint8_t*)str2, sprintf(str2,"\n----H: %d, L: %d\n, Time: %d\n\r\n",ROAD_HEIGHT,ROAD_WIDTH,counter), 100000);
 8003596:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <main+0x11c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1d38      	adds	r0, r7, #4
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	23b4      	movs	r3, #180	; 0xb4
 80035a0:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80035a4:	4914      	ldr	r1, [pc, #80]	; (80035f8 <main+0x120>)
 80035a6:	f008 fa1f 	bl	800b9e8 <siprintf>
 80035aa:	4603      	mov	r3, r0
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	1d39      	adds	r1, r7, #4
 80035b0:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <main+0x114>)
 80035b2:	480f      	ldr	r0, [pc, #60]	; (80035f0 <main+0x118>)
 80035b4:	f005 fb24 	bl	8008c00 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 80035b8:	2201      	movs	r2, #1
 80035ba:	2101      	movs	r1, #1
 80035bc:	480f      	ldr	r0, [pc, #60]	; (80035fc <main+0x124>)
 80035be:	f001 fe03 	bl	80051c8 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80035c2:	2101      	movs	r1, #1
 80035c4:	480d      	ldr	r0, [pc, #52]	; (80035fc <main+0x124>)
 80035c6:	f001 fe18 	bl	80051fa <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80035ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035ce:	f000 fed3 	bl	8004378 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80035d2:	e7f6      	b.n	80035c2 <main+0xea>
 80035d4:	24000730 	.word	0x24000730
 80035d8:	3f333333 	.word	0x3f333333
 80035dc:	3f19999a 	.word	0x3f19999a
 80035e0:	3f666666 	.word	0x3f666666
 80035e4:	24000640 	.word	0x24000640
 80035e8:	0800cbac 	.word	0x0800cbac
 80035ec:	000186a0 	.word	0x000186a0
 80035f0:	2400077c 	.word	0x2400077c
 80035f4:	24000644 	.word	0x24000644
 80035f8:	0800cb8c 	.word	0x0800cb8c
 80035fc:	58020400 	.word	0x58020400

08003600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b09c      	sub	sp, #112	; 0x70
 8003604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800360a:	224c      	movs	r2, #76	; 0x4c
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f007 fde6 	bl	800b1e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	2220      	movs	r2, #32
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f007 fde0 	bl	800b1e0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003620:	2002      	movs	r0, #2
 8003622:	f001 ff4d 	bl	80054c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003626:	2300      	movs	r3, #0
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4b33      	ldr	r3, [pc, #204]	; (80036f8 <SystemClock_Config+0xf8>)
 800362c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362e:	4a32      	ldr	r2, [pc, #200]	; (80036f8 <SystemClock_Config+0xf8>)
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003636:	4b30      	ldr	r3, [pc, #192]	; (80036f8 <SystemClock_Config+0xf8>)
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <SystemClock_Config+0xfc>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003648:	4a2c      	ldr	r2, [pc, #176]	; (80036fc <SystemClock_Config+0xfc>)
 800364a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364e:	6193      	str	r3, [r2, #24]
 8003650:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <SystemClock_Config+0xfc>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800365c:	bf00      	nop
 800365e:	4b27      	ldr	r3, [pc, #156]	; (80036fc <SystemClock_Config+0xfc>)
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366a:	d1f8      	bne.n	800365e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800366c:	2303      	movs	r3, #3
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003676:	2301      	movs	r3, #1
 8003678:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800367a:	2340      	movs	r3, #64	; 0x40
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800367e:	2302      	movs	r3, #2
 8003680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003682:	2302      	movs	r3, #2
 8003684:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003686:	2301      	movs	r3, #1
 8003688:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800368a:	2318      	movs	r3, #24
 800368c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800368e:	2302      	movs	r3, #2
 8003690:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003692:	2304      	movs	r3, #4
 8003694:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003696:	2302      	movs	r3, #2
 8003698:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800369a:	230c      	movs	r3, #12
 800369c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800369e:	2300      	movs	r3, #0
 80036a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 ff52 	bl	8005554 <HAL_RCC_OscConfig>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80036b6:	f000 fa27 	bl	8003b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036ba:	233f      	movs	r3, #63	; 0x3f
 80036bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80036be:	2300      	movs	r3, #0
 80036c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80036d6:	2300      	movs	r3, #0
 80036d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80036da:	1d3b      	adds	r3, r7, #4
 80036dc:	2101      	movs	r1, #1
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 fb92 	bl	8005e08 <HAL_RCC_ClockConfig>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <SystemClock_Config+0xee>
  {
    Error_Handler();
 80036ea:	f000 fa0d 	bl	8003b08 <Error_Handler>
  }
}
 80036ee:	bf00      	nop
 80036f0:	3770      	adds	r7, #112	; 0x70
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	58000400 	.word	0x58000400
 80036fc:	58024800 	.word	0x58024800

08003700 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8003704:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <MX_ETH_Init+0x80>)
 8003706:	4a1f      	ldr	r2, [pc, #124]	; (8003784 <MX_ETH_Init+0x84>)
 8003708:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800370a:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <MX_ETH_Init+0x88>)
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <MX_ETH_Init+0x88>)
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8003716:	4b1c      	ldr	r3, [pc, #112]	; (8003788 <MX_ETH_Init+0x88>)
 8003718:	22e1      	movs	r2, #225	; 0xe1
 800371a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <MX_ETH_Init+0x88>)
 800371e:	2200      	movs	r2, #0
 8003720:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8003722:	4b19      	ldr	r3, [pc, #100]	; (8003788 <MX_ETH_Init+0x88>)
 8003724:	2200      	movs	r2, #0
 8003726:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8003728:	4b17      	ldr	r3, [pc, #92]	; (8003788 <MX_ETH_Init+0x88>)
 800372a:	2200      	movs	r2, #0
 800372c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <MX_ETH_Init+0x80>)
 8003730:	4a15      	ldr	r2, [pc, #84]	; (8003788 <MX_ETH_Init+0x88>)
 8003732:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003734:	4b12      	ldr	r3, [pc, #72]	; (8003780 <MX_ETH_Init+0x80>)
 8003736:	2201      	movs	r2, #1
 8003738:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <MX_ETH_Init+0x80>)
 800373c:	4a13      	ldr	r2, [pc, #76]	; (800378c <MX_ETH_Init+0x8c>)
 800373e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <MX_ETH_Init+0x80>)
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <MX_ETH_Init+0x90>)
 8003744:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <MX_ETH_Init+0x80>)
 8003748:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800374c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800374e:	480c      	ldr	r0, [pc, #48]	; (8003780 <MX_ETH_Init+0x80>)
 8003750:	f000 ff66 	bl	8004620 <HAL_ETH_Init>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800375a:	f000 f9d5 	bl	8003b08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800375e:	2238      	movs	r2, #56	; 0x38
 8003760:	2100      	movs	r1, #0
 8003762:	480c      	ldr	r0, [pc, #48]	; (8003794 <MX_ETH_Init+0x94>)
 8003764:	f007 fd3c 	bl	800b1e0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <MX_ETH_Init+0x94>)
 800376a:	2221      	movs	r2, #33	; 0x21
 800376c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <MX_ETH_Init+0x94>)
 8003770:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003774:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <MX_ETH_Init+0x94>)
 8003778:	2200      	movs	r2, #0
 800377a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}
 8003780:	24000680 	.word	0x24000680
 8003784:	40028000 	.word	0x40028000
 8003788:	24000d1c 	.word	0x24000d1c
 800378c:	240005c0 	.word	0x240005c0
 8003790:	24000560 	.word	0x24000560
 8003794:	24000648 	.word	0x24000648

08003798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800379e:	f107 0310 	add.w	r3, r7, #16
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <MX_TIM2_Init+0x98>)
 80037b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <MX_TIM2_Init+0x98>)
 80037c0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80037c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c6:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <MX_TIM2_Init+0x98>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7;
 80037cc:	4b18      	ldr	r3, [pc, #96]	; (8003830 <MX_TIM2_Init+0x98>)
 80037ce:	2207      	movs	r2, #7
 80037d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d2:	4b17      	ldr	r3, [pc, #92]	; (8003830 <MX_TIM2_Init+0x98>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <MX_TIM2_Init+0x98>)
 80037da:	2200      	movs	r2, #0
 80037dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037de:	4814      	ldr	r0, [pc, #80]	; (8003830 <MX_TIM2_Init+0x98>)
 80037e0:	f004 fcca 	bl	8008178 <HAL_TIM_Base_Init>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80037ea:	f000 f98d 	bl	8003b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	4619      	mov	r1, r3
 80037fa:	480d      	ldr	r0, [pc, #52]	; (8003830 <MX_TIM2_Init+0x98>)
 80037fc:	f004 feac 	bl	8008558 <HAL_TIM_ConfigClockSource>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003806:	f000 f97f 	bl	8003b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	4619      	mov	r1, r3
 8003816:	4806      	ldr	r0, [pc, #24]	; (8003830 <MX_TIM2_Init+0x98>)
 8003818:	f005 f8f6 	bl	8008a08 <HAL_TIMEx_MasterConfigSynchronization>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003822:	f000 f971 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003826:	bf00      	nop
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	24000730 	.word	0x24000730

08003834 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003838:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 800383a:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <MX_USART3_UART_Init+0x94>)
 800383c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 8003840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003844:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003846:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003852:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003858:	4b1a      	ldr	r3, [pc, #104]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 800385a:	220c      	movs	r2, #12
 800385c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800385e:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 8003860:	2200      	movs	r2, #0
 8003862:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003864:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 8003866:	2200      	movs	r2, #0
 8003868:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800386a:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 800386c:	2200      	movs	r2, #0
 800386e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 8003872:	2200      	movs	r2, #0
 8003874:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003876:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 8003878:	2200      	movs	r2, #0
 800387a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800387c:	4811      	ldr	r0, [pc, #68]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 800387e:	f005 f96f 	bl	8008b60 <HAL_UART_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003888:	f000 f93e 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800388c:	2100      	movs	r1, #0
 800388e:	480d      	ldr	r0, [pc, #52]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 8003890:	f006 f9ff 	bl	8009c92 <HAL_UARTEx_SetTxFifoThreshold>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800389a:	f000 f935 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800389e:	2100      	movs	r1, #0
 80038a0:	4808      	ldr	r0, [pc, #32]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 80038a2:	f006 fa34 	bl	8009d0e <HAL_UARTEx_SetRxFifoThreshold>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80038ac:	f000 f92c 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80038b0:	4804      	ldr	r0, [pc, #16]	; (80038c4 <MX_USART3_UART_Init+0x90>)
 80038b2:	f006 f9b5 	bl	8009c20 <HAL_UARTEx_DisableFifoMode>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80038bc:	f000 f924 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	2400077c 	.word	0x2400077c
 80038c8:	40004800 	.word	0x40004800

080038cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80038d0:	4b15      	ldr	r3, [pc, #84]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80038d2:	4a16      	ldr	r2, [pc, #88]	; (800392c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80038d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80038d8:	2209      	movs	r2, #9
 80038da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80038de:	2202      	movs	r2, #2
 80038e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80038e2:	4b11      	ldr	r3, [pc, #68]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80038ea:	2202      	movs	r2, #2
 80038ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003902:	2201      	movs	r2, #1
 8003904:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003908:	2201      	movs	r2, #1
 800390a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003912:	4805      	ldr	r0, [pc, #20]	; (8003928 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003914:	f001 fc8b 	bl	800522e <HAL_PCD_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800391e:	f000 f8f3 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	24000810 	.word	0x24000810
 800392c:	40080000 	.word	0x40080000

08003930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	; 0x30
 8003934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003936:	f107 031c 	add.w	r3, r7, #28
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	60da      	str	r2, [r3, #12]
 8003944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003946:	4b62      	ldr	r3, [pc, #392]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 8003948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800394c:	4a60      	ldr	r2, [pc, #384]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 800394e:	f043 0304 	orr.w	r3, r3, #4
 8003952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003956:	4b5e      	ldr	r3, [pc, #376]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 8003958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
 8003962:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003964:	4b5a      	ldr	r3, [pc, #360]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 8003966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800396a:	4a59      	ldr	r2, [pc, #356]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 800396c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003974:	4b56      	ldr	r3, [pc, #344]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 8003976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	4b53      	ldr	r3, [pc, #332]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 8003984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003988:	4a51      	ldr	r2, [pc, #324]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 8003994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a0:	4b4b      	ldr	r3, [pc, #300]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a6:	4a4a      	ldr	r2, [pc, #296]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039b0:	4b47      	ldr	r3, [pc, #284]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	60fb      	str	r3, [r7, #12]
 80039bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039be:	4b44      	ldr	r3, [pc, #272]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c4:	4a42      	ldr	r2, [pc, #264]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039c6:	f043 0308 	orr.w	r3, r3, #8
 80039ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ce:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039dc:	4b3c      	ldr	r3, [pc, #240]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e2:	4a3b      	ldr	r2, [pc, #236]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039ec:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	607b      	str	r3, [r7, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039fa:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 80039fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a00:	4a33      	ldr	r2, [pc, #204]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 8003a02:	f043 0310 	orr.w	r3, r3, #16
 8003a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a0a:	4b31      	ldr	r3, [pc, #196]	; (8003ad0 <MX_GPIO_Init+0x1a0>)
 8003a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f244 0101 	movw	r1, #16385	; 0x4001
 8003a1e:	482d      	ldr	r0, [pc, #180]	; (8003ad4 <MX_GPIO_Init+0x1a4>)
 8003a20:	f001 fbd2 	bl	80051c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8003a24:	2200      	movs	r2, #0
 8003a26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a2a:	482b      	ldr	r0, [pc, #172]	; (8003ad8 <MX_GPIO_Init+0x1a8>)
 8003a2c:	f001 fbcc 	bl	80051c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003a30:	2200      	movs	r2, #0
 8003a32:	2102      	movs	r1, #2
 8003a34:	4829      	ldr	r0, [pc, #164]	; (8003adc <MX_GPIO_Init+0x1ac>)
 8003a36:	f001 fbc7 	bl	80051c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a48:	f107 031c 	add.w	r3, r7, #28
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4824      	ldr	r0, [pc, #144]	; (8003ae0 <MX_GPIO_Init+0x1b0>)
 8003a50:	f001 fa0a 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8003a54:	f244 0301 	movw	r3, #16385	; 0x4001
 8003a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a62:	2300      	movs	r3, #0
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a66:	f107 031c 	add.w	r3, r7, #28
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4819      	ldr	r0, [pc, #100]	; (8003ad4 <MX_GPIO_Init+0x1a4>)
 8003a6e:	f001 f9fb 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8003a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a80:	2300      	movs	r3, #0
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4813      	ldr	r0, [pc, #76]	; (8003ad8 <MX_GPIO_Init+0x1a8>)
 8003a8c:	f001 f9ec 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003a9e:	f107 031c 	add.w	r3, r7, #28
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	480f      	ldr	r0, [pc, #60]	; (8003ae4 <MX_GPIO_Init+0x1b4>)
 8003aa6:	f001 f9df 	bl	8004e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003aba:	f107 031c 	add.w	r3, r7, #28
 8003abe:	4619      	mov	r1, r3
 8003ac0:	4806      	ldr	r0, [pc, #24]	; (8003adc <MX_GPIO_Init+0x1ac>)
 8003ac2:	f001 f9d1 	bl	8004e68 <HAL_GPIO_Init>

}
 8003ac6:	bf00      	nop
 8003ac8:	3730      	adds	r7, #48	; 0x30
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	58020400 	.word	0x58020400
 8003ad8:	58020c00 	.word	0x58020c00
 8003adc:	58021000 	.word	0x58021000
 8003ae0:	58020800 	.word	0x58020800
 8003ae4:	58021800 	.word	0x58021800

08003ae8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	startTimer(flag);
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fcdb 	bl	80034b0 <startTimer>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	24000640 	.word	0x24000640

08003b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b0c:	b672      	cpsid	i
}
 8003b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b10:	e7fe      	b.n	8003b10 <Error_Handler+0x8>
	...

08003b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_MspInit+0x30>)
 8003b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b20:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <HAL_MspInit+0x30>)
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_MspInit+0x30>)
 8003b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	58024400 	.word	0x58024400

08003b48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08e      	sub	sp, #56	; 0x38
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
 8003b5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a59      	ldr	r2, [pc, #356]	; (8003ccc <HAL_ETH_MspInit+0x184>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	f040 80ab 	bne.w	8003cc2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003b6c:	4b58      	ldr	r3, [pc, #352]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003b6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b72:	4a57      	ldr	r2, [pc, #348]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003b7c:	4b54      	ldr	r3, [pc, #336]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003b7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003b8a:	4b51      	ldr	r3, [pc, #324]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003b8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b90:	4a4f      	ldr	r2, [pc, #316]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b96:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003b9a:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003ba8:	4b49      	ldr	r3, [pc, #292]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003baa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bae:	4a48      	ldr	r2, [pc, #288]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003bb8:	4b45      	ldr	r3, [pc, #276]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003bba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc6:	4b42      	ldr	r3, [pc, #264]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bcc:	4a40      	ldr	r2, [pc, #256]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bd6:	4b3e      	ldr	r3, [pc, #248]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	617b      	str	r3, [r7, #20]
 8003be2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be4:	4b3a      	ldr	r3, [pc, #232]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bea:	4a39      	ldr	r2, [pc, #228]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c02:	4b33      	ldr	r3, [pc, #204]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c08:	4a31      	ldr	r2, [pc, #196]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003c0a:	f043 0302 	orr.w	r3, r3, #2
 8003c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c12:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c26:	4a2a      	ldr	r2, [pc, #168]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <HAL_ETH_MspInit+0x188>)
 8003c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003c3e:	2332      	movs	r3, #50	; 0x32
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c4e:	230b      	movs	r3, #11
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c56:	4619      	mov	r1, r3
 8003c58:	481e      	ldr	r0, [pc, #120]	; (8003cd4 <HAL_ETH_MspInit+0x18c>)
 8003c5a:	f001 f905 	bl	8004e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003c5e:	2386      	movs	r3, #134	; 0x86
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c62:	2302      	movs	r3, #2
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c6e:	230b      	movs	r3, #11
 8003c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c76:	4619      	mov	r1, r3
 8003c78:	4817      	ldr	r0, [pc, #92]	; (8003cd8 <HAL_ETH_MspInit+0x190>)
 8003c7a:	f001 f8f5 	bl	8004e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c84:	2302      	movs	r3, #2
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003c90:	230b      	movs	r3, #11
 8003c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4810      	ldr	r0, [pc, #64]	; (8003cdc <HAL_ETH_MspInit+0x194>)
 8003c9c:	f001 f8e4 	bl	8004e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003ca0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003cb2:	230b      	movs	r3, #11
 8003cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4808      	ldr	r0, [pc, #32]	; (8003ce0 <HAL_ETH_MspInit+0x198>)
 8003cbe:	f001 f8d3 	bl	8004e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003cc2:	bf00      	nop
 8003cc4:	3738      	adds	r7, #56	; 0x38
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	40028000 	.word	0x40028000
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	58020800 	.word	0x58020800
 8003cd8:	58020000 	.word	0x58020000
 8003cdc:	58020400 	.word	0x58020400
 8003ce0:	58021800 	.word	0x58021800

08003ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf4:	d116      	bne.n	8003d24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_TIM_Base_MspInit+0x48>)
 8003cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cfc:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <HAL_TIM_Base_MspInit+0x48>)
 8003cfe:	f043 0301 	orr.w	r3, r3, #1
 8003d02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_TIM_Base_MspInit+0x48>)
 8003d08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d14:	2200      	movs	r2, #0
 8003d16:	2100      	movs	r1, #0
 8003d18:	201c      	movs	r0, #28
 8003d1a:	f000 fc4c 	bl	80045b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d1e:	201c      	movs	r0, #28
 8003d20:	f000 fc63 	bl	80045ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	58024400 	.word	0x58024400

08003d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b0ba      	sub	sp, #232	; 0xe8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d48:	f107 0310 	add.w	r3, r7, #16
 8003d4c:	22c0      	movs	r2, #192	; 0xc0
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f007 fa45 	bl	800b1e0 <memset>
  if(huart->Instance==USART3)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a27      	ldr	r2, [pc, #156]	; (8003df8 <HAL_UART_MspInit+0xc8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d146      	bne.n	8003dee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003d60:	f04f 0202 	mov.w	r2, #2
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d72:	f107 0310 	add.w	r3, r7, #16
 8003d76:	4618      	mov	r0, r3
 8003d78:	f002 fbd2 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003d82:	f7ff fec1 	bl	8003b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003d86:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_UART_MspInit+0xcc>)
 8003d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d8c:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_UART_MspInit+0xcc>)
 8003d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d92:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003d96:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_UART_MspInit+0xcc>)
 8003d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_UART_MspInit+0xcc>)
 8003da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <HAL_UART_MspInit+0xcc>)
 8003dac:	f043 0308 	orr.w	r3, r3, #8
 8003db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003db4:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_UART_MspInit+0xcc>)
 8003db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003dc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ddc:	2307      	movs	r3, #7
 8003dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003de2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4805      	ldr	r0, [pc, #20]	; (8003e00 <HAL_UART_MspInit+0xd0>)
 8003dea:	f001 f83d 	bl	8004e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003dee:	bf00      	nop
 8003df0:	37e8      	adds	r7, #232	; 0xe8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40004800 	.word	0x40004800
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	58020c00 	.word	0x58020c00

08003e04 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b0ba      	sub	sp, #232	; 0xe8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e1c:	f107 0310 	add.w	r3, r7, #16
 8003e20:	22c0      	movs	r2, #192	; 0xc0
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f007 f9db 	bl	800b1e0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a30      	ldr	r2, [pc, #192]	; (8003ef0 <HAL_PCD_MspInit+0xec>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d159      	bne.n	8003ee8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003e34:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003e40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003e44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e48:	f107 0310 	add.w	r3, r7, #16
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 fb67 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8003e58:	f7ff fe56 	bl	8003b08 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003e5c:	f001 fb6a 	bl	8005534 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_PCD_MspInit+0xf0>)
 8003e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e66:	4a23      	ldr	r2, [pc, #140]	; (8003ef4 <HAL_PCD_MspInit+0xf0>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e70:	4b20      	ldr	r3, [pc, #128]	; (8003ef4 <HAL_PCD_MspInit+0xf0>)
 8003e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003e7e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e86:	2302      	movs	r3, #2
 8003e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003e98:	230a      	movs	r3, #10
 8003e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4814      	ldr	r0, [pc, #80]	; (8003ef8 <HAL_PCD_MspInit+0xf4>)
 8003ea6:	f000 ffdf 	bl	8004e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003eaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ebe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	480c      	ldr	r0, [pc, #48]	; (8003ef8 <HAL_PCD_MspInit+0xf4>)
 8003ec6:	f000 ffcf 	bl	8004e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003eca:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <HAL_PCD_MspInit+0xf0>)
 8003ecc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ed0:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <HAL_PCD_MspInit+0xf0>)
 8003ed2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ed6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_PCD_MspInit+0xf0>)
 8003edc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee4:	60bb      	str	r3, [r7, #8]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003ee8:	bf00      	nop
 8003eea:	37e8      	adds	r7, #232	; 0xe8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40080000 	.word	0x40080000
 8003ef4:	58024400 	.word	0x58024400
 8003ef8:	58020000 	.word	0x58020000

08003efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f00:	e7fe      	b.n	8003f00 <NMI_Handler+0x4>

08003f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f06:	e7fe      	b.n	8003f06 <HardFault_Handler+0x4>

08003f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f0c:	e7fe      	b.n	8003f0c <MemManage_Handler+0x4>

08003f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f12:	e7fe      	b.n	8003f12 <BusFault_Handler+0x4>

08003f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f18:	e7fe      	b.n	8003f18 <UsageFault_Handler+0x4>

08003f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f36:	b480      	push	{r7}
 8003f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f48:	f000 f9f6 	bl	8004338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f4c:	bf00      	nop
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <TIM2_IRQHandler+0x10>)
 8003f56:	f004 f9df 	bl	8008318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	24000730 	.word	0x24000730

08003f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
	return 1;
 8003f68:	2301      	movs	r3, #1
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <_kill>:

int _kill(int pid, int sig)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f7e:	f006 fe19 	bl	800abb4 <__errno>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2216      	movs	r2, #22
 8003f86:	601a      	str	r2, [r3, #0]
	return -1;
 8003f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3708      	adds	r7, #8
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <_exit>:

void _exit (int status)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7ff ffe7 	bl	8003f74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003fa6:	e7fe      	b.n	8003fa6 <_exit+0x12>

08003fa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	e00a      	b.n	8003fd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003fba:	f3af 8000 	nop.w
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	60ba      	str	r2, [r7, #8]
 8003fc6:	b2ca      	uxtb	r2, r1
 8003fc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	dbf0      	blt.n	8003fba <_read+0x12>
	}

return len;
 8003fd8:	687b      	ldr	r3, [r7, #4]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b086      	sub	sp, #24
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e009      	b.n	8004008 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	60ba      	str	r2, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	3301      	adds	r3, #1
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	429a      	cmp	r2, r3
 800400e:	dbf1      	blt.n	8003ff4 <_write+0x12>
	}
	return len;
 8004010:	687b      	ldr	r3, [r7, #4]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <_close>:

int _close(int file)
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
	return -1;
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004026:	4618      	mov	r0, r3
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004042:	605a      	str	r2, [r3, #4]
	return 0;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <_isatty>:

int _isatty(int file)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
	return 1;
 800405a:	2301      	movs	r3, #1
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
	return 0;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <_sbrk+0x5c>)
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <_sbrk+0x60>)
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004098:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <_sbrk+0x64>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040a0:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <_sbrk+0x64>)
 80040a2:	4a12      	ldr	r2, [pc, #72]	; (80040ec <_sbrk+0x68>)
 80040a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <_sbrk+0x64>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d207      	bcs.n	80040c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040b4:	f006 fd7e 	bl	800abb4 <__errno>
 80040b8:	4603      	mov	r3, r0
 80040ba:	220c      	movs	r2, #12
 80040bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040be:	f04f 33ff 	mov.w	r3, #4294967295
 80040c2:	e009      	b.n	80040d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040c4:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <_sbrk+0x64>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ca:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <_sbrk+0x64>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	4a05      	ldr	r2, [pc, #20]	; (80040e8 <_sbrk+0x64>)
 80040d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040d6:	68fb      	ldr	r3, [r7, #12]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	24080000 	.word	0x24080000
 80040e4:	00000400 	.word	0x00000400
 80040e8:	24000d24 	.word	0x24000d24
 80040ec:	24000d40 	.word	0x24000d40

080040f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80040f4:	4b37      	ldr	r3, [pc, #220]	; (80041d4 <SystemInit+0xe4>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	4a36      	ldr	r2, [pc, #216]	; (80041d4 <SystemInit+0xe4>)
 80040fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004100:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004104:	4b34      	ldr	r3, [pc, #208]	; (80041d8 <SystemInit+0xe8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	2b06      	cmp	r3, #6
 800410e:	d807      	bhi.n	8004120 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004110:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <SystemInit+0xe8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 030f 	bic.w	r3, r3, #15
 8004118:	4a2f      	ldr	r2, [pc, #188]	; (80041d8 <SystemInit+0xe8>)
 800411a:	f043 0307 	orr.w	r3, r3, #7
 800411e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004120:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <SystemInit+0xec>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2d      	ldr	r2, [pc, #180]	; (80041dc <SystemInit+0xec>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800412c:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <SystemInit+0xec>)
 800412e:	2200      	movs	r2, #0
 8004130:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004132:	4b2a      	ldr	r3, [pc, #168]	; (80041dc <SystemInit+0xec>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4929      	ldr	r1, [pc, #164]	; (80041dc <SystemInit+0xec>)
 8004138:	4b29      	ldr	r3, [pc, #164]	; (80041e0 <SystemInit+0xf0>)
 800413a:	4013      	ands	r3, r2
 800413c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <SystemInit+0xe8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800414a:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <SystemInit+0xe8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 030f 	bic.w	r3, r3, #15
 8004152:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <SystemInit+0xe8>)
 8004154:	f043 0307 	orr.w	r3, r3, #7
 8004158:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <SystemInit+0xec>)
 800415c:	2200      	movs	r2, #0
 800415e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004160:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <SystemInit+0xec>)
 8004162:	2200      	movs	r2, #0
 8004164:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004166:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <SystemInit+0xec>)
 8004168:	2200      	movs	r2, #0
 800416a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800416c:	4b1b      	ldr	r3, [pc, #108]	; (80041dc <SystemInit+0xec>)
 800416e:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <SystemInit+0xf4>)
 8004170:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004172:	4b1a      	ldr	r3, [pc, #104]	; (80041dc <SystemInit+0xec>)
 8004174:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <SystemInit+0xf8>)
 8004176:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004178:	4b18      	ldr	r3, [pc, #96]	; (80041dc <SystemInit+0xec>)
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <SystemInit+0xfc>)
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <SystemInit+0xec>)
 8004180:	2200      	movs	r2, #0
 8004182:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004184:	4b15      	ldr	r3, [pc, #84]	; (80041dc <SystemInit+0xec>)
 8004186:	4a19      	ldr	r2, [pc, #100]	; (80041ec <SystemInit+0xfc>)
 8004188:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <SystemInit+0xec>)
 800418c:	2200      	movs	r2, #0
 800418e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004190:	4b12      	ldr	r3, [pc, #72]	; (80041dc <SystemInit+0xec>)
 8004192:	4a16      	ldr	r2, [pc, #88]	; (80041ec <SystemInit+0xfc>)
 8004194:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <SystemInit+0xec>)
 8004198:	2200      	movs	r2, #0
 800419a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <SystemInit+0xec>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <SystemInit+0xec>)
 80041a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <SystemInit+0xec>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <SystemInit+0x100>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <SystemInit+0x104>)
 80041b4:	4013      	ands	r3, r2
 80041b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ba:	d202      	bcs.n	80041c2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <SystemInit+0x108>)
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <SystemInit+0x10c>)
 80041c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80041c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000ed00 	.word	0xe000ed00
 80041d8:	52002000 	.word	0x52002000
 80041dc:	58024400 	.word	0x58024400
 80041e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80041e4:	02020200 	.word	0x02020200
 80041e8:	01ff0000 	.word	0x01ff0000
 80041ec:	01010280 	.word	0x01010280
 80041f0:	5c001000 	.word	0x5c001000
 80041f4:	ffff0000 	.word	0xffff0000
 80041f8:	51008108 	.word	0x51008108
 80041fc:	52004000 	.word	0x52004000

08004200 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004200:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004238 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004204:	f7ff ff74 	bl	80040f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004208:	480c      	ldr	r0, [pc, #48]	; (800423c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800420a:	490d      	ldr	r1, [pc, #52]	; (8004240 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800420e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004210:	e002      	b.n	8004218 <LoopCopyDataInit>

08004212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004216:	3304      	adds	r3, #4

08004218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800421a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800421c:	d3f9      	bcc.n	8004212 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800421e:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004220:	4c0a      	ldr	r4, [pc, #40]	; (800424c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004224:	e001      	b.n	800422a <LoopFillZerobss>

08004226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004228:	3204      	adds	r2, #4

0800422a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800422a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800422c:	d3fb      	bcc.n	8004226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800422e:	f006 ff13 	bl	800b058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004232:	f7ff f951 	bl	80034d8 <main>
  bx  lr
 8004236:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004238:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800423c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004240:	24000560 	.word	0x24000560
  ldr r2, =_sidata
 8004244:	0801a394 	.word	0x0801a394
  ldr r2, =_sbss
 8004248:	24000620 	.word	0x24000620
  ldr r4, =_ebss
 800424c:	24000d3c 	.word	0x24000d3c

08004250 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004250:	e7fe      	b.n	8004250 <ADC3_IRQHandler>
	...

08004254 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800425a:	2003      	movs	r0, #3
 800425c:	f000 f9a0 	bl	80045a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004260:	f001 ff88 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <HAL_Init+0x68>)
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	4913      	ldr	r1, [pc, #76]	; (80042c0 <HAL_Init+0x6c>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	fa22 f303 	lsr.w	r3, r2, r3
 800427c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_Init+0x68>)
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	4a0e      	ldr	r2, [pc, #56]	; (80042c0 <HAL_Init+0x6c>)
 8004288:	5cd3      	ldrb	r3, [r2, r3]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	fa22 f303 	lsr.w	r3, r2, r3
 8004294:	4a0b      	ldr	r2, [pc, #44]	; (80042c4 <HAL_Init+0x70>)
 8004296:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004298:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <HAL_Init+0x74>)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800429e:	2000      	movs	r0, #0
 80042a0:	f000 f814 	bl	80042cc <HAL_InitTick>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e002      	b.n	80042b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80042ae:	f7ff fc31 	bl	8003b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	58024400 	.word	0x58024400
 80042c0:	080189c0 	.word	0x080189c0
 80042c4:	240004f0 	.word	0x240004f0
 80042c8:	240004ec 	.word	0x240004ec

080042cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80042d4:	4b15      	ldr	r3, [pc, #84]	; (800432c <HAL_InitTick+0x60>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e021      	b.n	8004324 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80042e0:	4b13      	ldr	r3, [pc, #76]	; (8004330 <HAL_InitTick+0x64>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <HAL_InitTick+0x60>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f985 	bl	8004606 <HAL_SYSTICK_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e00e      	b.n	8004324 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b0f      	cmp	r3, #15
 800430a:	d80a      	bhi.n	8004322 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800430c:	2200      	movs	r2, #0
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	f04f 30ff 	mov.w	r0, #4294967295
 8004314:	f000 f94f 	bl	80045b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004318:	4a06      	ldr	r2, [pc, #24]	; (8004334 <HAL_InitTick+0x68>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	240004f8 	.word	0x240004f8
 8004330:	240004ec 	.word	0x240004ec
 8004334:	240004f4 	.word	0x240004f4

08004338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_IncTick+0x20>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_IncTick+0x24>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4413      	add	r3, r2
 8004348:	4a04      	ldr	r2, [pc, #16]	; (800435c <HAL_IncTick+0x24>)
 800434a:	6013      	str	r3, [r2, #0]
}
 800434c:	bf00      	nop
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	240004f8 	.word	0x240004f8
 800435c:	24000d28 	.word	0x24000d28

08004360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return uwTick;
 8004364:	4b03      	ldr	r3, [pc, #12]	; (8004374 <HAL_GetTick+0x14>)
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	24000d28 	.word	0x24000d28

08004378 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004380:	f7ff ffee 	bl	8004360 <HAL_GetTick>
 8004384:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d005      	beq.n	800439e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004392:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_Delay+0x44>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800439e:	bf00      	nop
 80043a0:	f7ff ffde 	bl	8004360 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d8f7      	bhi.n	80043a0 <HAL_Delay+0x28>
  {
  }
}
 80043b0:	bf00      	nop
 80043b2:	bf00      	nop
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	240004f8 	.word	0x240004f8

080043c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <HAL_GetREVID+0x14>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0c1b      	lsrs	r3, r3, #16
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	5c001000 	.word	0x5c001000

080043d8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80043e8:	4904      	ldr	r1, [pc, #16]	; (80043fc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	58000400 	.word	0x58000400

08004400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <__NVIC_SetPriorityGrouping+0x40>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800441c:	4013      	ands	r3, r2
 800441e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <__NVIC_SetPriorityGrouping+0x44>)
 800442a:	4313      	orrs	r3, r2
 800442c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800442e:	4a04      	ldr	r2, [pc, #16]	; (8004440 <__NVIC_SetPriorityGrouping+0x40>)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	60d3      	str	r3, [r2, #12]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	e000ed00 	.word	0xe000ed00
 8004444:	05fa0000 	.word	0x05fa0000

08004448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <__NVIC_GetPriorityGrouping+0x18>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	0a1b      	lsrs	r3, r3, #8
 8004452:	f003 0307 	and.w	r3, r3, #7
}
 8004456:	4618      	mov	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	e000ed00 	.word	0xe000ed00

08004464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800446e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004472:	2b00      	cmp	r3, #0
 8004474:	db0b      	blt.n	800448e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	f003 021f 	and.w	r2, r3, #31
 800447c:	4907      	ldr	r1, [pc, #28]	; (800449c <__NVIC_EnableIRQ+0x38>)
 800447e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	2001      	movs	r0, #1
 8004486:	fa00 f202 	lsl.w	r2, r0, r2
 800448a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	e000e100 	.word	0xe000e100

080044a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	6039      	str	r1, [r7, #0]
 80044aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	db0a      	blt.n	80044ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	b2da      	uxtb	r2, r3
 80044b8:	490c      	ldr	r1, [pc, #48]	; (80044ec <__NVIC_SetPriority+0x4c>)
 80044ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044be:	0112      	lsls	r2, r2, #4
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	440b      	add	r3, r1
 80044c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c8:	e00a      	b.n	80044e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	4908      	ldr	r1, [pc, #32]	; (80044f0 <__NVIC_SetPriority+0x50>)
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	3b04      	subs	r3, #4
 80044d8:	0112      	lsls	r2, r2, #4
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	440b      	add	r3, r1
 80044de:	761a      	strb	r2, [r3, #24]
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000e100 	.word	0xe000e100
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f1c3 0307 	rsb	r3, r3, #7
 800450e:	2b04      	cmp	r3, #4
 8004510:	bf28      	it	cs
 8004512:	2304      	movcs	r3, #4
 8004514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3304      	adds	r3, #4
 800451a:	2b06      	cmp	r3, #6
 800451c:	d902      	bls.n	8004524 <NVIC_EncodePriority+0x30>
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3b03      	subs	r3, #3
 8004522:	e000      	b.n	8004526 <NVIC_EncodePriority+0x32>
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004528:	f04f 32ff 	mov.w	r2, #4294967295
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43da      	mvns	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	401a      	ands	r2, r3
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800453c:	f04f 31ff 	mov.w	r1, #4294967295
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	fa01 f303 	lsl.w	r3, r1, r3
 8004546:	43d9      	mvns	r1, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800454c:	4313      	orrs	r3, r2
         );
}
 800454e:	4618      	mov	r0, r3
 8004550:	3724      	adds	r7, #36	; 0x24
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3b01      	subs	r3, #1
 8004568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800456c:	d301      	bcc.n	8004572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800456e:	2301      	movs	r3, #1
 8004570:	e00f      	b.n	8004592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <SysTick_Config+0x40>)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3b01      	subs	r3, #1
 8004578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800457a:	210f      	movs	r1, #15
 800457c:	f04f 30ff 	mov.w	r0, #4294967295
 8004580:	f7ff ff8e 	bl	80044a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <SysTick_Config+0x40>)
 8004586:	2200      	movs	r2, #0
 8004588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800458a:	4b04      	ldr	r3, [pc, #16]	; (800459c <SysTick_Config+0x40>)
 800458c:	2207      	movs	r2, #7
 800458e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	e000e010 	.word	0xe000e010

080045a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff ff29 	bl	8004400 <__NVIC_SetPriorityGrouping>
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	4603      	mov	r3, r0
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	607a      	str	r2, [r7, #4]
 80045c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045c4:	f7ff ff40 	bl	8004448 <__NVIC_GetPriorityGrouping>
 80045c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f7ff ff90 	bl	80044f4 <NVIC_EncodePriority>
 80045d4:	4602      	mov	r2, r0
 80045d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff5f 	bl	80044a0 <__NVIC_SetPriority>
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff33 	bl	8004464 <__NVIC_EnableIRQ>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ffa4 	bl	800455c <SysTick_Config>
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e0cf      	b.n	80047d2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2223      	movs	r2, #35	; 0x23
 8004640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff fa7f 	bl	8003b48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800464a:	4b64      	ldr	r3, [pc, #400]	; (80047dc <HAL_ETH_Init+0x1bc>)
 800464c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004650:	4a62      	ldr	r2, [pc, #392]	; (80047dc <HAL_ETH_Init+0x1bc>)
 8004652:	f043 0302 	orr.w	r3, r3, #2
 8004656:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800465a:	4b60      	ldr	r3, [pc, #384]	; (80047dc <HAL_ETH_Init+0x1bc>)
 800465c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7a1b      	ldrb	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d103      	bne.n	8004678 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004670:	2000      	movs	r0, #0
 8004672:	f7ff feb1 	bl	80043d8 <HAL_SYSCFG_ETHInterfaceSelect>
 8004676:	e003      	b.n	8004680 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004678:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800467c:	f7ff feac 	bl	80043d8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004680:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <HAL_ETH_Init+0x1c0>)
 8004682:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6812      	ldr	r2, [r2, #0]
 8004692:	f043 0301 	orr.w	r3, r3, #1
 8004696:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800469a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800469c:	f7ff fe60 	bl	8004360 <HAL_GetTick>
 80046a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80046a2:	e011      	b.n	80046c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80046a4:	f7ff fe5c 	bl	8004360 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046b2:	d909      	bls.n	80046c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2204      	movs	r2, #4
 80046b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	22e0      	movs	r2, #224	; 0xe0
 80046c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e084      	b.n	80047d2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e4      	bne.n	80046a4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f886 	bl	80047ec <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80046e0:	f001 fec2 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80046e4:	4603      	mov	r3, r0
 80046e6:	4a3f      	ldr	r2, [pc, #252]	; (80047e4 <HAL_ETH_Init+0x1c4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	0c9a      	lsrs	r2, r3, #18
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3a01      	subs	r2, #1
 80046f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fa71 	bl	8004be0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004706:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800470a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6812      	ldr	r2, [r2, #0]
 8004712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004716:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800471a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0303 	and.w	r3, r3, #3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	22e0      	movs	r2, #224	; 0xe0
 8004736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e049      	b.n	80047d2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004746:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800474a:	4b27      	ldr	r3, [pc, #156]	; (80047e8 <HAL_ETH_Init+0x1c8>)
 800474c:	4013      	ands	r3, r2
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6952      	ldr	r2, [r2, #20]
 8004752:	0051      	lsls	r1, r2, #1
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6812      	ldr	r2, [r2, #0]
 8004758:	430b      	orrs	r3, r1
 800475a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800475e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fad9 	bl	8004d1a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fb1f 	bl	8004dac <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	3305      	adds	r3, #5
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	3304      	adds	r3, #4
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	3303      	adds	r3, #3
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	061a      	lsls	r2, r3, #24
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	3302      	adds	r3, #2
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	041b      	lsls	r3, r3, #16
 80047a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	3301      	adds	r3, #1
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80047ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80047ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80047bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2210      	movs	r2, #16
 80047cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400
 80047e0:	58000400 	.word	0x58000400
 80047e4:	431bde83 	.word	0x431bde83
 80047e8:	ffff8001 	.word	0xffff8001

080047ec <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004804:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004806:	f001 fe2f 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 800480a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a1e      	ldr	r2, [pc, #120]	; (8004888 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d908      	bls.n	8004826 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4a1d      	ldr	r2, [pc, #116]	; (800488c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d804      	bhi.n	8004826 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	e027      	b.n	8004876 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d908      	bls.n	8004840 <HAL_ETH_SetMDIOClockRange+0x54>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4a17      	ldr	r2, [pc, #92]	; (8004890 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d204      	bcs.n	8004840 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e01a      	b.n	8004876 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a13      	ldr	r2, [pc, #76]	; (8004890 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d303      	bcc.n	8004850 <HAL_ETH_SetMDIOClockRange+0x64>
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4a12      	ldr	r2, [pc, #72]	; (8004894 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d911      	bls.n	8004874 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4a10      	ldr	r2, [pc, #64]	; (8004894 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d908      	bls.n	800486a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4a0f      	ldr	r2, [pc, #60]	; (8004898 <HAL_ETH_SetMDIOClockRange+0xac>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d804      	bhi.n	800486a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e005      	b.n	8004876 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	e000      	b.n	8004876 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004874:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	01312cff 	.word	0x01312cff
 800488c:	02160ebf 	.word	0x02160ebf
 8004890:	03938700 	.word	0x03938700
 8004894:	05f5e0ff 	.word	0x05f5e0ff
 8004898:	08f0d17f 	.word	0x08f0d17f

0800489c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80048ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	791b      	ldrb	r3, [r3, #4]
 80048b4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80048b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	7b1b      	ldrb	r3, [r3, #12]
 80048bc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80048be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	7b5b      	ldrb	r3, [r3, #13]
 80048c4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80048c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	7b9b      	ldrb	r3, [r3, #14]
 80048cc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80048ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	7bdb      	ldrb	r3, [r3, #15]
 80048d4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80048d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	7c12      	ldrb	r2, [r2, #16]
 80048dc:	2a00      	cmp	r2, #0
 80048de:	d102      	bne.n	80048e6 <ETH_SetMACConfig+0x4a>
 80048e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048e4:	e000      	b.n	80048e8 <ETH_SetMACConfig+0x4c>
 80048e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80048e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	7c52      	ldrb	r2, [r2, #17]
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	d102      	bne.n	80048f8 <ETH_SetMACConfig+0x5c>
 80048f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048f6:	e000      	b.n	80048fa <ETH_SetMACConfig+0x5e>
 80048f8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80048fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	7c9b      	ldrb	r3, [r3, #18]
 8004900:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004902:	431a      	orrs	r2, r3
               macconf->Speed |
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004908:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800490e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	7f1b      	ldrb	r3, [r3, #28]
 8004914:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004916:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	7f5b      	ldrb	r3, [r3, #29]
 800491c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800491e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	7f92      	ldrb	r2, [r2, #30]
 8004924:	2a00      	cmp	r2, #0
 8004926:	d102      	bne.n	800492e <ETH_SetMACConfig+0x92>
 8004928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800492c:	e000      	b.n	8004930 <ETH_SetMACConfig+0x94>
 800492e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004930:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	7fdb      	ldrb	r3, [r3, #31]
 8004936:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004938:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004940:	2a00      	cmp	r2, #0
 8004942:	d102      	bne.n	800494a <ETH_SetMACConfig+0xae>
 8004944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004948:	e000      	b.n	800494c <ETH_SetMACConfig+0xb0>
 800494a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800494c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004952:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800495c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004962:	4313      	orrs	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b56      	ldr	r3, [pc, #344]	; (8004ac8 <ETH_SetMACConfig+0x22c>)
 800496e:	4013      	ands	r3, r2
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	430b      	orrs	r3, r1
 8004978:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004986:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004988:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004990:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004992:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800499a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800499c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	d102      	bne.n	80049ae <ETH_SetMACConfig+0x112>
 80049a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049ac:	e000      	b.n	80049b0 <ETH_SetMACConfig+0x114>
 80049ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80049b0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	4b42      	ldr	r3, [pc, #264]	; (8004acc <ETH_SetMACConfig+0x230>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	430b      	orrs	r3, r1
 80049cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	4b3a      	ldr	r3, [pc, #232]	; (8004ad0 <ETH_SetMACConfig+0x234>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6812      	ldr	r2, [r2, #0]
 80049ec:	68f9      	ldr	r1, [r7, #12]
 80049ee:	430b      	orrs	r3, r1
 80049f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80049f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80049fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004a06:	2a00      	cmp	r2, #0
 8004a08:	d101      	bne.n	8004a0e <ETH_SetMACConfig+0x172>
 8004a0a:	2280      	movs	r2, #128	; 0x80
 8004a0c:	e000      	b.n	8004a10 <ETH_SetMACConfig+0x174>
 8004a0e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004a10:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a16:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a22:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004a26:	4013      	ands	r3, r2
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6812      	ldr	r2, [r2, #0]
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004a38:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004a40:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f023 0103 	bic.w	r1, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004a66:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	d101      	bne.n	8004a8a <ETH_SetMACConfig+0x1ee>
 8004a86:	2240      	movs	r2, #64	; 0x40
 8004a88:	e000      	b.n	8004a8c <ETH_SetMACConfig+0x1f0>
 8004a8a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004a8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004a94:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004a96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004a9e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004aac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004abc:	bf00      	nop
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	00048083 	.word	0x00048083
 8004acc:	c0f88000 	.word	0xc0f88000
 8004ad0:	fffffef0 	.word	0xfffffef0

08004ad4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4b38      	ldr	r3, [pc, #224]	; (8004bcc <ETH_SetDMAConfig+0xf8>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	6811      	ldr	r1, [r2, #0]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	430b      	orrs	r3, r1
 8004af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004afa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	791b      	ldrb	r3, [r3, #4]
 8004b00:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b06:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	7b1b      	ldrb	r3, [r3, #12]
 8004b0c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <ETH_SetDMAConfig+0xfc>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	430b      	orrs	r3, r1
 8004b28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b2c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	7b5b      	ldrb	r3, [r3, #13]
 8004b32:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b44:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004b48:	4b22      	ldr	r3, [pc, #136]	; (8004bd4 <ETH_SetDMAConfig+0x100>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	430b      	orrs	r3, r1
 8004b54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b58:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	7d1b      	ldrb	r3, [r3, #20]
 8004b64:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	7f5b      	ldrb	r3, [r3, #29]
 8004b6c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004b7e:	4b16      	ldr	r3, [pc, #88]	; (8004bd8 <ETH_SetDMAConfig+0x104>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b8e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	7f1b      	ldrb	r3, [r3, #28]
 8004b96:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <ETH_SetDMAConfig+0x108>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	68f9      	ldr	r1, [r7, #12]
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bbc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	ffff87fd 	.word	0xffff87fd
 8004bd0:	ffff2ffe 	.word	0xffff2ffe
 8004bd4:	fffec000 	.word	0xfffec000
 8004bd8:	ffc0efef 	.word	0xffc0efef
 8004bdc:	7fc0ffff 	.word	0x7fc0ffff

08004be0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b0a4      	sub	sp, #144	; 0x90
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004be8:	2301      	movs	r3, #1
 8004bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c20:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004c38:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004c3c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004c44:	2300      	movs	r3, #0
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004c62:	2300      	movs	r3, #0
 8004c64:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004c78:	2320      	movs	r3, #32
 8004c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004c8a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c94:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004cc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cc8:	4619      	mov	r1, r3
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fde6 	bl	800489c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004cea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004cf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004cf8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004d00:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004d04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004d06:	f107 0308 	add.w	r3, r7, #8
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fee1 	bl	8004ad4 <ETH_SetDMAConfig>
}
 8004d12:	bf00      	nop
 8004d14:	3790      	adds	r7, #144	; 0x90
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e01d      	b.n	8004d64 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68d9      	ldr	r1, [r3, #12]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	4413      	add	r3, r2
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	440b      	add	r3, r1
 8004d38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2200      	movs	r2, #0
 8004d44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	3206      	adds	r2, #6
 8004d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3301      	adds	r3, #1
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d9de      	bls.n	8004d28 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d78:	461a      	mov	r2, r3
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	e023      	b.n	8004e02 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6919      	ldr	r1, [r3, #16]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	4413      	add	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	440b      	add	r3, r1
 8004dca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2200      	movs	r2, #0
 8004de2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2200      	movs	r2, #0
 8004de8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2200      	movs	r2, #0
 8004dee:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	3212      	adds	r2, #18
 8004df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d9d8      	bls.n	8004dba <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2303      	movs	r3, #3
 8004e32:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e42:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e56:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b089      	sub	sp, #36	; 0x24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e76:	4b89      	ldr	r3, [pc, #548]	; (800509c <HAL_GPIO_Init+0x234>)
 8004e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e7a:	e194      	b.n	80051a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2101      	movs	r1, #1
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	fa01 f303 	lsl.w	r3, r1, r3
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8186 	beq.w	80051a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d005      	beq.n	8004eac <HAL_GPIO_Init+0x44>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d130      	bne.n	8004f0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	091b      	lsrs	r3, r3, #4
 8004ef8:	f003 0201 	and.w	r2, r3, #1
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 0303 	and.w	r3, r3, #3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d017      	beq.n	8004f4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	2203      	movs	r2, #3
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d123      	bne.n	8004f9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	08da      	lsrs	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3208      	adds	r2, #8
 8004f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	220f      	movs	r2, #15
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	08da      	lsrs	r2, r3, #3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3208      	adds	r2, #8
 8004f98:	69b9      	ldr	r1, [r7, #24]
 8004f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	2203      	movs	r2, #3
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f003 0203 	and.w	r2, r3, #3
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80e0 	beq.w	80051a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe0:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <HAL_GPIO_Init+0x238>)
 8004fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004fe6:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <HAL_GPIO_Init+0x238>)
 8004fe8:	f043 0302 	orr.w	r3, r3, #2
 8004fec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <HAL_GPIO_Init+0x238>)
 8004ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ffe:	4a29      	ldr	r2, [pc, #164]	; (80050a4 <HAL_GPIO_Init+0x23c>)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	089b      	lsrs	r3, r3, #2
 8005004:	3302      	adds	r3, #2
 8005006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	220f      	movs	r2, #15
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4013      	ands	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a20      	ldr	r2, [pc, #128]	; (80050a8 <HAL_GPIO_Init+0x240>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d052      	beq.n	80050d0 <HAL_GPIO_Init+0x268>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a1f      	ldr	r2, [pc, #124]	; (80050ac <HAL_GPIO_Init+0x244>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d031      	beq.n	8005096 <HAL_GPIO_Init+0x22e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a1e      	ldr	r2, [pc, #120]	; (80050b0 <HAL_GPIO_Init+0x248>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d02b      	beq.n	8005092 <HAL_GPIO_Init+0x22a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a1d      	ldr	r2, [pc, #116]	; (80050b4 <HAL_GPIO_Init+0x24c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d025      	beq.n	800508e <HAL_GPIO_Init+0x226>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <HAL_GPIO_Init+0x250>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d01f      	beq.n	800508a <HAL_GPIO_Init+0x222>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <HAL_GPIO_Init+0x254>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d019      	beq.n	8005086 <HAL_GPIO_Init+0x21e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1a      	ldr	r2, [pc, #104]	; (80050c0 <HAL_GPIO_Init+0x258>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d013      	beq.n	8005082 <HAL_GPIO_Init+0x21a>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a19      	ldr	r2, [pc, #100]	; (80050c4 <HAL_GPIO_Init+0x25c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00d      	beq.n	800507e <HAL_GPIO_Init+0x216>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a18      	ldr	r2, [pc, #96]	; (80050c8 <HAL_GPIO_Init+0x260>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <HAL_GPIO_Init+0x212>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a17      	ldr	r2, [pc, #92]	; (80050cc <HAL_GPIO_Init+0x264>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d101      	bne.n	8005076 <HAL_GPIO_Init+0x20e>
 8005072:	2309      	movs	r3, #9
 8005074:	e02d      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 8005076:	230a      	movs	r3, #10
 8005078:	e02b      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 800507a:	2308      	movs	r3, #8
 800507c:	e029      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 800507e:	2307      	movs	r3, #7
 8005080:	e027      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 8005082:	2306      	movs	r3, #6
 8005084:	e025      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 8005086:	2305      	movs	r3, #5
 8005088:	e023      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 800508a:	2304      	movs	r3, #4
 800508c:	e021      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 800508e:	2303      	movs	r3, #3
 8005090:	e01f      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 8005092:	2302      	movs	r3, #2
 8005094:	e01d      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 8005096:	2301      	movs	r3, #1
 8005098:	e01b      	b.n	80050d2 <HAL_GPIO_Init+0x26a>
 800509a:	bf00      	nop
 800509c:	58000080 	.word	0x58000080
 80050a0:	58024400 	.word	0x58024400
 80050a4:	58000400 	.word	0x58000400
 80050a8:	58020000 	.word	0x58020000
 80050ac:	58020400 	.word	0x58020400
 80050b0:	58020800 	.word	0x58020800
 80050b4:	58020c00 	.word	0x58020c00
 80050b8:	58021000 	.word	0x58021000
 80050bc:	58021400 	.word	0x58021400
 80050c0:	58021800 	.word	0x58021800
 80050c4:	58021c00 	.word	0x58021c00
 80050c8:	58022000 	.word	0x58022000
 80050cc:	58022400 	.word	0x58022400
 80050d0:	2300      	movs	r3, #0
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	f002 0203 	and.w	r2, r2, #3
 80050d8:	0092      	lsls	r2, r2, #2
 80050da:	4093      	lsls	r3, r2
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050e2:	4938      	ldr	r1, [pc, #224]	; (80051c4 <HAL_GPIO_Init+0x35c>)
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	3302      	adds	r3, #2
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	43db      	mvns	r3, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	4313      	orrs	r3, r2
 8005114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	43db      	mvns	r3, r3
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	4013      	ands	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	43db      	mvns	r3, r3
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4013      	ands	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3301      	adds	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f47f ae63 	bne.w	8004e7c <HAL_GPIO_Init+0x14>
  }
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	3724      	adds	r7, #36	; 0x24
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	58000400 	.word	0x58000400

080051c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	807b      	strh	r3, [r7, #2]
 80051d4:	4613      	mov	r3, r2
 80051d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051d8:	787b      	ldrb	r3, [r7, #1]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051de:	887a      	ldrh	r2, [r7, #2]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051e4:	e003      	b.n	80051ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051e6:	887b      	ldrh	r3, [r7, #2]
 80051e8:	041a      	lsls	r2, r3, #16
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	619a      	str	r2, [r3, #24]
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	460b      	mov	r3, r1
 8005204:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800520c:	887a      	ldrh	r2, [r7, #2]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4013      	ands	r3, r2
 8005212:	041a      	lsls	r2, r3, #16
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	43d9      	mvns	r1, r3
 8005218:	887b      	ldrh	r3, [r7, #2]
 800521a:	400b      	ands	r3, r1
 800521c:	431a      	orrs	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	619a      	str	r2, [r3, #24]
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800522e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005230:	b08f      	sub	sp, #60	; 0x3c
 8005232:	af0a      	add	r7, sp, #40	; 0x28
 8005234:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e116      	b.n	800546e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fe fdd2 	bl	8003e04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2203      	movs	r2, #3
 8005264:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005270:	2b00      	cmp	r3, #0
 8005272:	d102      	bne.n	800527a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f004 fe40 	bl	8009f04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	603b      	str	r3, [r7, #0]
 800528a:	687e      	ldr	r6, [r7, #4]
 800528c:	466d      	mov	r5, sp
 800528e:	f106 0410 	add.w	r4, r6, #16
 8005292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800529e:	e885 0003 	stmia.w	r5, {r0, r1}
 80052a2:	1d33      	adds	r3, r6, #4
 80052a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a6:	6838      	ldr	r0, [r7, #0]
 80052a8:	f004 fdbe 	bl	8009e28 <USB_CoreInit>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e0d7      	b.n	800546e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f004 fe2e 	bl	8009f26 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ca:	2300      	movs	r3, #0
 80052cc:	73fb      	strb	r3, [r7, #15]
 80052ce:	e04a      	b.n	8005366 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052d0:	7bfa      	ldrb	r2, [r7, #15]
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	333d      	adds	r3, #61	; 0x3d
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052e4:	7bfa      	ldrb	r2, [r7, #15]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	333c      	adds	r3, #60	; 0x3c
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052f8:	7bfa      	ldrb	r2, [r7, #15]
 80052fa:	7bfb      	ldrb	r3, [r7, #15]
 80052fc:	b298      	uxth	r0, r3
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3356      	adds	r3, #86	; 0x56
 800530c:	4602      	mov	r2, r0
 800530e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005310:	7bfa      	ldrb	r2, [r7, #15]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	3340      	adds	r3, #64	; 0x40
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005324:	7bfa      	ldrb	r2, [r7, #15]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	3344      	adds	r3, #68	; 0x44
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	3348      	adds	r3, #72	; 0x48
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800534c:	7bfa      	ldrb	r2, [r7, #15]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	334c      	adds	r3, #76	; 0x4c
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	3301      	adds	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
 8005366:	7bfa      	ldrb	r2, [r7, #15]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d3af      	bcc.n	80052d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
 8005374:	e044      	b.n	8005400 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005376:	7bfa      	ldrb	r2, [r7, #15]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	4413      	add	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800539e:	7bfa      	ldrb	r2, [r7, #15]
 80053a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053a2:	7bfa      	ldrb	r2, [r7, #15]
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053b8:	7bfa      	ldrb	r2, [r7, #15]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	4413      	add	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053ce:	7bfa      	ldrb	r2, [r7, #15]
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	4613      	mov	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053e4:	7bfa      	ldrb	r2, [r7, #15]
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	3301      	adds	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
 8005400:	7bfa      	ldrb	r2, [r7, #15]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	429a      	cmp	r2, r3
 8005408:	d3b5      	bcc.n	8005376 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	687e      	ldr	r6, [r7, #4]
 8005412:	466d      	mov	r5, sp
 8005414:	f106 0410 	add.w	r4, r6, #16
 8005418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800541a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800541c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800541e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005424:	e885 0003 	stmia.w	r5, {r0, r1}
 8005428:	1d33      	adds	r3, r6, #4
 800542a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542c:	6838      	ldr	r0, [r7, #0]
 800542e:	f004 fdc7 	bl	8009fc0 <USB_DevInit>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e014      	b.n	800546e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	2b01      	cmp	r3, #1
 800545a:	d102      	bne.n	8005462 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f80b 	bl	8005478 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f004 ff85 	bl	800a376 <USB_DevDisconnect>

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005478 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_PCDEx_ActivateLPM+0x44>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	10000003 	.word	0x10000003

080054c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80054c8:	4b19      	ldr	r3, [pc, #100]	; (8005530 <HAL_PWREx_ConfigSupply+0x70>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d00a      	beq.n	80054ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80054d4:	4b16      	ldr	r3, [pc, #88]	; (8005530 <HAL_PWREx_ConfigSupply+0x70>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d001      	beq.n	80054e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e01f      	b.n	8005526 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e01d      	b.n	8005526 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80054ea:	4b11      	ldr	r3, [pc, #68]	; (8005530 <HAL_PWREx_ConfigSupply+0x70>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f023 0207 	bic.w	r2, r3, #7
 80054f2:	490f      	ldr	r1, [pc, #60]	; (8005530 <HAL_PWREx_ConfigSupply+0x70>)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80054fa:	f7fe ff31 	bl	8004360 <HAL_GetTick>
 80054fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005500:	e009      	b.n	8005516 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005502:	f7fe ff2d 	bl	8004360 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005510:	d901      	bls.n	8005516 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e007      	b.n	8005526 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <HAL_PWREx_ConfigSupply+0x70>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800551e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005522:	d1ee      	bne.n	8005502 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	58024800 	.word	0x58024800

08005534 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a04      	ldr	r2, [pc, #16]	; (8005550 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800553e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005542:	60d3      	str	r3, [r2, #12]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	58024800 	.word	0x58024800

08005554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08c      	sub	sp, #48	; 0x30
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	f000 bc48 	b.w	8005df8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8088 	beq.w	8005686 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005576:	4b99      	ldr	r3, [pc, #612]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005580:	4b96      	ldr	r3, [pc, #600]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	2b10      	cmp	r3, #16
 800558a:	d007      	beq.n	800559c <HAL_RCC_OscConfig+0x48>
 800558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558e:	2b18      	cmp	r3, #24
 8005590:	d111      	bne.n	80055b6 <HAL_RCC_OscConfig+0x62>
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d10c      	bne.n	80055b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800559c:	4b8f      	ldr	r3, [pc, #572]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d06d      	beq.n	8005684 <HAL_RCC_OscConfig+0x130>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d169      	bne.n	8005684 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	f000 bc21 	b.w	8005df8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055be:	d106      	bne.n	80055ce <HAL_RCC_OscConfig+0x7a>
 80055c0:	4b86      	ldr	r3, [pc, #536]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a85      	ldr	r2, [pc, #532]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80055c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	e02e      	b.n	800562c <HAL_RCC_OscConfig+0xd8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10c      	bne.n	80055f0 <HAL_RCC_OscConfig+0x9c>
 80055d6:	4b81      	ldr	r3, [pc, #516]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a80      	ldr	r2, [pc, #512]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80055dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4b7e      	ldr	r3, [pc, #504]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a7d      	ldr	r2, [pc, #500]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80055e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e01d      	b.n	800562c <HAL_RCC_OscConfig+0xd8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f8:	d10c      	bne.n	8005614 <HAL_RCC_OscConfig+0xc0>
 80055fa:	4b78      	ldr	r3, [pc, #480]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a77      	ldr	r2, [pc, #476]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4b75      	ldr	r3, [pc, #468]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a74      	ldr	r2, [pc, #464]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 800560c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e00b      	b.n	800562c <HAL_RCC_OscConfig+0xd8>
 8005614:	4b71      	ldr	r3, [pc, #452]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a70      	ldr	r2, [pc, #448]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 800561a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	4b6e      	ldr	r3, [pc, #440]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a6d      	ldr	r2, [pc, #436]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d013      	beq.n	800565c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fe fe94 	bl	8004360 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800563c:	f7fe fe90 	bl	8004360 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	; 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e3d4      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800564e:	4b63      	ldr	r3, [pc, #396]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0xe8>
 800565a:	e014      	b.n	8005686 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fe fe80 	bl	8004360 <HAL_GetTick>
 8005660:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005664:	f7fe fe7c 	bl	8004360 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	; 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e3c0      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005676:	4b59      	ldr	r3, [pc, #356]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x110>
 8005682:	e000      	b.n	8005686 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80ca 	beq.w	8005828 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005694:	4b51      	ldr	r3, [pc, #324]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800569c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800569e:	4b4f      	ldr	r3, [pc, #316]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <HAL_RCC_OscConfig+0x166>
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	2b18      	cmp	r3, #24
 80056ae:	d156      	bne.n	800575e <HAL_RCC_OscConfig+0x20a>
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d151      	bne.n	800575e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ba:	4b48      	ldr	r3, [pc, #288]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d005      	beq.n	80056d2 <HAL_RCC_OscConfig+0x17e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e392      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056d2:	4b42      	ldr	r3, [pc, #264]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f023 0219 	bic.w	r2, r3, #25
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	493f      	ldr	r1, [pc, #252]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e4:	f7fe fe3c 	bl	8004360 <HAL_GetTick>
 80056e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056ea:	e008      	b.n	80056fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ec:	f7fe fe38 	bl	8004360 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e37c      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056fe:	4b37      	ldr	r3, [pc, #220]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d0f0      	beq.n	80056ec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570a:	f7fe fe59 	bl	80043c0 <HAL_GetREVID>
 800570e:	4603      	mov	r3, r0
 8005710:	f241 0203 	movw	r2, #4099	; 0x1003
 8005714:	4293      	cmp	r3, r2
 8005716:	d817      	bhi.n	8005748 <HAL_RCC_OscConfig+0x1f4>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d108      	bne.n	8005732 <HAL_RCC_OscConfig+0x1de>
 8005720:	4b2e      	ldr	r3, [pc, #184]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005728:	4a2c      	ldr	r2, [pc, #176]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 800572a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005730:	e07a      	b.n	8005828 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005732:	4b2a      	ldr	r3, [pc, #168]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	031b      	lsls	r3, r3, #12
 8005740:	4926      	ldr	r1, [pc, #152]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005742:	4313      	orrs	r3, r2
 8005744:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005746:	e06f      	b.n	8005828 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005748:	4b24      	ldr	r3, [pc, #144]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	4921      	ldr	r1, [pc, #132]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800575c:	e064      	b.n	8005828 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d047      	beq.n	80057f6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005766:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f023 0219 	bic.w	r2, r3, #25
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	491a      	ldr	r1, [pc, #104]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005774:	4313      	orrs	r3, r2
 8005776:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fe fdf2 	bl	8004360 <HAL_GetTick>
 800577c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005780:	f7fe fdee 	bl	8004360 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e332      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005792:	4b12      	ldr	r3, [pc, #72]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579e:	f7fe fe0f 	bl	80043c0 <HAL_GetREVID>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d819      	bhi.n	80057e0 <HAL_RCC_OscConfig+0x28c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d108      	bne.n	80057c6 <HAL_RCC_OscConfig+0x272>
 80057b4:	4b09      	ldr	r3, [pc, #36]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80057bc:	4a07      	ldr	r2, [pc, #28]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80057be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c2:	6053      	str	r3, [r2, #4]
 80057c4:	e030      	b.n	8005828 <HAL_RCC_OscConfig+0x2d4>
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	031b      	lsls	r3, r3, #12
 80057d4:	4901      	ldr	r1, [pc, #4]	; (80057dc <HAL_RCC_OscConfig+0x288>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	604b      	str	r3, [r1, #4]
 80057da:	e025      	b.n	8005828 <HAL_RCC_OscConfig+0x2d4>
 80057dc:	58024400 	.word	0x58024400
 80057e0:	4b9a      	ldr	r3, [pc, #616]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	4997      	ldr	r1, [pc, #604]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
 80057f4:	e018      	b.n	8005828 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f6:	4b95      	ldr	r3, [pc, #596]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a94      	ldr	r2, [pc, #592]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80057fc:	f023 0301 	bic.w	r3, r3, #1
 8005800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005802:	f7fe fdad 	bl	8004360 <HAL_GetTick>
 8005806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800580a:	f7fe fda9 	bl	8004360 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e2ed      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800581c:	4b8b      	ldr	r3, [pc, #556]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f0      	bne.n	800580a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 80a9 	beq.w	8005988 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005836:	4b85      	ldr	r3, [pc, #532]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005840:	4b82      	ldr	r3, [pc, #520]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d007      	beq.n	800585c <HAL_RCC_OscConfig+0x308>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	2b18      	cmp	r3, #24
 8005850:	d13a      	bne.n	80058c8 <HAL_RCC_OscConfig+0x374>
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d135      	bne.n	80058c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800585c:	4b7b      	ldr	r3, [pc, #492]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_RCC_OscConfig+0x320>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	2b80      	cmp	r3, #128	; 0x80
 800586e:	d001      	beq.n	8005874 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e2c1      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005874:	f7fe fda4 	bl	80043c0 <HAL_GetREVID>
 8005878:	4603      	mov	r3, r0
 800587a:	f241 0203 	movw	r2, #4099	; 0x1003
 800587e:	4293      	cmp	r3, r2
 8005880:	d817      	bhi.n	80058b2 <HAL_RCC_OscConfig+0x35e>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	2b20      	cmp	r3, #32
 8005888:	d108      	bne.n	800589c <HAL_RCC_OscConfig+0x348>
 800588a:	4b70      	ldr	r3, [pc, #448]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005892:	4a6e      	ldr	r2, [pc, #440]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005894:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005898:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800589a:	e075      	b.n	8005988 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800589c:	4b6b      	ldr	r3, [pc, #428]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	069b      	lsls	r3, r3, #26
 80058aa:	4968      	ldr	r1, [pc, #416]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058b0:	e06a      	b.n	8005988 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058b2:	4b66      	ldr	r3, [pc, #408]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	061b      	lsls	r3, r3, #24
 80058c0:	4962      	ldr	r1, [pc, #392]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058c6:	e05f      	b.n	8005988 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d042      	beq.n	8005956 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80058d0:	4b5e      	ldr	r3, [pc, #376]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a5d      	ldr	r2, [pc, #372]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80058d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fe fd40 	bl	8004360 <HAL_GetTick>
 80058e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80058e4:	f7fe fd3c 	bl	8004360 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e280      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058f6:	4b55      	ldr	r3, [pc, #340]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005902:	f7fe fd5d 	bl	80043c0 <HAL_GetREVID>
 8005906:	4603      	mov	r3, r0
 8005908:	f241 0203 	movw	r2, #4099	; 0x1003
 800590c:	4293      	cmp	r3, r2
 800590e:	d817      	bhi.n	8005940 <HAL_RCC_OscConfig+0x3ec>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	2b20      	cmp	r3, #32
 8005916:	d108      	bne.n	800592a <HAL_RCC_OscConfig+0x3d6>
 8005918:	4b4c      	ldr	r3, [pc, #304]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005920:	4a4a      	ldr	r2, [pc, #296]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005926:	6053      	str	r3, [r2, #4]
 8005928:	e02e      	b.n	8005988 <HAL_RCC_OscConfig+0x434>
 800592a:	4b48      	ldr	r3, [pc, #288]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	069b      	lsls	r3, r3, #26
 8005938:	4944      	ldr	r1, [pc, #272]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800593a:	4313      	orrs	r3, r2
 800593c:	604b      	str	r3, [r1, #4]
 800593e:	e023      	b.n	8005988 <HAL_RCC_OscConfig+0x434>
 8005940:	4b42      	ldr	r3, [pc, #264]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	061b      	lsls	r3, r3, #24
 800594e:	493f      	ldr	r1, [pc, #252]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005950:	4313      	orrs	r3, r2
 8005952:	60cb      	str	r3, [r1, #12]
 8005954:	e018      	b.n	8005988 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005956:	4b3d      	ldr	r3, [pc, #244]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800595c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fe fcfd 	bl	8004360 <HAL_GetTick>
 8005966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800596a:	f7fe fcf9 	bl	8004360 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e23d      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800597c:	4b33      	ldr	r3, [pc, #204]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f0      	bne.n	800596a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d036      	beq.n	8005a02 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d019      	beq.n	80059d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800599c:	4b2b      	ldr	r3, [pc, #172]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 800599e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80059a2:	f043 0301 	orr.w	r3, r3, #1
 80059a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fe fcda 	bl	8004360 <HAL_GetTick>
 80059ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b0:	f7fe fcd6 	bl	8004360 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e21a      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059c2:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80059c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0f0      	beq.n	80059b0 <HAL_RCC_OscConfig+0x45c>
 80059ce:	e018      	b.n	8005a02 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d0:	4b1e      	ldr	r3, [pc, #120]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80059d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d4:	4a1d      	ldr	r2, [pc, #116]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059dc:	f7fe fcc0 	bl	8004360 <HAL_GetTick>
 80059e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e4:	f7fe fcbc 	bl	8004360 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e200      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059f6:	4b15      	ldr	r3, [pc, #84]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d039      	beq.n	8005a82 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d01c      	beq.n	8005a50 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a16:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005a1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a20:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a22:	f7fe fc9d 	bl	8004360 <HAL_GetTick>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a28:	e008      	b.n	8005a3c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a2a:	f7fe fc99 	bl	8004360 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e1dd      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <HAL_RCC_OscConfig+0x4f8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCC_OscConfig+0x4d6>
 8005a48:	e01b      	b.n	8005a82 <HAL_RCC_OscConfig+0x52e>
 8005a4a:	bf00      	nop
 8005a4c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a50:	4b9b      	ldr	r3, [pc, #620]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a9a      	ldr	r2, [pc, #616]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a5c:	f7fe fc80 	bl	8004360 <HAL_GetTick>
 8005a60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a64:	f7fe fc7c 	bl	8004360 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e1c0      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a76:	4b92      	ldr	r3, [pc, #584]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 8081 	beq.w	8005b92 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a90:	4b8c      	ldr	r3, [pc, #560]	; (8005cc4 <HAL_RCC_OscConfig+0x770>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a8b      	ldr	r2, [pc, #556]	; (8005cc4 <HAL_RCC_OscConfig+0x770>)
 8005a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a9c:	f7fe fc60 	bl	8004360 <HAL_GetTick>
 8005aa0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa4:	f7fe fc5c 	bl	8004360 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b64      	cmp	r3, #100	; 0x64
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e1a0      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab6:	4b83      	ldr	r3, [pc, #524]	; (8005cc4 <HAL_RCC_OscConfig+0x770>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d106      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x584>
 8005aca:	4b7d      	ldr	r3, [pc, #500]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ace:	4a7c      	ldr	r2, [pc, #496]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad6:	e02d      	b.n	8005b34 <HAL_RCC_OscConfig+0x5e0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10c      	bne.n	8005afa <HAL_RCC_OscConfig+0x5a6>
 8005ae0:	4b77      	ldr	r3, [pc, #476]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	4a76      	ldr	r2, [pc, #472]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	6713      	str	r3, [r2, #112]	; 0x70
 8005aec:	4b74      	ldr	r3, [pc, #464]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	4a73      	ldr	r2, [pc, #460]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005af2:	f023 0304 	bic.w	r3, r3, #4
 8005af6:	6713      	str	r3, [r2, #112]	; 0x70
 8005af8:	e01c      	b.n	8005b34 <HAL_RCC_OscConfig+0x5e0>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	2b05      	cmp	r3, #5
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0x5c8>
 8005b02:	4b6f      	ldr	r3, [pc, #444]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	4a6e      	ldr	r2, [pc, #440]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b08:	f043 0304 	orr.w	r3, r3, #4
 8005b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b0e:	4b6c      	ldr	r3, [pc, #432]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	4a6b      	ldr	r2, [pc, #428]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	6713      	str	r3, [r2, #112]	; 0x70
 8005b1a:	e00b      	b.n	8005b34 <HAL_RCC_OscConfig+0x5e0>
 8005b1c:	4b68      	ldr	r3, [pc, #416]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b20:	4a67      	ldr	r2, [pc, #412]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	6713      	str	r3, [r2, #112]	; 0x70
 8005b28:	4b65      	ldr	r3, [pc, #404]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2c:	4a64      	ldr	r2, [pc, #400]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b2e:	f023 0304 	bic.w	r3, r3, #4
 8005b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3c:	f7fe fc10 	bl	8004360 <HAL_GetTick>
 8005b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b42:	e00a      	b.n	8005b5a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b44:	f7fe fc0c 	bl	8004360 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e14e      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b5a:	4b59      	ldr	r3, [pc, #356]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0ee      	beq.n	8005b44 <HAL_RCC_OscConfig+0x5f0>
 8005b66:	e014      	b.n	8005b92 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b68:	f7fe fbfa 	bl	8004360 <HAL_GetTick>
 8005b6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b70:	f7fe fbf6 	bl	8004360 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e138      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b86:	4b4e      	ldr	r3, [pc, #312]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1ee      	bne.n	8005b70 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 812d 	beq.w	8005df6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b9c:	4b48      	ldr	r3, [pc, #288]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ba4:	2b18      	cmp	r3, #24
 8005ba6:	f000 80bd 	beq.w	8005d24 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	f040 809e 	bne.w	8005cf0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb4:	4b42      	ldr	r3, [pc, #264]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a41      	ldr	r2, [pc, #260]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc0:	f7fe fbce 	bl	8004360 <HAL_GetTick>
 8005bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bc6:	e008      	b.n	8005bda <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc8:	f7fe fbca 	bl	8004360 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d901      	bls.n	8005bda <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e10e      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bda:	4b39      	ldr	r3, [pc, #228]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1f0      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005be6:	4b36      	ldr	r3, [pc, #216]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bea:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <HAL_RCC_OscConfig+0x774>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bf6:	0112      	lsls	r2, r2, #4
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	4931      	ldr	r1, [pc, #196]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	628b      	str	r3, [r1, #40]	; 0x28
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	3b01      	subs	r3, #1
 8005c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	025b      	lsls	r3, r3, #9
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	061b      	lsls	r3, r3, #24
 8005c2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c30:	4923      	ldr	r1, [pc, #140]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c36:	4b22      	ldr	r3, [pc, #136]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3a:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c42:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c46:	4b21      	ldr	r3, [pc, #132]	; (8005ccc <HAL_RCC_OscConfig+0x778>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c4e:	00d2      	lsls	r2, r2, #3
 8005c50:	491b      	ldr	r1, [pc, #108]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c56:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	f023 020c 	bic.w	r2, r3, #12
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	4917      	ldr	r1, [pc, #92]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c68:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f023 0202 	bic.w	r2, r3, #2
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c74:	4912      	ldr	r1, [pc, #72]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c7a:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	4a10      	ldr	r2, [pc, #64]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c86:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	4a0d      	ldr	r2, [pc, #52]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005c9e:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005ca4:	f043 0301 	orr.w	r3, r3, #1
 8005ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a04      	ldr	r2, [pc, #16]	; (8005cc0 <HAL_RCC_OscConfig+0x76c>)
 8005cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb6:	f7fe fb53 	bl	8004360 <HAL_GetTick>
 8005cba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cbc:	e011      	b.n	8005ce2 <HAL_RCC_OscConfig+0x78e>
 8005cbe:	bf00      	nop
 8005cc0:	58024400 	.word	0x58024400
 8005cc4:	58024800 	.word	0x58024800
 8005cc8:	fffffc0c 	.word	0xfffffc0c
 8005ccc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd0:	f7fe fb46 	bl	8004360 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e08a      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ce2:	4b47      	ldr	r3, [pc, #284]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x77c>
 8005cee:	e082      	b.n	8005df6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf0:	4b43      	ldr	r3, [pc, #268]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a42      	ldr	r2, [pc, #264]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fe fb30 	bl	8004360 <HAL_GetTick>
 8005d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fe fb2c 	bl	8004360 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e070      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d16:	4b3a      	ldr	r3, [pc, #232]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x7b0>
 8005d22:	e068      	b.n	8005df6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d24:	4b36      	ldr	r3, [pc, #216]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d2a:	4b35      	ldr	r3, [pc, #212]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d031      	beq.n	8005d9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f003 0203 	and.w	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d12a      	bne.n	8005d9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d122      	bne.n	8005d9c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d11a      	bne.n	8005d9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	0a5b      	lsrs	r3, r3, #9
 8005d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d111      	bne.n	8005d9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	0c1b      	lsrs	r3, r3, #16
 8005d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d108      	bne.n	8005d9c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	0e1b      	lsrs	r3, r3, #24
 8005d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e02b      	b.n	8005df8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005da0:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	08db      	lsrs	r3, r3, #3
 8005da6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005daa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d01f      	beq.n	8005df6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005db6:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005dc2:	f7fe facd 	bl	8004360 <HAL_GetTick>
 8005dc6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005dc8:	bf00      	nop
 8005dca:	f7fe fac9 	bl	8004360 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d0f9      	beq.n	8005dca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <HAL_RCC_OscConfig+0x8b0>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005de2:	00d2      	lsls	r2, r2, #3
 8005de4:	4906      	ldr	r1, [pc, #24]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005dea:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <HAL_RCC_OscConfig+0x8ac>)
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3730      	adds	r7, #48	; 0x30
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	58024400 	.word	0x58024400
 8005e04:	ffff0007 	.word	0xffff0007

08005e08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e19c      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e1c:	4b8a      	ldr	r3, [pc, #552]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d910      	bls.n	8005e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2a:	4b87      	ldr	r3, [pc, #540]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 020f 	bic.w	r2, r3, #15
 8005e32:	4985      	ldr	r1, [pc, #532]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b83      	ldr	r3, [pc, #524]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e184      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	4b7b      	ldr	r3, [pc, #492]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d908      	bls.n	8005e7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e68:	4b78      	ldr	r3, [pc, #480]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	4975      	ldr	r1, [pc, #468]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d010      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	4b70      	ldr	r3, [pc, #448]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d908      	bls.n	8005ea8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e96:	4b6d      	ldr	r3, [pc, #436]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	496a      	ldr	r1, [pc, #424]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d010      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	4b64      	ldr	r3, [pc, #400]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d908      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ec4:	4b61      	ldr	r3, [pc, #388]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	495e      	ldr	r1, [pc, #376]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d010      	beq.n	8005f04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69da      	ldr	r2, [r3, #28]
 8005ee6:	4b59      	ldr	r3, [pc, #356]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d908      	bls.n	8005f04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ef2:	4b56      	ldr	r3, [pc, #344]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	4953      	ldr	r1, [pc, #332]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	4b4d      	ldr	r3, [pc, #308]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d908      	bls.n	8005f32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f20:	4b4a      	ldr	r3, [pc, #296]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f023 020f 	bic.w	r2, r3, #15
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4947      	ldr	r1, [pc, #284]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d055      	beq.n	8005fea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f3e:	4b43      	ldr	r3, [pc, #268]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	4940      	ldr	r1, [pc, #256]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d107      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f58:	4b3c      	ldr	r3, [pc, #240]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d121      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0f6      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d107      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f70:	4b36      	ldr	r3, [pc, #216]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d115      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0ea      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f88:	4b30      	ldr	r3, [pc, #192]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d109      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0de      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f98:	4b2c      	ldr	r3, [pc, #176]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0d6      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f023 0207 	bic.w	r2, r3, #7
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4925      	ldr	r1, [pc, #148]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fba:	f7fe f9d1 	bl	8004360 <HAL_GetTick>
 8005fbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc0:	e00a      	b.n	8005fd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc2:	f7fe f9cd 	bl	8004360 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e0be      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd8:	4b1c      	ldr	r3, [pc, #112]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d1eb      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d010      	beq.n	8006018 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	429a      	cmp	r2, r3
 8006004:	d208      	bcs.n	8006018 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006006:	4b11      	ldr	r3, [pc, #68]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f023 020f 	bic.w	r2, r3, #15
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	490e      	ldr	r1, [pc, #56]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8006014:	4313      	orrs	r3, r2
 8006016:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d214      	bcs.n	8006050 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f023 020f 	bic.w	r2, r3, #15
 800602e:	4906      	ldr	r1, [pc, #24]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	4313      	orrs	r3, r2
 8006034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006036:	4b04      	ldr	r3, [pc, #16]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d005      	beq.n	8006050 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e086      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
 8006048:	52002000 	.word	0x52002000
 800604c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d010      	beq.n	800607e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006068:	429a      	cmp	r2, r3
 800606a:	d208      	bcs.n	800607e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800606c:	4b3c      	ldr	r3, [pc, #240]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	4939      	ldr	r1, [pc, #228]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 800607a:	4313      	orrs	r3, r2
 800607c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d010      	beq.n	80060ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695a      	ldr	r2, [r3, #20]
 800608e:	4b34      	ldr	r3, [pc, #208]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006096:	429a      	cmp	r2, r3
 8006098:	d208      	bcs.n	80060ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800609a:	4b31      	ldr	r3, [pc, #196]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	492e      	ldr	r1, [pc, #184]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d010      	beq.n	80060da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	4b28      	ldr	r3, [pc, #160]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d208      	bcs.n	80060da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	4922      	ldr	r1, [pc, #136]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d010      	beq.n	8006108 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	4b1d      	ldr	r3, [pc, #116]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d208      	bcs.n	8006108 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060f6:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	4917      	ldr	r1, [pc, #92]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006104:	4313      	orrs	r3, r2
 8006106:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006108:	f000 f834 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 800610c:	4602      	mov	r2, r0
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	0a1b      	lsrs	r3, r3, #8
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	4912      	ldr	r1, [pc, #72]	; (8006164 <HAL_RCC_ClockConfig+0x35c>)
 800611a:	5ccb      	ldrb	r3, [r1, r3]
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
 8006124:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	4a0d      	ldr	r2, [pc, #52]	; (8006164 <HAL_RCC_ClockConfig+0x35c>)
 8006130:	5cd3      	ldrb	r3, [r2, r3]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
 800613c:	4a0a      	ldr	r2, [pc, #40]	; (8006168 <HAL_RCC_ClockConfig+0x360>)
 800613e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <HAL_RCC_ClockConfig+0x364>)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <HAL_RCC_ClockConfig+0x368>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe f8be 	bl	80042cc <HAL_InitTick>
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	58024400 	.word	0x58024400
 8006164:	080189c0 	.word	0x080189c0
 8006168:	240004f0 	.word	0x240004f0
 800616c:	240004ec 	.word	0x240004ec
 8006170:	240004f4 	.word	0x240004f4

08006174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006174:	b480      	push	{r7}
 8006176:	b089      	sub	sp, #36	; 0x24
 8006178:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800617a:	4bb3      	ldr	r3, [pc, #716]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006182:	2b18      	cmp	r3, #24
 8006184:	f200 8155 	bhi.w	8006432 <HAL_RCC_GetSysClockFreq+0x2be>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <HAL_RCC_GetSysClockFreq+0x1c>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061f5 	.word	0x080061f5
 8006194:	08006433 	.word	0x08006433
 8006198:	08006433 	.word	0x08006433
 800619c:	08006433 	.word	0x08006433
 80061a0:	08006433 	.word	0x08006433
 80061a4:	08006433 	.word	0x08006433
 80061a8:	08006433 	.word	0x08006433
 80061ac:	08006433 	.word	0x08006433
 80061b0:	0800621b 	.word	0x0800621b
 80061b4:	08006433 	.word	0x08006433
 80061b8:	08006433 	.word	0x08006433
 80061bc:	08006433 	.word	0x08006433
 80061c0:	08006433 	.word	0x08006433
 80061c4:	08006433 	.word	0x08006433
 80061c8:	08006433 	.word	0x08006433
 80061cc:	08006433 	.word	0x08006433
 80061d0:	08006221 	.word	0x08006221
 80061d4:	08006433 	.word	0x08006433
 80061d8:	08006433 	.word	0x08006433
 80061dc:	08006433 	.word	0x08006433
 80061e0:	08006433 	.word	0x08006433
 80061e4:	08006433 	.word	0x08006433
 80061e8:	08006433 	.word	0x08006433
 80061ec:	08006433 	.word	0x08006433
 80061f0:	08006227 	.word	0x08006227
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f4:	4b94      	ldr	r3, [pc, #592]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d009      	beq.n	8006214 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006200:	4b91      	ldr	r3, [pc, #580]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	4a90      	ldr	r2, [pc, #576]	; (800644c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
 8006210:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006212:	e111      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006214:	4b8d      	ldr	r3, [pc, #564]	; (800644c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006216:	61bb      	str	r3, [r7, #24]
      break;
 8006218:	e10e      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800621a:	4b8d      	ldr	r3, [pc, #564]	; (8006450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800621c:	61bb      	str	r3, [r7, #24]
      break;
 800621e:	e10b      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006220:	4b8c      	ldr	r3, [pc, #560]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006222:	61bb      	str	r3, [r7, #24]
      break;
 8006224:	e108      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006226:	4b88      	ldr	r3, [pc, #544]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006230:	4b85      	ldr	r3, [pc, #532]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800623c:	4b82      	ldr	r3, [pc, #520]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006246:	4b80      	ldr	r3, [pc, #512]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624a:	08db      	lsrs	r3, r3, #3
 800624c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80e1 	beq.w	800642c <HAL_RCC_GetSysClockFreq+0x2b8>
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b02      	cmp	r3, #2
 800626e:	f000 8083 	beq.w	8006378 <HAL_RCC_GetSysClockFreq+0x204>
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b02      	cmp	r3, #2
 8006276:	f200 80a1 	bhi.w	80063bc <HAL_RCC_GetSysClockFreq+0x248>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_RCC_GetSysClockFreq+0x114>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d056      	beq.n	8006334 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006286:	e099      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006288:	4b6f      	ldr	r3, [pc, #444]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d02d      	beq.n	80062f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006294:	4b6c      	ldr	r3, [pc, #432]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	08db      	lsrs	r3, r3, #3
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	4a6b      	ldr	r2, [pc, #428]	; (800644c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062a0:	fa22 f303 	lsr.w	r3, r2, r3
 80062a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062be:	4b62      	ldr	r3, [pc, #392]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80062d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80062ee:	e087      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800645c <HAL_RCC_GetSysClockFreq+0x2e8>
 80062fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006302:	4b51      	ldr	r3, [pc, #324]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006312:	ed97 6a02 	vldr	s12, [r7, #8]
 8006316:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800631a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006332:	e065      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006460 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006346:	4b40      	ldr	r3, [pc, #256]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006356:	ed97 6a02 	vldr	s12, [r7, #8]
 800635a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800635e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800636a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006376:	e043      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006382:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006464 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638a:	4b2f      	ldr	r3, [pc, #188]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639a:	ed97 6a02 	vldr	s12, [r7, #8]
 800639e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063ba:	e021      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006460 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ce:	4b1e      	ldr	r3, [pc, #120]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063de:	ed97 6a02 	vldr	s12, [r7, #8]
 80063e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006400:	4b11      	ldr	r3, [pc, #68]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	0a5b      	lsrs	r3, r3, #9
 8006406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640a:	3301      	adds	r3, #1
 800640c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006418:	edd7 6a07 	vldr	s13, [r7, #28]
 800641c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006424:	ee17 3a90 	vmov	r3, s15
 8006428:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800642a:	e005      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	61bb      	str	r3, [r7, #24]
      break;
 8006430:	e002      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006434:	61bb      	str	r3, [r7, #24]
      break;
 8006436:	bf00      	nop
  }

  return sysclockfreq;
 8006438:	69bb      	ldr	r3, [r7, #24]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3724      	adds	r7, #36	; 0x24
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
 800644c:	03d09000 	.word	0x03d09000
 8006450:	003d0900 	.word	0x003d0900
 8006454:	007a1200 	.word	0x007a1200
 8006458:	46000000 	.word	0x46000000
 800645c:	4c742400 	.word	0x4c742400
 8006460:	4a742400 	.word	0x4a742400
 8006464:	4af42400 	.word	0x4af42400

08006468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800646e:	f7ff fe81 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8006472:	4602      	mov	r2, r0
 8006474:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	490f      	ldr	r1, [pc, #60]	; (80064bc <HAL_RCC_GetHCLKFreq+0x54>)
 8006480:	5ccb      	ldrb	r3, [r1, r3]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	4a09      	ldr	r2, [pc, #36]	; (80064bc <HAL_RCC_GetHCLKFreq+0x54>)
 8006496:	5cd3      	ldrb	r3, [r2, r3]
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	fa22 f303 	lsr.w	r3, r2, r3
 80064a2:	4a07      	ldr	r2, [pc, #28]	; (80064c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80064a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064a6:	4a07      	ldr	r2, [pc, #28]	; (80064c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80064ac:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80064ae:	681b      	ldr	r3, [r3, #0]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	58024400 	.word	0x58024400
 80064bc:	080189c0 	.word	0x080189c0
 80064c0:	240004f0 	.word	0x240004f0
 80064c4:	240004ec 	.word	0x240004ec

080064c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064cc:	f7ff ffcc 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064d0:	4602      	mov	r2, r0
 80064d2:	4b06      	ldr	r3, [pc, #24]	; (80064ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	091b      	lsrs	r3, r3, #4
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	4904      	ldr	r1, [pc, #16]	; (80064f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064de:	5ccb      	ldrb	r3, [r1, r3]
 80064e0:	f003 031f 	and.w	r3, r3, #31
 80064e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	58024400 	.word	0x58024400
 80064f0:	080189c0 	.word	0x080189c0

080064f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80064f8:	f7ff ffb6 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064fc:	4602      	mov	r2, r0
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	4904      	ldr	r1, [pc, #16]	; (800651c <HAL_RCC_GetPCLK2Freq+0x28>)
 800650a:	5ccb      	ldrb	r3, [r1, r3]
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006514:	4618      	mov	r0, r3
 8006516:	bd80      	pop	{r7, pc}
 8006518:	58024400 	.word	0x58024400
 800651c:	080189c0 	.word	0x080189c0

08006520 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006524:	b0ca      	sub	sp, #296	; 0x128
 8006526:	af00      	add	r7, sp, #0
 8006528:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800652c:	2300      	movs	r3, #0
 800652e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006532:	2300      	movs	r3, #0
 8006534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006544:	2500      	movs	r5, #0
 8006546:	ea54 0305 	orrs.w	r3, r4, r5
 800654a:	d049      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800654c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006556:	d02f      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006558:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800655c:	d828      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800655e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006562:	d01a      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006568:	d822      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006572:	d007      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006574:	e01c      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006576:	4bb8      	ldr	r3, [pc, #736]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	4ab7      	ldr	r2, [pc, #732]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800657c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006582:	e01a      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006588:	3308      	adds	r3, #8
 800658a:	2102      	movs	r1, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f001 fc8f 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006598:	e00f      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659e:	3328      	adds	r3, #40	; 0x28
 80065a0:	2102      	movs	r1, #2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fd36 	bl	8008014 <RCCEx_PLL3_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065ae:	e004      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065b6:	e000      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80065b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065c2:	4ba5      	ldr	r3, [pc, #660]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065d0:	4aa1      	ldr	r2, [pc, #644]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065d2:	430b      	orrs	r3, r1
 80065d4:	6513      	str	r3, [r2, #80]	; 0x50
 80065d6:	e003      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80065ec:	f04f 0900 	mov.w	r9, #0
 80065f0:	ea58 0309 	orrs.w	r3, r8, r9
 80065f4:	d047      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d82a      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	0800661d 	.word	0x0800661d
 800660c:	0800662b 	.word	0x0800662b
 8006610:	08006641 	.word	0x08006641
 8006614:	0800665f 	.word	0x0800665f
 8006618:	0800665f 	.word	0x0800665f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800661c:	4b8e      	ldr	r3, [pc, #568]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	4a8d      	ldr	r2, [pc, #564]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006628:	e01a      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800662a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662e:	3308      	adds	r3, #8
 8006630:	2100      	movs	r1, #0
 8006632:	4618      	mov	r0, r3
 8006634:	f001 fc3c 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800663e:	e00f      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006644:	3328      	adds	r3, #40	; 0x28
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f001 fce3 	bl	8008014 <RCCEx_PLL3_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006654:	e004      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800665c:	e000      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800665e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006668:	4b7b      	ldr	r3, [pc, #492]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800666a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666c:	f023 0107 	bic.w	r1, r3, #7
 8006670:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006676:	4a78      	ldr	r2, [pc, #480]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006678:	430b      	orrs	r3, r1
 800667a:	6513      	str	r3, [r2, #80]	; 0x50
 800667c:	e003      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006692:	f04f 0b00 	mov.w	fp, #0
 8006696:	ea5a 030b 	orrs.w	r3, sl, fp
 800669a:	d04c      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a6:	d030      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80066a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ac:	d829      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066ae:	2bc0      	cmp	r3, #192	; 0xc0
 80066b0:	d02d      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80066b2:	2bc0      	cmp	r3, #192	; 0xc0
 80066b4:	d825      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066b6:	2b80      	cmp	r3, #128	; 0x80
 80066b8:	d018      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80066ba:	2b80      	cmp	r3, #128	; 0x80
 80066bc:	d821      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80066c2:	2b40      	cmp	r3, #64	; 0x40
 80066c4:	d007      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80066c6:	e01c      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c8:	4b63      	ldr	r3, [pc, #396]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	4a62      	ldr	r2, [pc, #392]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80066ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066d4:	e01c      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066da:	3308      	adds	r3, #8
 80066dc:	2100      	movs	r1, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 fbe6 	bl	8007eb0 <RCCEx_PLL2_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80066ea:	e011      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f0:	3328      	adds	r3, #40	; 0x28
 80066f2:	2100      	movs	r1, #0
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 fc8d 	bl	8008014 <RCCEx_PLL3_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006700:	e006      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006708:	e002      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800670a:	bf00      	nop
 800670c:	e000      	b.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800670e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10a      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006718:	4b4f      	ldr	r3, [pc, #316]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800671a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800671c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006720:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006726:	4a4c      	ldr	r2, [pc, #304]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006728:	430b      	orrs	r3, r1
 800672a:	6513      	str	r3, [r2, #80]	; 0x50
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006732:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800673a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006742:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006746:	2300      	movs	r3, #0
 8006748:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800674c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d053      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800675a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800675e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006762:	d035      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006764:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006768:	d82e      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800676a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800676e:	d031      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006770:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006774:	d828      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800677a:	d01a      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800677c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006780:	d822      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006786:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800678a:	d007      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800678c:	e01c      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800678e:	4b32      	ldr	r3, [pc, #200]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	4a31      	ldr	r2, [pc, #196]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800679a:	e01c      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800679c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a0:	3308      	adds	r3, #8
 80067a2:	2100      	movs	r1, #0
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 fb83 	bl	8007eb0 <RCCEx_PLL2_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067b0:	e011      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067b6:	3328      	adds	r3, #40	; 0x28
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 fc2a 	bl	8008014 <RCCEx_PLL3_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067c6:	e006      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067ce:	e002      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80067d0:	bf00      	nop
 80067d2:	e000      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80067d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10b      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80067de:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067ee:	4a1a      	ldr	r2, [pc, #104]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067f0:	430b      	orrs	r3, r1
 80067f2:	6593      	str	r3, [r2, #88]	; 0x58
 80067f4:	e003      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006806:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800680a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800680e:	2300      	movs	r3, #0
 8006810:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006814:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006818:	460b      	mov	r3, r1
 800681a:	4313      	orrs	r3, r2
 800681c:	d056      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800681e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006822:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800682a:	d038      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800682c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006830:	d831      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006832:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006836:	d034      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006838:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800683c:	d82b      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800683e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006842:	d01d      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006844:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006848:	d825      	bhi.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d006      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800684e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006852:	d00a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006854:	e01f      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006856:	bf00      	nop
 8006858:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800685c:	4ba2      	ldr	r3, [pc, #648]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4aa1      	ldr	r2, [pc, #644]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006866:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006868:	e01c      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686e:	3308      	adds	r3, #8
 8006870:	2100      	movs	r1, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f001 fb1c 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800687e:	e011      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006884:	3328      	adds	r3, #40	; 0x28
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fbc3 	bl	8008014 <RCCEx_PLL3_Config>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006894:	e006      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800689c:	e002      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800689e:	bf00      	nop
 80068a0:	e000      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80068a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10b      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80068ac:	4b8e      	ldr	r3, [pc, #568]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80068bc:	4a8a      	ldr	r2, [pc, #552]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80068be:	430b      	orrs	r3, r1
 80068c0:	6593      	str	r3, [r2, #88]	; 0x58
 80068c2:	e003      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80068cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80068d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80068dc:	2300      	movs	r3, #0
 80068de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80068e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80068e6:	460b      	mov	r3, r1
 80068e8:	4313      	orrs	r3, r2
 80068ea:	d03a      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80068ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f2:	2b30      	cmp	r3, #48	; 0x30
 80068f4:	d01f      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80068f6:	2b30      	cmp	r3, #48	; 0x30
 80068f8:	d819      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d00c      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80068fe:	2b20      	cmp	r3, #32
 8006900:	d815      	bhi.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006902:	2b00      	cmp	r3, #0
 8006904:	d019      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006906:	2b10      	cmp	r3, #16
 8006908:	d111      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800690a:	4b77      	ldr	r3, [pc, #476]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800690c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690e:	4a76      	ldr	r2, [pc, #472]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006914:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006916:	e011      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800691c:	3308      	adds	r3, #8
 800691e:	2102      	movs	r1, #2
 8006920:	4618      	mov	r0, r3
 8006922:	f001 fac5 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800692c:	e006      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006934:	e002      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006936:	bf00      	nop
 8006938:	e000      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800693a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800693c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006944:	4b68      	ldr	r3, [pc, #416]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006948:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006952:	4a65      	ldr	r2, [pc, #404]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006954:	430b      	orrs	r3, r1
 8006956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006958:	e003      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800695e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800696e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006978:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800697c:	460b      	mov	r3, r1
 800697e:	4313      	orrs	r3, r2
 8006980:	d051      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800698c:	d035      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800698e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006992:	d82e      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006994:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006998:	d031      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800699a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800699e:	d828      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a4:	d01a      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80069a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069aa:	d822      	bhi.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80069b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b4:	d007      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80069b6:	e01c      	b.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b8:	4b4b      	ldr	r3, [pc, #300]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	4a4a      	ldr	r2, [pc, #296]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80069be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069c4:	e01c      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ca:	3308      	adds	r3, #8
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 fa6e 	bl	8007eb0 <RCCEx_PLL2_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069da:	e011      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80069dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069e0:	3328      	adds	r3, #40	; 0x28
 80069e2:	2100      	movs	r1, #0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 fb15 	bl	8008014 <RCCEx_PLL3_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069f8:	e002      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80069fa:	bf00      	nop
 80069fc:	e000      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80069fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10a      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a08:	4b37      	ldr	r3, [pc, #220]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a16:	4a34      	ldr	r2, [pc, #208]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	6513      	str	r3, [r2, #80]	; 0x50
 8006a1c:	e003      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a36:	2300      	movs	r3, #0
 8006a38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006a3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006a40:	460b      	mov	r3, r1
 8006a42:	4313      	orrs	r3, r2
 8006a44:	d056      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a50:	d033      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a56:	d82c      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a5c:	d02f      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006a5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a62:	d826      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a68:	d02b      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006a6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a6e:	d820      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a74:	d012      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7a:	d81a      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d022      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a84:	d115      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 fa0e 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a9a:	e015      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aa0:	3328      	adds	r3, #40	; 0x28
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 fab5 	bl	8008014 <RCCEx_PLL3_Config>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ab8:	e006      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006aba:	bf00      	nop
 8006abc:	e004      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006abe:	bf00      	nop
 8006ac0:	e002      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ac2:	bf00      	nop
 8006ac4:	e000      	b.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10d      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ade:	4a02      	ldr	r2, [pc, #8]	; (8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ae0:	430b      	orrs	r3, r1
 8006ae2:	6513      	str	r3, [r2, #80]	; 0x50
 8006ae4:	e006      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ae6:	bf00      	nop
 8006ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006af0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b04:	2300      	movs	r3, #0
 8006b06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b0a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4313      	orrs	r3, r2
 8006b12:	d055      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b20:	d033      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b26:	d82c      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d02f      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b32:	d826      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b38:	d02b      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006b3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b3e:	d820      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b44:	d012      	beq.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b4a:	d81a      	bhi.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d022      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b54:	d115      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 f9a6 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006b64:	4603      	mov	r3, r0
 8006b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b6a:	e015      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b70:	3328      	adds	r3, #40	; 0x28
 8006b72:	2101      	movs	r1, #1
 8006b74:	4618      	mov	r0, r3
 8006b76:	f001 fa4d 	bl	8008014 <RCCEx_PLL3_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006b80:	e00a      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b88:	e006      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b8a:	bf00      	nop
 8006b8c:	e004      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b8e:	bf00      	nop
 8006b90:	e002      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b92:	bf00      	nop
 8006b94:	e000      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10b      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006ba0:	4ba3      	ldr	r3, [pc, #652]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ba4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bb0:	4a9f      	ldr	r2, [pc, #636]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8006bb6:	e003      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006bda:	460b      	mov	r3, r1
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	d037      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bea:	d00e      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bf0:	d816      	bhi.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d018      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bfa:	d111      	bne.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bfc:	4b8c      	ldr	r3, [pc, #560]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	4a8b      	ldr	r2, [pc, #556]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c08:	e00f      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c0e:	3308      	adds	r3, #8
 8006c10:	2101      	movs	r1, #1
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 f94c 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006c1e:	e004      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c26:	e000      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10a      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c32:	4b7f      	ldr	r3, [pc, #508]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c36:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	4a7b      	ldr	r2, [pc, #492]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c42:	430b      	orrs	r3, r1
 8006c44:	6513      	str	r3, [r2, #80]	; 0x50
 8006c46:	e003      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c60:	2300      	movs	r3, #0
 8006c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	d039      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c76:	2b03      	cmp	r3, #3
 8006c78:	d81c      	bhi.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006cbd 	.word	0x08006cbd
 8006c84:	08006c91 	.word	0x08006c91
 8006c88:	08006c9f 	.word	0x08006c9f
 8006c8c:	08006cbd 	.word	0x08006cbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c90:	4b67      	ldr	r3, [pc, #412]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	4a66      	ldr	r2, [pc, #408]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c9c:	e00f      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	2102      	movs	r1, #2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 f902 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006cac:	4603      	mov	r3, r0
 8006cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006cb2:	e004      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cba:	e000      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d10a      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cc6:	4b5a      	ldr	r3, [pc, #360]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cca:	f023 0103 	bic.w	r1, r3, #3
 8006cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd4:	4a56      	ldr	r2, [pc, #344]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006cd6:	430b      	orrs	r3, r1
 8006cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cda:	e003      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ce0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f000 809f 	beq.w	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d06:	4b4b      	ldr	r3, [pc, #300]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a4a      	ldr	r2, [pc, #296]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d12:	f7fd fb25 	bl	8004360 <HAL_GetTick>
 8006d16:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d1a:	e00b      	b.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d1c:	f7fd fb20 	bl	8004360 <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b64      	cmp	r3, #100	; 0x64
 8006d2a:	d903      	bls.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d32:	e005      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d34:	4b3f      	ldr	r3, [pc, #252]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ed      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006d40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d179      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d48:	4b39      	ldr	r3, [pc, #228]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d54:	4053      	eors	r3, r2
 8006d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d015      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d5e:	4b34      	ldr	r3, [pc, #208]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d6a:	4b31      	ldr	r3, [pc, #196]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6e:	4a30      	ldr	r2, [pc, #192]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d76:	4b2e      	ldr	r3, [pc, #184]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	4a2d      	ldr	r2, [pc, #180]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d82:	4a2b      	ldr	r2, [pc, #172]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006d88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d96:	d118      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d98:	f7fd fae2 	bl	8004360 <HAL_GetTick>
 8006d9c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006da0:	e00d      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006da2:	f7fd fadd 	bl	8004360 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006dac:	1ad2      	subs	r2, r2, r3
 8006dae:	f241 3388 	movw	r3, #5000	; 0x1388
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d903      	bls.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006dbc:	e005      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dbe:	4b1c      	ldr	r3, [pc, #112]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d0eb      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d129      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de2:	d10e      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006de4:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006df4:	091a      	lsrs	r2, r3, #4
 8006df6:	4b10      	ldr	r3, [pc, #64]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	4a0d      	ldr	r2, [pc, #52]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dfc:	430b      	orrs	r3, r1
 8006dfe:	6113      	str	r3, [r2, #16]
 8006e00:	e005      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006e02:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	4a0a      	ldr	r2, [pc, #40]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e0c:	6113      	str	r3, [r2, #16]
 8006e0e:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e1e:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e20:	430b      	orrs	r3, r1
 8006e22:	6713      	str	r3, [r2, #112]	; 0x70
 8006e24:	e00e      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006e2e:	e009      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006e30:	58024400 	.word	0x58024400
 8006e34:	58024800 	.word	0x58024800
 8006e38:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	f002 0301 	and.w	r3, r2, #1
 8006e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e54:	2300      	movs	r3, #0
 8006e56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f000 8089 	beq.w	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e6c:	2b28      	cmp	r3, #40	; 0x28
 8006e6e:	d86b      	bhi.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006f51 	.word	0x08006f51
 8006e7c:	08006f49 	.word	0x08006f49
 8006e80:	08006f49 	.word	0x08006f49
 8006e84:	08006f49 	.word	0x08006f49
 8006e88:	08006f49 	.word	0x08006f49
 8006e8c:	08006f49 	.word	0x08006f49
 8006e90:	08006f49 	.word	0x08006f49
 8006e94:	08006f49 	.word	0x08006f49
 8006e98:	08006f1d 	.word	0x08006f1d
 8006e9c:	08006f49 	.word	0x08006f49
 8006ea0:	08006f49 	.word	0x08006f49
 8006ea4:	08006f49 	.word	0x08006f49
 8006ea8:	08006f49 	.word	0x08006f49
 8006eac:	08006f49 	.word	0x08006f49
 8006eb0:	08006f49 	.word	0x08006f49
 8006eb4:	08006f49 	.word	0x08006f49
 8006eb8:	08006f33 	.word	0x08006f33
 8006ebc:	08006f49 	.word	0x08006f49
 8006ec0:	08006f49 	.word	0x08006f49
 8006ec4:	08006f49 	.word	0x08006f49
 8006ec8:	08006f49 	.word	0x08006f49
 8006ecc:	08006f49 	.word	0x08006f49
 8006ed0:	08006f49 	.word	0x08006f49
 8006ed4:	08006f49 	.word	0x08006f49
 8006ed8:	08006f51 	.word	0x08006f51
 8006edc:	08006f49 	.word	0x08006f49
 8006ee0:	08006f49 	.word	0x08006f49
 8006ee4:	08006f49 	.word	0x08006f49
 8006ee8:	08006f49 	.word	0x08006f49
 8006eec:	08006f49 	.word	0x08006f49
 8006ef0:	08006f49 	.word	0x08006f49
 8006ef4:	08006f49 	.word	0x08006f49
 8006ef8:	08006f51 	.word	0x08006f51
 8006efc:	08006f49 	.word	0x08006f49
 8006f00:	08006f49 	.word	0x08006f49
 8006f04:	08006f49 	.word	0x08006f49
 8006f08:	08006f49 	.word	0x08006f49
 8006f0c:	08006f49 	.word	0x08006f49
 8006f10:	08006f49 	.word	0x08006f49
 8006f14:	08006f49 	.word	0x08006f49
 8006f18:	08006f51 	.word	0x08006f51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f20:	3308      	adds	r3, #8
 8006f22:	2101      	movs	r1, #1
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 ffc3 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f30:	e00f      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f36:	3328      	adds	r3, #40	; 0x28
 8006f38:	2101      	movs	r1, #1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f001 f86a 	bl	8008014 <RCCEx_PLL3_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006f46:	e004      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f4e:	e000      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f5a:	4bbf      	ldr	r3, [pc, #764]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f68:	4abb      	ldr	r2, [pc, #748]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	6553      	str	r3, [r2, #84]	; 0x54
 8006f6e:	e003      	b.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f002 0302 	and.w	r3, r2, #2
 8006f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006f8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006f92:	460b      	mov	r3, r1
 8006f94:	4313      	orrs	r3, r2
 8006f96:	d041      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f9e:	2b05      	cmp	r3, #5
 8006fa0:	d824      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006ff5 	.word	0x08006ff5
 8006fac:	08006fc1 	.word	0x08006fc1
 8006fb0:	08006fd7 	.word	0x08006fd7
 8006fb4:	08006ff5 	.word	0x08006ff5
 8006fb8:	08006ff5 	.word	0x08006ff5
 8006fbc:	08006ff5 	.word	0x08006ff5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 ff71 	bl	8007eb0 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fd4:	e00f      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fda:	3328      	adds	r3, #40	; 0x28
 8006fdc:	2101      	movs	r1, #1
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 f818 	bl	8008014 <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006fea:	e004      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ffe:	4b96      	ldr	r3, [pc, #600]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007002:	f023 0107 	bic.w	r1, r3, #7
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800700c:	4a92      	ldr	r2, [pc, #584]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800700e:	430b      	orrs	r3, r1
 8007010:	6553      	str	r3, [r2, #84]	; 0x54
 8007012:	e003      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007018:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800701c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f002 0304 	and.w	r3, r2, #4
 8007028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800702c:	2300      	movs	r3, #0
 800702e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007032:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007036:	460b      	mov	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	d044      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800703c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007044:	2b05      	cmp	r3, #5
 8007046:	d825      	bhi.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007048:	a201      	add	r2, pc, #4	; (adr r2, 8007050 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800704a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704e:	bf00      	nop
 8007050:	0800709d 	.word	0x0800709d
 8007054:	08007069 	.word	0x08007069
 8007058:	0800707f 	.word	0x0800707f
 800705c:	0800709d 	.word	0x0800709d
 8007060:	0800709d 	.word	0x0800709d
 8007064:	0800709d 	.word	0x0800709d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800706c:	3308      	adds	r3, #8
 800706e:	2101      	movs	r1, #1
 8007070:	4618      	mov	r0, r3
 8007072:	f000 ff1d 	bl	8007eb0 <RCCEx_PLL2_Config>
 8007076:	4603      	mov	r3, r0
 8007078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800707c:	e00f      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800707e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007082:	3328      	adds	r3, #40	; 0x28
 8007084:	2101      	movs	r1, #1
 8007086:	4618      	mov	r0, r3
 8007088:	f000 ffc4 	bl	8008014 <RCCEx_PLL3_Config>
 800708c:	4603      	mov	r3, r0
 800708e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007092:	e004      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800709a:	e000      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800709c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800709e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070a6:	4b6c      	ldr	r3, [pc, #432]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070aa:	f023 0107 	bic.w	r1, r3, #7
 80070ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b6:	4a68      	ldr	r2, [pc, #416]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80070b8:	430b      	orrs	r3, r1
 80070ba:	6593      	str	r3, [r2, #88]	; 0x58
 80070bc:	e003      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f002 0320 	and.w	r3, r2, #32
 80070d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070d6:	2300      	movs	r3, #0
 80070d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80070dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070e0:	460b      	mov	r3, r1
 80070e2:	4313      	orrs	r3, r2
 80070e4:	d055      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80070e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070f2:	d033      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80070f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070f8:	d82c      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80070fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fe:	d02f      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007104:	d826      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007106:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800710a:	d02b      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800710c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007110:	d820      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007116:	d012      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800711c:	d81a      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d022      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007126:	d115      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800712c:	3308      	adds	r3, #8
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f000 febd 	bl	8007eb0 <RCCEx_PLL2_Config>
 8007136:	4603      	mov	r3, r0
 8007138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800713c:	e015      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800713e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007142:	3328      	adds	r3, #40	; 0x28
 8007144:	2102      	movs	r1, #2
 8007146:	4618      	mov	r0, r3
 8007148:	f000 ff64 	bl	8008014 <RCCEx_PLL3_Config>
 800714c:	4603      	mov	r3, r0
 800714e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007152:	e00a      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800715a:	e006      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800715c:	bf00      	nop
 800715e:	e004      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007160:	bf00      	nop
 8007162:	e002      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007164:	bf00      	nop
 8007166:	e000      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800716a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10b      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007172:	4b39      	ldr	r3, [pc, #228]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007176:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800717a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007182:	4a35      	ldr	r2, [pc, #212]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007184:	430b      	orrs	r3, r1
 8007186:	6553      	str	r3, [r2, #84]	; 0x54
 8007188:	e003      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800718a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800718e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800719e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071a2:	2300      	movs	r3, #0
 80071a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80071a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4313      	orrs	r3, r2
 80071b0:	d058      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80071b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80071be:	d033      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80071c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80071c4:	d82c      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ca:	d02f      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80071cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d0:	d826      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071d6:	d02b      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80071d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80071dc:	d820      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e2:	d012      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80071e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071e8:	d81a      	bhi.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d022      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80071ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f2:	d115      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f8:	3308      	adds	r3, #8
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 fe57 	bl	8007eb0 <RCCEx_PLL2_Config>
 8007202:	4603      	mov	r3, r0
 8007204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007208:	e015      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720e:	3328      	adds	r3, #40	; 0x28
 8007210:	2102      	movs	r1, #2
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fefe 	bl	8008014 <RCCEx_PLL3_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800721e:	e00a      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007226:	e006      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007228:	bf00      	nop
 800722a:	e004      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800722c:	bf00      	nop
 800722e:	e002      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007230:	bf00      	nop
 8007232:	e000      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10e      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800723e:	4b06      	ldr	r3, [pc, #24]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800724a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800724e:	4a02      	ldr	r2, [pc, #8]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007250:	430b      	orrs	r3, r1
 8007252:	6593      	str	r3, [r2, #88]	; 0x58
 8007254:	e006      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007256:	bf00      	nop
 8007258:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800725c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007260:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007270:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007274:	2300      	movs	r3, #0
 8007276:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800727a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800727e:	460b      	mov	r3, r1
 8007280:	4313      	orrs	r3, r2
 8007282:	d055      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800728c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007290:	d033      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007292:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007296:	d82c      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800729c:	d02f      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072a2:	d826      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072a8:	d02b      	beq.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80072aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80072ae:	d820      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072b4:	d012      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80072b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072ba:	d81a      	bhi.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d022      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80072c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c4:	d115      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ca:	3308      	adds	r3, #8
 80072cc:	2100      	movs	r1, #0
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fdee 	bl	8007eb0 <RCCEx_PLL2_Config>
 80072d4:	4603      	mov	r3, r0
 80072d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072da:	e015      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072e0:	3328      	adds	r3, #40	; 0x28
 80072e2:	2102      	movs	r1, #2
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fe95 	bl	8008014 <RCCEx_PLL3_Config>
 80072ea:	4603      	mov	r3, r0
 80072ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80072f0:	e00a      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80072f8:	e006      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072fa:	bf00      	nop
 80072fc:	e004      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80072fe:	bf00      	nop
 8007300:	e002      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007302:	bf00      	nop
 8007304:	e000      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800730c:	2b00      	cmp	r3, #0
 800730e:	d10b      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007310:	4ba1      	ldr	r3, [pc, #644]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007314:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007320:	4a9d      	ldr	r2, [pc, #628]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007322:	430b      	orrs	r3, r1
 8007324:	6593      	str	r3, [r2, #88]	; 0x58
 8007326:	e003      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800732c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007338:	f002 0308 	and.w	r3, r2, #8
 800733c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007340:	2300      	movs	r3, #0
 8007342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007346:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800734a:	460b      	mov	r3, r1
 800734c:	4313      	orrs	r3, r2
 800734e:	d01e      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735c:	d10c      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007362:	3328      	adds	r3, #40	; 0x28
 8007364:	2102      	movs	r1, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f000 fe54 	bl	8008014 <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007378:	4b87      	ldr	r3, [pc, #540]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800737a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800737c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007388:	4a83      	ldr	r2, [pc, #524]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800738a:	430b      	orrs	r3, r1
 800738c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800738e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f002 0310 	and.w	r3, r2, #16
 800739a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800739e:	2300      	movs	r3, #0
 80073a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80073a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80073a8:	460b      	mov	r3, r1
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d01e      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80073ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ba:	d10c      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80073bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073c0:	3328      	adds	r3, #40	; 0x28
 80073c2:	2102      	movs	r1, #2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 fe25 	bl	8008014 <RCCEx_PLL3_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073d6:	4b70      	ldr	r3, [pc, #448]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073e6:	4a6c      	ldr	r2, [pc, #432]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073e8:	430b      	orrs	r3, r1
 80073ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80073f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073fc:	2300      	movs	r3, #0
 80073fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007402:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007406:	460b      	mov	r3, r1
 8007408:	4313      	orrs	r3, r2
 800740a:	d03e      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800740c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007418:	d022      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800741a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800741e:	d81b      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007428:	d00b      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800742a:	e015      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800742c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007430:	3308      	adds	r3, #8
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fd3b 	bl	8007eb0 <RCCEx_PLL2_Config>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007440:	e00f      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007446:	3328      	adds	r3, #40	; 0x28
 8007448:	2102      	movs	r1, #2
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fde2 	bl	8008014 <RCCEx_PLL3_Config>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007456:	e004      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800745e:	e000      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800746a:	4b4b      	ldr	r3, [pc, #300]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007476:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800747a:	4a47      	ldr	r2, [pc, #284]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800747c:	430b      	orrs	r3, r1
 800747e:	6593      	str	r3, [r2, #88]	; 0x58
 8007480:	e003      	b.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800748a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007496:	67bb      	str	r3, [r7, #120]	; 0x78
 8007498:	2300      	movs	r3, #0
 800749a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800749c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80074a0:	460b      	mov	r3, r1
 80074a2:	4313      	orrs	r3, r2
 80074a4:	d03b      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80074a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074b2:	d01f      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80074b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074b8:	d818      	bhi.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80074ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074be:	d003      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80074c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074c4:	d007      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80074c6:	e011      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074c8:	4b33      	ldr	r3, [pc, #204]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a32      	ldr	r2, [pc, #200]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80074d4:	e00f      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074da:	3328      	adds	r3, #40	; 0x28
 80074dc:	2101      	movs	r1, #1
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fd98 	bl	8008014 <RCCEx_PLL3_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80074ea:	e004      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80074f2:	e000      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80074f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074fe:	4b26      	ldr	r3, [pc, #152]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007502:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750e:	4a22      	ldr	r2, [pc, #136]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007510:	430b      	orrs	r3, r1
 8007512:	6553      	str	r3, [r2, #84]	; 0x54
 8007514:	e003      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800751a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800751e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800752a:	673b      	str	r3, [r7, #112]	; 0x70
 800752c:	2300      	movs	r3, #0
 800752e:	677b      	str	r3, [r7, #116]	; 0x74
 8007530:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007534:	460b      	mov	r3, r1
 8007536:	4313      	orrs	r3, r2
 8007538:	d034      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800753a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007548:	d007      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800754a:	e011      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800754c:	4b12      	ldr	r3, [pc, #72]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	4a11      	ldr	r2, [pc, #68]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007558:	e00e      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800755a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800755e:	3308      	adds	r3, #8
 8007560:	2102      	movs	r1, #2
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fca4 	bl	8007eb0 <RCCEx_PLL2_Config>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800756e:	e003      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007578:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800757c:	2b00      	cmp	r3, #0
 800757e:	d10d      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800758c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758e:	4a02      	ldr	r2, [pc, #8]	; (8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007590:	430b      	orrs	r3, r1
 8007592:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007594:	e006      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007596:	bf00      	nop
 8007598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80075a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80075b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80075b2:	2300      	movs	r3, #0
 80075b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80075ba:	460b      	mov	r3, r1
 80075bc:	4313      	orrs	r3, r2
 80075be:	d00c      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075c4:	3328      	adds	r3, #40	; 0x28
 80075c6:	2102      	movs	r1, #2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fd23 	bl	8008014 <RCCEx_PLL3_Config>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80075e6:	663b      	str	r3, [r7, #96]	; 0x60
 80075e8:	2300      	movs	r3, #0
 80075ea:	667b      	str	r3, [r7, #100]	; 0x64
 80075ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80075f0:	460b      	mov	r3, r1
 80075f2:	4313      	orrs	r3, r2
 80075f4:	d038      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80075f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007602:	d018      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007608:	d811      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800760a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760e:	d014      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007614:	d80b      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007616:	2b00      	cmp	r3, #0
 8007618:	d011      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800761a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800761e:	d106      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007620:	4bc3      	ldr	r3, [pc, #780]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	4ac2      	ldr	r2, [pc, #776]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800762a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800762c:	e008      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007634:	e004      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007636:	bf00      	nop
 8007638:	e002      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800763a:	bf00      	nop
 800763c:	e000      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800763e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007648:	4bb9      	ldr	r3, [pc, #740]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800764a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007654:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007658:	4ab5      	ldr	r2, [pc, #724]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800765a:	430b      	orrs	r3, r1
 800765c:	6553      	str	r3, [r2, #84]	; 0x54
 800765e:	e003      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007664:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007674:	65bb      	str	r3, [r7, #88]	; 0x58
 8007676:	2300      	movs	r3, #0
 8007678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800767a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800767e:	460b      	mov	r3, r1
 8007680:	4313      	orrs	r3, r2
 8007682:	d009      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007684:	4baa      	ldr	r3, [pc, #680]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007688:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800768c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007692:	4aa7      	ldr	r2, [pc, #668]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007694:	430b      	orrs	r3, r1
 8007696:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80076a4:	653b      	str	r3, [r7, #80]	; 0x50
 80076a6:	2300      	movs	r3, #0
 80076a8:	657b      	str	r3, [r7, #84]	; 0x54
 80076aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80076ae:	460b      	mov	r3, r1
 80076b0:	4313      	orrs	r3, r2
 80076b2:	d00a      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80076b4:	4b9e      	ldr	r3, [pc, #632]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80076bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80076c4:	4a9a      	ldr	r2, [pc, #616]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076c6:	430b      	orrs	r3, r1
 80076c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80076d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80076d8:	2300      	movs	r3, #0
 80076da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80076e0:	460b      	mov	r3, r1
 80076e2:	4313      	orrs	r3, r2
 80076e4:	d009      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80076e6:	4b92      	ldr	r3, [pc, #584]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f4:	4a8e      	ldr	r2, [pc, #568]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80076f6:	430b      	orrs	r3, r1
 80076f8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80076fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007706:	643b      	str	r3, [r7, #64]	; 0x40
 8007708:	2300      	movs	r3, #0
 800770a:	647b      	str	r3, [r7, #68]	; 0x44
 800770c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007710:	460b      	mov	r3, r1
 8007712:	4313      	orrs	r3, r2
 8007714:	d00e      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007716:	4b86      	ldr	r3, [pc, #536]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	4a85      	ldr	r2, [pc, #532]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800771c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007720:	6113      	str	r3, [r2, #16]
 8007722:	4b83      	ldr	r3, [pc, #524]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007724:	6919      	ldr	r1, [r3, #16]
 8007726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800772a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800772e:	4a80      	ldr	r2, [pc, #512]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007730:	430b      	orrs	r3, r1
 8007732:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007740:	63bb      	str	r3, [r7, #56]	; 0x38
 8007742:	2300      	movs	r3, #0
 8007744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007746:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800774a:	460b      	mov	r3, r1
 800774c:	4313      	orrs	r3, r2
 800774e:	d009      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007750:	4b77      	ldr	r3, [pc, #476]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007754:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	4a74      	ldr	r2, [pc, #464]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007760:	430b      	orrs	r3, r1
 8007762:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007770:	633b      	str	r3, [r7, #48]	; 0x30
 8007772:	2300      	movs	r3, #0
 8007774:	637b      	str	r3, [r7, #52]	; 0x34
 8007776:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800777a:	460b      	mov	r3, r1
 800777c:	4313      	orrs	r3, r2
 800777e:	d00a      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007780:	4b6b      	ldr	r3, [pc, #428]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007784:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800778c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007790:	4a67      	ldr	r2, [pc, #412]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007792:	430b      	orrs	r3, r1
 8007794:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	2100      	movs	r1, #0
 80077a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80077ac:	460b      	mov	r3, r1
 80077ae:	4313      	orrs	r3, r2
 80077b0:	d011      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077b6:	3308      	adds	r3, #8
 80077b8:	2100      	movs	r1, #0
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fb78 	bl	8007eb0 <RCCEx_PLL2_Config>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80077c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077de:	2100      	movs	r1, #0
 80077e0:	6239      	str	r1, [r7, #32]
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	627b      	str	r3, [r7, #36]	; 0x24
 80077e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80077ec:	460b      	mov	r3, r1
 80077ee:	4313      	orrs	r3, r2
 80077f0:	d011      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80077f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f6:	3308      	adds	r3, #8
 80077f8:	2101      	movs	r1, #1
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fb58 	bl	8007eb0 <RCCEx_PLL2_Config>
 8007800:	4603      	mov	r3, r0
 8007802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800780e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007812:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	2100      	movs	r1, #0
 8007820:	61b9      	str	r1, [r7, #24]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	61fb      	str	r3, [r7, #28]
 8007828:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800782c:	460b      	mov	r3, r1
 800782e:	4313      	orrs	r3, r2
 8007830:	d011      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007836:	3308      	adds	r3, #8
 8007838:	2102      	movs	r1, #2
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fb38 	bl	8007eb0 <RCCEx_PLL2_Config>
 8007840:	4603      	mov	r3, r0
 8007842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007846:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800784e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007852:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	2100      	movs	r1, #0
 8007860:	6139      	str	r1, [r7, #16]
 8007862:	f003 0308 	and.w	r3, r3, #8
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800786c:	460b      	mov	r3, r1
 800786e:	4313      	orrs	r3, r2
 8007870:	d011      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007876:	3328      	adds	r3, #40	; 0x28
 8007878:	2100      	movs	r1, #0
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fbca 	bl	8008014 <RCCEx_PLL3_Config>
 8007880:	4603      	mov	r3, r0
 8007882:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8007886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007892:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789e:	2100      	movs	r1, #0
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	f003 0310 	and.w	r3, r3, #16
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80078ac:	460b      	mov	r3, r1
 80078ae:	4313      	orrs	r3, r2
 80078b0:	d011      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b6:	3328      	adds	r3, #40	; 0x28
 80078b8:	2101      	movs	r1, #1
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fbaa 	bl	8008014 <RCCEx_PLL3_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80078c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	2100      	movs	r1, #0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	607b      	str	r3, [r7, #4]
 80078e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80078ec:	460b      	mov	r3, r1
 80078ee:	4313      	orrs	r3, r2
 80078f0:	d011      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f6:	3328      	adds	r3, #40	; 0x28
 80078f8:	2102      	movs	r1, #2
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fb8a 	bl	8008014 <RCCEx_PLL3_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007906:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007912:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007916:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800791a:	2b00      	cmp	r3, #0
 800791c:	d101      	bne.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	e000      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
}
 8007924:	4618      	mov	r0, r3
 8007926:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800792a:	46bd      	mov	sp, r7
 800792c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007930:	58024400 	.word	0x58024400

08007934 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007938:	f7fe fd96 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 800793c:	4602      	mov	r2, r0
 800793e:	4b06      	ldr	r3, [pc, #24]	; (8007958 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	091b      	lsrs	r3, r3, #4
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	4904      	ldr	r1, [pc, #16]	; (800795c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800794a:	5ccb      	ldrb	r3, [r1, r3]
 800794c:	f003 031f 	and.w	r3, r3, #31
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007954:	4618      	mov	r0, r3
 8007956:	bd80      	pop	{r7, pc}
 8007958:	58024400 	.word	0x58024400
 800795c:	080189c0 	.word	0x080189c0

08007960 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007960:	b480      	push	{r7}
 8007962:	b089      	sub	sp, #36	; 0x24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007968:	4ba1      	ldr	r3, [pc, #644]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800796a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796c:	f003 0303 	and.w	r3, r3, #3
 8007970:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007972:	4b9f      	ldr	r3, [pc, #636]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	0b1b      	lsrs	r3, r3, #12
 8007978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800797c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800797e:	4b9c      	ldr	r3, [pc, #624]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	091b      	lsrs	r3, r3, #4
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800798a:	4b99      	ldr	r3, [pc, #612]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800798c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798e:	08db      	lsrs	r3, r3, #3
 8007990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	fb02 f303 	mul.w	r3, r2, r3
 800799a:	ee07 3a90 	vmov	s15, r3
 800799e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8111 	beq.w	8007bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	f000 8083 	beq.w	8007abc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	f200 80a1 	bhi.w	8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d003      	beq.n	80079cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d056      	beq.n	8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80079ca:	e099      	b.n	8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079cc:	4b88      	ldr	r3, [pc, #544]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d02d      	beq.n	8007a34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079d8:	4b85      	ldr	r3, [pc, #532]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	08db      	lsrs	r3, r3, #3
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	4a84      	ldr	r2, [pc, #528]	; (8007bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
 80079e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	ee07 3a90 	vmov	s15, r3
 80079f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	ee07 3a90 	vmov	s15, r3
 80079fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a02:	4b7b      	ldr	r3, [pc, #492]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007a32:	e087      	b.n	8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007bfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a46:	4b6a      	ldr	r3, [pc, #424]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a76:	e065      	b.n	8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8a:	4b59      	ldr	r3, [pc, #356]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007aba:	e043      	b.n	8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ace:	4b48      	ldr	r3, [pc, #288]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007afe:	e021      	b.n	8007b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b12:	4b37      	ldr	r3, [pc, #220]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007b44:	4b2a      	ldr	r3, [pc, #168]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	0a5b      	lsrs	r3, r3, #9
 8007b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b6a:	ee17 2a90 	vmov	r2, s15
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007b72:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	0c1b      	lsrs	r3, r3, #16
 8007b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7c:	ee07 3a90 	vmov	s15, r3
 8007b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b98:	ee17 2a90 	vmov	r2, s15
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007ba0:	4b13      	ldr	r3, [pc, #76]	; (8007bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	0e1b      	lsrs	r3, r3, #24
 8007ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc6:	ee17 2a90 	vmov	r2, s15
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007bce:	e008      	b.n	8007be2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	609a      	str	r2, [r3, #8]
}
 8007be2:	bf00      	nop
 8007be4:	3724      	adds	r7, #36	; 0x24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	58024400 	.word	0x58024400
 8007bf4:	03d09000 	.word	0x03d09000
 8007bf8:	46000000 	.word	0x46000000
 8007bfc:	4c742400 	.word	0x4c742400
 8007c00:	4a742400 	.word	0x4a742400
 8007c04:	4af42400 	.word	0x4af42400

08007c08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b089      	sub	sp, #36	; 0x24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c10:	4ba1      	ldr	r3, [pc, #644]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c14:	f003 0303 	and.w	r3, r3, #3
 8007c18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007c1a:	4b9f      	ldr	r3, [pc, #636]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1e:	0d1b      	lsrs	r3, r3, #20
 8007c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c26:	4b9c      	ldr	r3, [pc, #624]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	0a1b      	lsrs	r3, r3, #8
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007c32:	4b99      	ldr	r3, [pc, #612]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c36:	08db      	lsrs	r3, r3, #3
 8007c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	fb02 f303 	mul.w	r3, r2, r3
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8111 	beq.w	8007e78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	f000 8083 	beq.w	8007d64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	f200 80a1 	bhi.w	8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d056      	beq.n	8007d20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007c72:	e099      	b.n	8007da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c74:	4b88      	ldr	r3, [pc, #544]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d02d      	beq.n	8007cdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c80:	4b85      	ldr	r3, [pc, #532]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	08db      	lsrs	r3, r3, #3
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	4a84      	ldr	r2, [pc, #528]	; (8007e9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007caa:	4b7b      	ldr	r3, [pc, #492]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007cda:	e087      	b.n	8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cee:	4b6a      	ldr	r3, [pc, #424]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d1e:	e065      	b.n	8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	ee07 3a90 	vmov	s15, r3
 8007d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d32:	4b59      	ldr	r3, [pc, #356]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3a:	ee07 3a90 	vmov	s15, r3
 8007d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d62:	e043      	b.n	8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	ee07 3a90 	vmov	s15, r3
 8007d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d76:	4b48      	ldr	r3, [pc, #288]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d7e:	ee07 3a90 	vmov	s15, r3
 8007d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007da6:	e021      	b.n	8007dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	ee07 3a90 	vmov	s15, r3
 8007dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dba:	4b37      	ldr	r3, [pc, #220]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc2:	ee07 3a90 	vmov	s15, r3
 8007dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dce:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007dec:	4b2a      	ldr	r3, [pc, #168]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df0:	0a5b      	lsrs	r3, r3, #9
 8007df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df6:	ee07 3a90 	vmov	s15, r3
 8007dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e12:	ee17 2a90 	vmov	r2, s15
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007e1a:	4b1f      	ldr	r3, [pc, #124]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e1e:	0c1b      	lsrs	r3, r3, #16
 8007e20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e24:	ee07 3a90 	vmov	s15, r3
 8007e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e40:	ee17 2a90 	vmov	r2, s15
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007e48:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	0e1b      	lsrs	r3, r3, #24
 8007e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e6e:	ee17 2a90 	vmov	r2, s15
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007e76:	e008      	b.n	8007e8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	609a      	str	r2, [r3, #8]
}
 8007e8a:	bf00      	nop
 8007e8c:	3724      	adds	r7, #36	; 0x24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	58024400 	.word	0x58024400
 8007e9c:	03d09000 	.word	0x03d09000
 8007ea0:	46000000 	.word	0x46000000
 8007ea4:	4c742400 	.word	0x4c742400
 8007ea8:	4a742400 	.word	0x4a742400
 8007eac:	4af42400 	.word	0x4af42400

08007eb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b084      	sub	sp, #16
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ebe:	4b53      	ldr	r3, [pc, #332]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d101      	bne.n	8007ece <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e099      	b.n	8008002 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ece:	4b4f      	ldr	r3, [pc, #316]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a4e      	ldr	r2, [pc, #312]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007ed4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eda:	f7fc fa41 	bl	8004360 <HAL_GetTick>
 8007ede:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ee0:	e008      	b.n	8007ef4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ee2:	f7fc fa3d 	bl	8004360 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d901      	bls.n	8007ef4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e086      	b.n	8008002 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ef4:	4b45      	ldr	r3, [pc, #276]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d1f0      	bne.n	8007ee2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f00:	4b42      	ldr	r3, [pc, #264]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	031b      	lsls	r3, r3, #12
 8007f0e:	493f      	ldr	r1, [pc, #252]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f10:	4313      	orrs	r3, r2
 8007f12:	628b      	str	r3, [r1, #40]	; 0x28
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	3b01      	subs	r3, #1
 8007f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	025b      	lsls	r3, r3, #9
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	041b      	lsls	r3, r3, #16
 8007f32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f36:	431a      	orrs	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	061b      	lsls	r3, r3, #24
 8007f40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f44:	4931      	ldr	r1, [pc, #196]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f4a:	4b30      	ldr	r3, [pc, #192]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	492d      	ldr	r1, [pc, #180]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f5c:	4b2b      	ldr	r3, [pc, #172]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f60:	f023 0220 	bic.w	r2, r3, #32
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	4928      	ldr	r1, [pc, #160]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007f6e:	4b27      	ldr	r3, [pc, #156]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f72:	4a26      	ldr	r2, [pc, #152]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f74:	f023 0310 	bic.w	r3, r3, #16
 8007f78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007f7a:	4b24      	ldr	r3, [pc, #144]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f7e:	4b24      	ldr	r3, [pc, #144]	; (8008010 <RCCEx_PLL2_Config+0x160>)
 8007f80:	4013      	ands	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	69d2      	ldr	r2, [r2, #28]
 8007f86:	00d2      	lsls	r2, r2, #3
 8007f88:	4920      	ldr	r1, [pc, #128]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007f8e:	4b1f      	ldr	r3, [pc, #124]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	4a1e      	ldr	r2, [pc, #120]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007f94:	f043 0310 	orr.w	r3, r3, #16
 8007f98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d106      	bne.n	8007fae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007fa0:	4b1a      	ldr	r3, [pc, #104]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa4:	4a19      	ldr	r2, [pc, #100]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007fa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007faa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fac:	e00f      	b.n	8007fce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d106      	bne.n	8007fc2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007fb4:	4b15      	ldr	r3, [pc, #84]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	4a14      	ldr	r2, [pc, #80]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007fba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fc0:	e005      	b.n	8007fce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007fc2:	4b12      	ldr	r3, [pc, #72]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc6:	4a11      	ldr	r2, [pc, #68]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a0e      	ldr	r2, [pc, #56]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fda:	f7fc f9c1 	bl	8004360 <HAL_GetTick>
 8007fde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fe0:	e008      	b.n	8007ff4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fe2:	f7fc f9bd 	bl	8004360 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d901      	bls.n	8007ff4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e006      	b.n	8008002 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <RCCEx_PLL2_Config+0x15c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d0f0      	beq.n	8007fe2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008000:	7bfb      	ldrb	r3, [r7, #15]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	58024400 	.word	0x58024400
 8008010:	ffff0007 	.word	0xffff0007

08008014 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008022:	4b53      	ldr	r3, [pc, #332]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 8008024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d101      	bne.n	8008032 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e099      	b.n	8008166 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008032:	4b4f      	ldr	r3, [pc, #316]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a4e      	ldr	r2, [pc, #312]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 8008038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800803c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800803e:	f7fc f98f 	bl	8004360 <HAL_GetTick>
 8008042:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008044:	e008      	b.n	8008058 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008046:	f7fc f98b 	bl	8004360 <HAL_GetTick>
 800804a:	4602      	mov	r2, r0
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	2b02      	cmp	r3, #2
 8008052:	d901      	bls.n	8008058 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e086      	b.n	8008166 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008058:	4b45      	ldr	r3, [pc, #276]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1f0      	bne.n	8008046 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008064:	4b42      	ldr	r3, [pc, #264]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 8008066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008068:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	051b      	lsls	r3, r3, #20
 8008072:	493f      	ldr	r1, [pc, #252]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 8008074:	4313      	orrs	r3, r2
 8008076:	628b      	str	r3, [r1, #40]	; 0x28
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	3b01      	subs	r3, #1
 800807e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	3b01      	subs	r3, #1
 8008088:	025b      	lsls	r3, r3, #9
 800808a:	b29b      	uxth	r3, r3
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	3b01      	subs	r3, #1
 8008094:	041b      	lsls	r3, r3, #16
 8008096:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	3b01      	subs	r3, #1
 80080a2:	061b      	lsls	r3, r3, #24
 80080a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080a8:	4931      	ldr	r1, [pc, #196]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080ae:	4b30      	ldr	r3, [pc, #192]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	492d      	ldr	r1, [pc, #180]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80080c0:	4b2b      	ldr	r3, [pc, #172]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	4928      	ldr	r1, [pc, #160]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80080d2:	4b27      	ldr	r3, [pc, #156]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d6:	4a26      	ldr	r2, [pc, #152]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80080de:	4b24      	ldr	r3, [pc, #144]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080e2:	4b24      	ldr	r3, [pc, #144]	; (8008174 <RCCEx_PLL3_Config+0x160>)
 80080e4:	4013      	ands	r3, r2
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	69d2      	ldr	r2, [r2, #28]
 80080ea:	00d2      	lsls	r2, r2, #3
 80080ec:	4920      	ldr	r1, [pc, #128]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80080f2:	4b1f      	ldr	r3, [pc, #124]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	4a1e      	ldr	r2, [pc, #120]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 80080f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d106      	bne.n	8008112 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008104:	4b1a      	ldr	r3, [pc, #104]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	4a19      	ldr	r2, [pc, #100]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 800810a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800810e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008110:	e00f      	b.n	8008132 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d106      	bne.n	8008126 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008118:	4b15      	ldr	r3, [pc, #84]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	4a14      	ldr	r2, [pc, #80]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 800811e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008122:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008124:	e005      	b.n	8008132 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008126:	4b12      	ldr	r3, [pc, #72]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 8008128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812a:	4a11      	ldr	r2, [pc, #68]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 800812c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008130:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008132:	4b0f      	ldr	r3, [pc, #60]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a0e      	ldr	r2, [pc, #56]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 8008138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800813c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800813e:	f7fc f90f 	bl	8004360 <HAL_GetTick>
 8008142:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008144:	e008      	b.n	8008158 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008146:	f7fc f90b 	bl	8004360 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d901      	bls.n	8008158 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e006      	b.n	8008166 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008158:	4b05      	ldr	r3, [pc, #20]	; (8008170 <RCCEx_PLL3_Config+0x15c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d0f0      	beq.n	8008146 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	58024400 	.word	0x58024400
 8008174:	ffff0007 	.word	0xffff0007

08008178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e049      	b.n	800821e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d106      	bne.n	80081a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7fb fda0 	bl	8003ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f000 faee 	bl	8008798 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b01      	cmp	r3, #1
 800823a:	d001      	beq.n	8008240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e054      	b.n	80082ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a26      	ldr	r2, [pc, #152]	; (80082f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d022      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826a:	d01d      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a22      	ldr	r2, [pc, #136]	; (80082fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d018      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a21      	ldr	r2, [pc, #132]	; (8008300 <HAL_TIM_Base_Start_IT+0xd8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d013      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1f      	ldr	r2, [pc, #124]	; (8008304 <HAL_TIM_Base_Start_IT+0xdc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00e      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1e      	ldr	r2, [pc, #120]	; (8008308 <HAL_TIM_Base_Start_IT+0xe0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d009      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a1c      	ldr	r2, [pc, #112]	; (800830c <HAL_TIM_Base_Start_IT+0xe4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d004      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1b      	ldr	r2, [pc, #108]	; (8008310 <HAL_TIM_Base_Start_IT+0xe8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d115      	bne.n	80082d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	4b19      	ldr	r3, [pc, #100]	; (8008314 <HAL_TIM_Base_Start_IT+0xec>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b06      	cmp	r3, #6
 80082b8:	d015      	beq.n	80082e6 <HAL_TIM_Base_Start_IT+0xbe>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c0:	d011      	beq.n	80082e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0201 	orr.w	r2, r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d2:	e008      	b.n	80082e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e000      	b.n	80082e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	40010000 	.word	0x40010000
 80082fc:	40000400 	.word	0x40000400
 8008300:	40000800 	.word	0x40000800
 8008304:	40000c00 	.word	0x40000c00
 8008308:	40010400 	.word	0x40010400
 800830c:	40001800 	.word	0x40001800
 8008310:	40014000 	.word	0x40014000
 8008314:	00010007 	.word	0x00010007

08008318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b02      	cmp	r3, #2
 800832c:	d122      	bne.n	8008374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b02      	cmp	r3, #2
 800833a:	d11b      	bne.n	8008374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0202 	mvn.w	r2, #2
 8008344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f9fe 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 8008360:	e005      	b.n	800836e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f9f0 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fa01 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b04      	cmp	r3, #4
 8008380:	d122      	bne.n	80083c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b04      	cmp	r3, #4
 800838e:	d11b      	bne.n	80083c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f06f 0204 	mvn.w	r2, #4
 8008398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2202      	movs	r2, #2
 800839e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f9d4 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 80083b4:	e005      	b.n	80083c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 f9c6 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 f9d7 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f003 0308 	and.w	r3, r3, #8
 80083d2:	2b08      	cmp	r3, #8
 80083d4:	d122      	bne.n	800841c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	f003 0308 	and.w	r3, r3, #8
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d11b      	bne.n	800841c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f06f 0208 	mvn.w	r2, #8
 80083ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2204      	movs	r2, #4
 80083f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f9aa 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 8008408:	e005      	b.n	8008416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f99c 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f9ad 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f003 0310 	and.w	r3, r3, #16
 8008426:	2b10      	cmp	r3, #16
 8008428:	d122      	bne.n	8008470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f003 0310 	and.w	r3, r3, #16
 8008434:	2b10      	cmp	r3, #16
 8008436:	d11b      	bne.n	8008470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f06f 0210 	mvn.w	r2, #16
 8008440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2208      	movs	r2, #8
 8008446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f980 	bl	800875c <HAL_TIM_IC_CaptureCallback>
 800845c:	e005      	b.n	800846a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f972 	bl	8008748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 f983 	bl	8008770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b01      	cmp	r3, #1
 800847c:	d10e      	bne.n	800849c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b01      	cmp	r3, #1
 800848a:	d107      	bne.n	800849c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f06f 0201 	mvn.w	r2, #1
 8008494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7fb fb26 	bl	8003ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a6:	2b80      	cmp	r3, #128	; 0x80
 80084a8:	d10e      	bne.n	80084c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b4:	2b80      	cmp	r3, #128	; 0x80
 80084b6:	d107      	bne.n	80084c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fb38 	bl	8008b38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d6:	d10e      	bne.n	80084f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084e2:	2b80      	cmp	r3, #128	; 0x80
 80084e4:	d107      	bne.n	80084f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80084ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fb2b 	bl	8008b4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008500:	2b40      	cmp	r3, #64	; 0x40
 8008502:	d10e      	bne.n	8008522 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850e:	2b40      	cmp	r3, #64	; 0x40
 8008510:	d107      	bne.n	8008522 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800851a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f931 	bl	8008784 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f003 0320 	and.w	r3, r3, #32
 800852c:	2b20      	cmp	r3, #32
 800852e:	d10e      	bne.n	800854e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b20      	cmp	r3, #32
 800853c:	d107      	bne.n	800854e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f06f 0220 	mvn.w	r2, #32
 8008546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 faeb 	bl	8008b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800854e:	bf00      	nop
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800856c:	2b01      	cmp	r3, #1
 800856e:	d101      	bne.n	8008574 <HAL_TIM_ConfigClockSource+0x1c>
 8008570:	2302      	movs	r3, #2
 8008572:	e0dc      	b.n	800872e <HAL_TIM_ConfigClockSource+0x1d6>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2202      	movs	r2, #2
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	4b6a      	ldr	r3, [pc, #424]	; (8008738 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008590:	4013      	ands	r3, r2
 8008592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800859a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a64      	ldr	r2, [pc, #400]	; (800873c <HAL_TIM_ConfigClockSource+0x1e4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	f000 80a9 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085b0:	4a62      	ldr	r2, [pc, #392]	; (800873c <HAL_TIM_ConfigClockSource+0x1e4>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f200 80ae 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085b8:	4a61      	ldr	r2, [pc, #388]	; (8008740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	f000 80a1 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085c0:	4a5f      	ldr	r2, [pc, #380]	; (8008740 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	f200 80a6 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085c8:	4a5e      	ldr	r2, [pc, #376]	; (8008744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	f000 8099 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085d0:	4a5c      	ldr	r2, [pc, #368]	; (8008744 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	f200 809e 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085dc:	f000 8091 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085e4:	f200 8096 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ec:	f000 8089 	beq.w	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 80085f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085f4:	f200 808e 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 80085f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085fc:	d03e      	beq.n	800867c <HAL_TIM_ConfigClockSource+0x124>
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008602:	f200 8087 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860a:	f000 8086 	beq.w	800871a <HAL_TIM_ConfigClockSource+0x1c2>
 800860e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008612:	d87f      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008614:	2b70      	cmp	r3, #112	; 0x70
 8008616:	d01a      	beq.n	800864e <HAL_TIM_ConfigClockSource+0xf6>
 8008618:	2b70      	cmp	r3, #112	; 0x70
 800861a:	d87b      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 800861c:	2b60      	cmp	r3, #96	; 0x60
 800861e:	d050      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x16a>
 8008620:	2b60      	cmp	r3, #96	; 0x60
 8008622:	d877      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008624:	2b50      	cmp	r3, #80	; 0x50
 8008626:	d03c      	beq.n	80086a2 <HAL_TIM_ConfigClockSource+0x14a>
 8008628:	2b50      	cmp	r3, #80	; 0x50
 800862a:	d873      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 800862c:	2b40      	cmp	r3, #64	; 0x40
 800862e:	d058      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x18a>
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	d86f      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d064      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 8008638:	2b30      	cmp	r3, #48	; 0x30
 800863a:	d86b      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 800863c:	2b20      	cmp	r3, #32
 800863e:	d060      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 8008640:	2b20      	cmp	r3, #32
 8008642:	d867      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d05c      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 8008648:	2b10      	cmp	r3, #16
 800864a:	d05a      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x1aa>
 800864c:	e062      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	6899      	ldr	r1, [r3, #8]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f000 f9b3 	bl	80089c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008670:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	609a      	str	r2, [r3, #8]
      break;
 800867a:	e04f      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	6899      	ldr	r1, [r3, #8]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f000 f99c 	bl	80089c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800869e:	609a      	str	r2, [r3, #8]
      break;
 80086a0:	e03c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6859      	ldr	r1, [r3, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f000 f90c 	bl	80088cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2150      	movs	r1, #80	; 0x50
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f966 	bl	800898c <TIM_ITRx_SetConfig>
      break;
 80086c0:	e02c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6859      	ldr	r1, [r3, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	461a      	mov	r2, r3
 80086d0:	f000 f92b 	bl	800892a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2160      	movs	r1, #96	; 0x60
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f956 	bl	800898c <TIM_ITRx_SetConfig>
      break;
 80086e0:	e01c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6859      	ldr	r1, [r3, #4]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 f8ec 	bl	80088cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2140      	movs	r1, #64	; 0x40
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f946 	bl	800898c <TIM_ITRx_SetConfig>
      break;
 8008700:	e00c      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	4610      	mov	r0, r2
 800870e:	f000 f93d 	bl	800898c <TIM_ITRx_SetConfig>
      break;
 8008712:	e003      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
      break;
 8008718:	e000      	b.n	800871c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800871a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800872c:	7bfb      	ldrb	r3, [r7, #15]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	ffceff88 	.word	0xffceff88
 800873c:	00100040 	.word	0x00100040
 8008740:	00100030 	.word	0x00100030
 8008744:	00100020 	.word	0x00100020

08008748 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a40      	ldr	r2, [pc, #256]	; (80088ac <TIM_Base_SetConfig+0x114>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d013      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b6:	d00f      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a3d      	ldr	r2, [pc, #244]	; (80088b0 <TIM_Base_SetConfig+0x118>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00b      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a3c      	ldr	r2, [pc, #240]	; (80088b4 <TIM_Base_SetConfig+0x11c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d007      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a3b      	ldr	r2, [pc, #236]	; (80088b8 <TIM_Base_SetConfig+0x120>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_Base_SetConfig+0x40>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a3a      	ldr	r2, [pc, #232]	; (80088bc <TIM_Base_SetConfig+0x124>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d108      	bne.n	80087ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2f      	ldr	r2, [pc, #188]	; (80088ac <TIM_Base_SetConfig+0x114>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01f      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f8:	d01b      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a2c      	ldr	r2, [pc, #176]	; (80088b0 <TIM_Base_SetConfig+0x118>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d017      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a2b      	ldr	r2, [pc, #172]	; (80088b4 <TIM_Base_SetConfig+0x11c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d013      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a2a      	ldr	r2, [pc, #168]	; (80088b8 <TIM_Base_SetConfig+0x120>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d00f      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a29      	ldr	r2, [pc, #164]	; (80088bc <TIM_Base_SetConfig+0x124>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00b      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a28      	ldr	r2, [pc, #160]	; (80088c0 <TIM_Base_SetConfig+0x128>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d007      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a27      	ldr	r2, [pc, #156]	; (80088c4 <TIM_Base_SetConfig+0x12c>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d003      	beq.n	8008832 <TIM_Base_SetConfig+0x9a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a26      	ldr	r2, [pc, #152]	; (80088c8 <TIM_Base_SetConfig+0x130>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d108      	bne.n	8008844 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a10      	ldr	r2, [pc, #64]	; (80088ac <TIM_Base_SetConfig+0x114>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00f      	beq.n	8008890 <TIM_Base_SetConfig+0xf8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a12      	ldr	r2, [pc, #72]	; (80088bc <TIM_Base_SetConfig+0x124>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00b      	beq.n	8008890 <TIM_Base_SetConfig+0xf8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a11      	ldr	r2, [pc, #68]	; (80088c0 <TIM_Base_SetConfig+0x128>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d007      	beq.n	8008890 <TIM_Base_SetConfig+0xf8>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a10      	ldr	r2, [pc, #64]	; (80088c4 <TIM_Base_SetConfig+0x12c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d003      	beq.n	8008890 <TIM_Base_SetConfig+0xf8>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a0f      	ldr	r2, [pc, #60]	; (80088c8 <TIM_Base_SetConfig+0x130>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d103      	bne.n	8008898 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	691a      	ldr	r2, [r3, #16]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	615a      	str	r2, [r3, #20]
}
 800889e:	bf00      	nop
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	40010000 	.word	0x40010000
 80088b0:	40000400 	.word	0x40000400
 80088b4:	40000800 	.word	0x40000800
 80088b8:	40000c00 	.word	0x40000c00
 80088bc:	40010400 	.word	0x40010400
 80088c0:	40014000 	.word	0x40014000
 80088c4:	40014400 	.word	0x40014400
 80088c8:	40014800 	.word	0x40014800

080088cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6a1b      	ldr	r3, [r3, #32]
 80088dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	f023 0201 	bic.w	r2, r3, #1
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	4313      	orrs	r3, r2
 8008900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f023 030a 	bic.w	r3, r3, #10
 8008908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	4313      	orrs	r3, r2
 8008910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	621a      	str	r2, [r3, #32]
}
 800891e:	bf00      	nop
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800892a:	b480      	push	{r7}
 800892c:	b087      	sub	sp, #28
 800892e:	af00      	add	r7, sp, #0
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	60b9      	str	r1, [r7, #8]
 8008934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a1b      	ldr	r3, [r3, #32]
 800893a:	f023 0210 	bic.w	r2, r3, #16
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	6a1b      	ldr	r3, [r3, #32]
 800894c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	031b      	lsls	r3, r3, #12
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4313      	orrs	r3, r2
 800895e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	621a      	str	r2, [r3, #32]
}
 800897e:	bf00      	nop
 8008980:	371c      	adds	r7, #28
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
	...

0800898c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800899c:	68fa      	ldr	r2, [r7, #12]
 800899e:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <TIM_ITRx_SetConfig+0x38>)
 80089a0:	4013      	ands	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	f043 0307 	orr.w	r3, r3, #7
 80089ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	609a      	str	r2, [r3, #8]
}
 80089b6:	bf00      	nop
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	ffcfff8f 	.word	0xffcfff8f

080089c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	021a      	lsls	r2, r3, #8
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	431a      	orrs	r2, r3
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	609a      	str	r2, [r3, #8]
}
 80089fc:	bf00      	nop
 80089fe:	371c      	adds	r7, #28
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d101      	bne.n	8008a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	e06d      	b.n	8008afc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a30      	ldr	r2, [pc, #192]	; (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d004      	beq.n	8008a54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a2f      	ldr	r2, [pc, #188]	; (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d108      	bne.n	8008a66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a20      	ldr	r2, [pc, #128]	; (8008b08 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d022      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a92:	d01d      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a1d      	ldr	r2, [pc, #116]	; (8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d018      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a1c      	ldr	r2, [pc, #112]	; (8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d013      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a1a      	ldr	r2, [pc, #104]	; (8008b18 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00e      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a15      	ldr	r2, [pc, #84]	; (8008b0c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d009      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a16      	ldr	r2, [pc, #88]	; (8008b1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d004      	beq.n	8008ad0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a15      	ldr	r2, [pc, #84]	; (8008b20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10c      	bne.n	8008aea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ad6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	40010000 	.word	0x40010000
 8008b0c:	40010400 	.word	0x40010400
 8008b10:	40000400 	.word	0x40000400
 8008b14:	40000800 	.word	0x40000800
 8008b18:	40000c00 	.word	0x40000c00
 8008b1c:	40001800 	.word	0x40001800
 8008b20:	40014000 	.word	0x40014000

08008b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e042      	b.n	8008bf8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d106      	bne.n	8008b8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fb f8d3 	bl	8003d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2224      	movs	r2, #36	; 0x24
 8008b8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0201 	bic.w	r2, r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f8ba 	bl	8008d1c <UART_SetConfig>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e022      	b.n	8008bf8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d002      	beq.n	8008bc0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fe16 	bl	80097ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008bce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	689a      	ldr	r2, [r3, #8]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f042 0201 	orr.w	r2, r2, #1
 8008bee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fe9d 	bl	8009930 <UART_CheckIdleState>
 8008bf6:	4603      	mov	r3, r0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b08a      	sub	sp, #40	; 0x28
 8008c04:	af02      	add	r7, sp, #8
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	603b      	str	r3, [r7, #0]
 8008c0c:	4613      	mov	r3, r2
 8008c0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	d17b      	bne.n	8008d12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_UART_Transmit+0x26>
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d101      	bne.n	8008c2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e074      	b.n	8008d14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2221      	movs	r2, #33	; 0x21
 8008c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c3a:	f7fb fb91 	bl	8004360 <HAL_GetTick>
 8008c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	88fa      	ldrh	r2, [r7, #6]
 8008c44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	88fa      	ldrh	r2, [r7, #6]
 8008c4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c58:	d108      	bne.n	8008c6c <HAL_UART_Transmit+0x6c>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d104      	bne.n	8008c6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	61bb      	str	r3, [r7, #24]
 8008c6a:	e003      	b.n	8008c74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c74:	e030      	b.n	8008cd8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	2180      	movs	r1, #128	; 0x80
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 feff 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d005      	beq.n	8008c98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2220      	movs	r2, #32
 8008c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008c94:	2303      	movs	r3, #3
 8008c96:	e03d      	b.n	8008d14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	61bb      	str	r3, [r7, #24]
 8008cb4:	e007      	b.n	8008cc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	781a      	ldrb	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d1c8      	bne.n	8008c76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	2200      	movs	r2, #0
 8008cec:	2140      	movs	r1, #64	; 0x40
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f000 fec8 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d005      	beq.n	8008d06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008d02:	2303      	movs	r3, #3
 8008d04:	e006      	b.n	8008d14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	e000      	b.n	8008d14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008d12:	2302      	movs	r3, #2
  }
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3720      	adds	r7, #32
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d20:	b092      	sub	sp, #72	; 0x48
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	431a      	orrs	r2, r3
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	431a      	orrs	r2, r3
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4bbe      	ldr	r3, [pc, #760]	; (8009044 <UART_SetConfig+0x328>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	6812      	ldr	r2, [r2, #0]
 8008d52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d54:	430b      	orrs	r3, r1
 8008d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	68da      	ldr	r2, [r3, #12]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4ab3      	ldr	r2, [pc, #716]	; (8009048 <UART_SetConfig+0x32c>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d004      	beq.n	8008d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
 8008d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d84:	4313      	orrs	r3, r2
 8008d86:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	4baf      	ldr	r3, [pc, #700]	; (800904c <UART_SetConfig+0x330>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	6812      	ldr	r2, [r2, #0]
 8008d96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d98:	430b      	orrs	r3, r1
 8008d9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da2:	f023 010f 	bic.w	r1, r3, #15
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4aa6      	ldr	r2, [pc, #664]	; (8009050 <UART_SetConfig+0x334>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d177      	bne.n	8008eac <UART_SetConfig+0x190>
 8008dbc:	4ba5      	ldr	r3, [pc, #660]	; (8009054 <UART_SetConfig+0x338>)
 8008dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dc4:	2b28      	cmp	r3, #40	; 0x28
 8008dc6:	d86d      	bhi.n	8008ea4 <UART_SetConfig+0x188>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <UART_SetConfig+0xb4>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008e75 	.word	0x08008e75
 8008dd4:	08008ea5 	.word	0x08008ea5
 8008dd8:	08008ea5 	.word	0x08008ea5
 8008ddc:	08008ea5 	.word	0x08008ea5
 8008de0:	08008ea5 	.word	0x08008ea5
 8008de4:	08008ea5 	.word	0x08008ea5
 8008de8:	08008ea5 	.word	0x08008ea5
 8008dec:	08008ea5 	.word	0x08008ea5
 8008df0:	08008e7d 	.word	0x08008e7d
 8008df4:	08008ea5 	.word	0x08008ea5
 8008df8:	08008ea5 	.word	0x08008ea5
 8008dfc:	08008ea5 	.word	0x08008ea5
 8008e00:	08008ea5 	.word	0x08008ea5
 8008e04:	08008ea5 	.word	0x08008ea5
 8008e08:	08008ea5 	.word	0x08008ea5
 8008e0c:	08008ea5 	.word	0x08008ea5
 8008e10:	08008e85 	.word	0x08008e85
 8008e14:	08008ea5 	.word	0x08008ea5
 8008e18:	08008ea5 	.word	0x08008ea5
 8008e1c:	08008ea5 	.word	0x08008ea5
 8008e20:	08008ea5 	.word	0x08008ea5
 8008e24:	08008ea5 	.word	0x08008ea5
 8008e28:	08008ea5 	.word	0x08008ea5
 8008e2c:	08008ea5 	.word	0x08008ea5
 8008e30:	08008e8d 	.word	0x08008e8d
 8008e34:	08008ea5 	.word	0x08008ea5
 8008e38:	08008ea5 	.word	0x08008ea5
 8008e3c:	08008ea5 	.word	0x08008ea5
 8008e40:	08008ea5 	.word	0x08008ea5
 8008e44:	08008ea5 	.word	0x08008ea5
 8008e48:	08008ea5 	.word	0x08008ea5
 8008e4c:	08008ea5 	.word	0x08008ea5
 8008e50:	08008e95 	.word	0x08008e95
 8008e54:	08008ea5 	.word	0x08008ea5
 8008e58:	08008ea5 	.word	0x08008ea5
 8008e5c:	08008ea5 	.word	0x08008ea5
 8008e60:	08008ea5 	.word	0x08008ea5
 8008e64:	08008ea5 	.word	0x08008ea5
 8008e68:	08008ea5 	.word	0x08008ea5
 8008e6c:	08008ea5 	.word	0x08008ea5
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e222      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e21e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8a:	e21a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e92:	e216      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e94:	2320      	movs	r3, #32
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9a:	e212      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008e9c:	2340      	movs	r3, #64	; 0x40
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea2:	e20e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eaa:	e20a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a69      	ldr	r2, [pc, #420]	; (8009058 <UART_SetConfig+0x33c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d130      	bne.n	8008f18 <UART_SetConfig+0x1fc>
 8008eb6:	4b67      	ldr	r3, [pc, #412]	; (8009054 <UART_SetConfig+0x338>)
 8008eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d826      	bhi.n	8008f10 <UART_SetConfig+0x1f4>
 8008ec2:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <UART_SetConfig+0x1ac>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ee1 	.word	0x08008ee1
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008ef1 	.word	0x08008ef1
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f01 	.word	0x08008f01
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee6:	e1ec      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eee:	e1e8      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef6:	e1e4      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efe:	e1e0      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f00:	2320      	movs	r3, #32
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f06:	e1dc      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f08:	2340      	movs	r3, #64	; 0x40
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0e:	e1d8      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f16:	e1d4      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a4f      	ldr	r2, [pc, #316]	; (800905c <UART_SetConfig+0x340>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d130      	bne.n	8008f84 <UART_SetConfig+0x268>
 8008f22:	4b4c      	ldr	r3, [pc, #304]	; (8009054 <UART_SetConfig+0x338>)
 8008f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d826      	bhi.n	8008f7c <UART_SetConfig+0x260>
 8008f2e:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <UART_SetConfig+0x218>)
 8008f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f34:	08008f4d 	.word	0x08008f4d
 8008f38:	08008f55 	.word	0x08008f55
 8008f3c:	08008f5d 	.word	0x08008f5d
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f6d 	.word	0x08008f6d
 8008f48:	08008f75 	.word	0x08008f75
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f52:	e1b6      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f54:	2304      	movs	r3, #4
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5a:	e1b2      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f62:	e1ae      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f64:	2310      	movs	r3, #16
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f6a:	e1aa      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f6c:	2320      	movs	r3, #32
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f72:	e1a6      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f74:	2340      	movs	r3, #64	; 0x40
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f7a:	e1a2      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f7c:	2380      	movs	r3, #128	; 0x80
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f82:	e19e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a35      	ldr	r2, [pc, #212]	; (8009060 <UART_SetConfig+0x344>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d130      	bne.n	8008ff0 <UART_SetConfig+0x2d4>
 8008f8e:	4b31      	ldr	r3, [pc, #196]	; (8009054 <UART_SetConfig+0x338>)
 8008f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f92:	f003 0307 	and.w	r3, r3, #7
 8008f96:	2b05      	cmp	r3, #5
 8008f98:	d826      	bhi.n	8008fe8 <UART_SetConfig+0x2cc>
 8008f9a:	a201      	add	r2, pc, #4	; (adr r2, 8008fa0 <UART_SetConfig+0x284>)
 8008f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa0:	08008fb9 	.word	0x08008fb9
 8008fa4:	08008fc1 	.word	0x08008fc1
 8008fa8:	08008fc9 	.word	0x08008fc9
 8008fac:	08008fd1 	.word	0x08008fd1
 8008fb0:	08008fd9 	.word	0x08008fd9
 8008fb4:	08008fe1 	.word	0x08008fe1
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fbe:	e180      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fc0:	2304      	movs	r3, #4
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc6:	e17c      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fc8:	2308      	movs	r3, #8
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fce:	e178      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fd0:	2310      	movs	r3, #16
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fd6:	e174      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fd8:	2320      	movs	r3, #32
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fde:	e170      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fe0:	2340      	movs	r3, #64	; 0x40
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fe6:	e16c      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008fe8:	2380      	movs	r3, #128	; 0x80
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fee:	e168      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a1b      	ldr	r2, [pc, #108]	; (8009064 <UART_SetConfig+0x348>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d142      	bne.n	8009080 <UART_SetConfig+0x364>
 8008ffa:	4b16      	ldr	r3, [pc, #88]	; (8009054 <UART_SetConfig+0x338>)
 8008ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	2b05      	cmp	r3, #5
 8009004:	d838      	bhi.n	8009078 <UART_SetConfig+0x35c>
 8009006:	a201      	add	r2, pc, #4	; (adr r2, 800900c <UART_SetConfig+0x2f0>)
 8009008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900c:	08009025 	.word	0x08009025
 8009010:	0800902d 	.word	0x0800902d
 8009014:	08009035 	.word	0x08009035
 8009018:	0800903d 	.word	0x0800903d
 800901c:	08009069 	.word	0x08009069
 8009020:	08009071 	.word	0x08009071
 8009024:	2300      	movs	r3, #0
 8009026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902a:	e14a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 800902c:	2304      	movs	r3, #4
 800902e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009032:	e146      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009034:	2308      	movs	r3, #8
 8009036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903a:	e142      	b.n	80092c2 <UART_SetConfig+0x5a6>
 800903c:	2310      	movs	r3, #16
 800903e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009042:	e13e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009044:	cfff69f3 	.word	0xcfff69f3
 8009048:	58000c00 	.word	0x58000c00
 800904c:	11fff4ff 	.word	0x11fff4ff
 8009050:	40011000 	.word	0x40011000
 8009054:	58024400 	.word	0x58024400
 8009058:	40004400 	.word	0x40004400
 800905c:	40004800 	.word	0x40004800
 8009060:	40004c00 	.word	0x40004c00
 8009064:	40005000 	.word	0x40005000
 8009068:	2320      	movs	r3, #32
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906e:	e128      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009070:	2340      	movs	r3, #64	; 0x40
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009076:	e124      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009078:	2380      	movs	r3, #128	; 0x80
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907e:	e120      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4acb      	ldr	r2, [pc, #812]	; (80093b4 <UART_SetConfig+0x698>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d176      	bne.n	8009178 <UART_SetConfig+0x45c>
 800908a:	4bcb      	ldr	r3, [pc, #812]	; (80093b8 <UART_SetConfig+0x69c>)
 800908c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009092:	2b28      	cmp	r3, #40	; 0x28
 8009094:	d86c      	bhi.n	8009170 <UART_SetConfig+0x454>
 8009096:	a201      	add	r2, pc, #4	; (adr r2, 800909c <UART_SetConfig+0x380>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	08009141 	.word	0x08009141
 80090a0:	08009171 	.word	0x08009171
 80090a4:	08009171 	.word	0x08009171
 80090a8:	08009171 	.word	0x08009171
 80090ac:	08009171 	.word	0x08009171
 80090b0:	08009171 	.word	0x08009171
 80090b4:	08009171 	.word	0x08009171
 80090b8:	08009171 	.word	0x08009171
 80090bc:	08009149 	.word	0x08009149
 80090c0:	08009171 	.word	0x08009171
 80090c4:	08009171 	.word	0x08009171
 80090c8:	08009171 	.word	0x08009171
 80090cc:	08009171 	.word	0x08009171
 80090d0:	08009171 	.word	0x08009171
 80090d4:	08009171 	.word	0x08009171
 80090d8:	08009171 	.word	0x08009171
 80090dc:	08009151 	.word	0x08009151
 80090e0:	08009171 	.word	0x08009171
 80090e4:	08009171 	.word	0x08009171
 80090e8:	08009171 	.word	0x08009171
 80090ec:	08009171 	.word	0x08009171
 80090f0:	08009171 	.word	0x08009171
 80090f4:	08009171 	.word	0x08009171
 80090f8:	08009171 	.word	0x08009171
 80090fc:	08009159 	.word	0x08009159
 8009100:	08009171 	.word	0x08009171
 8009104:	08009171 	.word	0x08009171
 8009108:	08009171 	.word	0x08009171
 800910c:	08009171 	.word	0x08009171
 8009110:	08009171 	.word	0x08009171
 8009114:	08009171 	.word	0x08009171
 8009118:	08009171 	.word	0x08009171
 800911c:	08009161 	.word	0x08009161
 8009120:	08009171 	.word	0x08009171
 8009124:	08009171 	.word	0x08009171
 8009128:	08009171 	.word	0x08009171
 800912c:	08009171 	.word	0x08009171
 8009130:	08009171 	.word	0x08009171
 8009134:	08009171 	.word	0x08009171
 8009138:	08009171 	.word	0x08009171
 800913c:	08009169 	.word	0x08009169
 8009140:	2301      	movs	r3, #1
 8009142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009146:	e0bc      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009148:	2304      	movs	r3, #4
 800914a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800914e:	e0b8      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009150:	2308      	movs	r3, #8
 8009152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009156:	e0b4      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009158:	2310      	movs	r3, #16
 800915a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800915e:	e0b0      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009160:	2320      	movs	r3, #32
 8009162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009166:	e0ac      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009168:	2340      	movs	r3, #64	; 0x40
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916e:	e0a8      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009170:	2380      	movs	r3, #128	; 0x80
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009176:	e0a4      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a8f      	ldr	r2, [pc, #572]	; (80093bc <UART_SetConfig+0x6a0>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d130      	bne.n	80091e4 <UART_SetConfig+0x4c8>
 8009182:	4b8d      	ldr	r3, [pc, #564]	; (80093b8 <UART_SetConfig+0x69c>)
 8009184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b05      	cmp	r3, #5
 800918c:	d826      	bhi.n	80091dc <UART_SetConfig+0x4c0>
 800918e:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <UART_SetConfig+0x478>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	080091ad 	.word	0x080091ad
 8009198:	080091b5 	.word	0x080091b5
 800919c:	080091bd 	.word	0x080091bd
 80091a0:	080091c5 	.word	0x080091c5
 80091a4:	080091cd 	.word	0x080091cd
 80091a8:	080091d5 	.word	0x080091d5
 80091ac:	2300      	movs	r3, #0
 80091ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b2:	e086      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091b4:	2304      	movs	r3, #4
 80091b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ba:	e082      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091bc:	2308      	movs	r3, #8
 80091be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c2:	e07e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091c4:	2310      	movs	r3, #16
 80091c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ca:	e07a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091cc:	2320      	movs	r3, #32
 80091ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091d2:	e076      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091d4:	2340      	movs	r3, #64	; 0x40
 80091d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091da:	e072      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091dc:	2380      	movs	r3, #128	; 0x80
 80091de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091e2:	e06e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a75      	ldr	r2, [pc, #468]	; (80093c0 <UART_SetConfig+0x6a4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d130      	bne.n	8009250 <UART_SetConfig+0x534>
 80091ee:	4b72      	ldr	r3, [pc, #456]	; (80093b8 <UART_SetConfig+0x69c>)
 80091f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	2b05      	cmp	r3, #5
 80091f8:	d826      	bhi.n	8009248 <UART_SetConfig+0x52c>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <UART_SetConfig+0x4e4>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	08009219 	.word	0x08009219
 8009204:	08009221 	.word	0x08009221
 8009208:	08009229 	.word	0x08009229
 800920c:	08009231 	.word	0x08009231
 8009210:	08009239 	.word	0x08009239
 8009214:	08009241 	.word	0x08009241
 8009218:	2300      	movs	r3, #0
 800921a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921e:	e050      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009220:	2304      	movs	r3, #4
 8009222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009226:	e04c      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009228:	2308      	movs	r3, #8
 800922a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922e:	e048      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009230:	2310      	movs	r3, #16
 8009232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009236:	e044      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009238:	2320      	movs	r3, #32
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800923e:	e040      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009240:	2340      	movs	r3, #64	; 0x40
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009246:	e03c      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009248:	2380      	movs	r3, #128	; 0x80
 800924a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800924e:	e038      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a5b      	ldr	r2, [pc, #364]	; (80093c4 <UART_SetConfig+0x6a8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d130      	bne.n	80092bc <UART_SetConfig+0x5a0>
 800925a:	4b57      	ldr	r3, [pc, #348]	; (80093b8 <UART_SetConfig+0x69c>)
 800925c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800925e:	f003 0307 	and.w	r3, r3, #7
 8009262:	2b05      	cmp	r3, #5
 8009264:	d826      	bhi.n	80092b4 <UART_SetConfig+0x598>
 8009266:	a201      	add	r2, pc, #4	; (adr r2, 800926c <UART_SetConfig+0x550>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	08009285 	.word	0x08009285
 8009270:	0800928d 	.word	0x0800928d
 8009274:	08009295 	.word	0x08009295
 8009278:	0800929d 	.word	0x0800929d
 800927c:	080092a5 	.word	0x080092a5
 8009280:	080092ad 	.word	0x080092ad
 8009284:	2302      	movs	r3, #2
 8009286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928a:	e01a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 800928c:	2304      	movs	r3, #4
 800928e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009292:	e016      	b.n	80092c2 <UART_SetConfig+0x5a6>
 8009294:	2308      	movs	r3, #8
 8009296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929a:	e012      	b.n	80092c2 <UART_SetConfig+0x5a6>
 800929c:	2310      	movs	r3, #16
 800929e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092a2:	e00e      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80092a4:	2320      	movs	r3, #32
 80092a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092aa:	e00a      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80092ac:	2340      	movs	r3, #64	; 0x40
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092b2:	e006      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80092b4:	2380      	movs	r3, #128	; 0x80
 80092b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ba:	e002      	b.n	80092c2 <UART_SetConfig+0x5a6>
 80092bc:	2380      	movs	r3, #128	; 0x80
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a3f      	ldr	r2, [pc, #252]	; (80093c4 <UART_SetConfig+0x6a8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	f040 80f8 	bne.w	80094be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	dc46      	bgt.n	8009364 <UART_SetConfig+0x648>
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	f2c0 8082 	blt.w	80093e0 <UART_SetConfig+0x6c4>
 80092dc:	3b02      	subs	r3, #2
 80092de:	2b1e      	cmp	r3, #30
 80092e0:	d87e      	bhi.n	80093e0 <UART_SetConfig+0x6c4>
 80092e2:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <UART_SetConfig+0x5cc>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	0800936b 	.word	0x0800936b
 80092ec:	080093e1 	.word	0x080093e1
 80092f0:	08009373 	.word	0x08009373
 80092f4:	080093e1 	.word	0x080093e1
 80092f8:	080093e1 	.word	0x080093e1
 80092fc:	080093e1 	.word	0x080093e1
 8009300:	08009383 	.word	0x08009383
 8009304:	080093e1 	.word	0x080093e1
 8009308:	080093e1 	.word	0x080093e1
 800930c:	080093e1 	.word	0x080093e1
 8009310:	080093e1 	.word	0x080093e1
 8009314:	080093e1 	.word	0x080093e1
 8009318:	080093e1 	.word	0x080093e1
 800931c:	080093e1 	.word	0x080093e1
 8009320:	08009393 	.word	0x08009393
 8009324:	080093e1 	.word	0x080093e1
 8009328:	080093e1 	.word	0x080093e1
 800932c:	080093e1 	.word	0x080093e1
 8009330:	080093e1 	.word	0x080093e1
 8009334:	080093e1 	.word	0x080093e1
 8009338:	080093e1 	.word	0x080093e1
 800933c:	080093e1 	.word	0x080093e1
 8009340:	080093e1 	.word	0x080093e1
 8009344:	080093e1 	.word	0x080093e1
 8009348:	080093e1 	.word	0x080093e1
 800934c:	080093e1 	.word	0x080093e1
 8009350:	080093e1 	.word	0x080093e1
 8009354:	080093e1 	.word	0x080093e1
 8009358:	080093e1 	.word	0x080093e1
 800935c:	080093e1 	.word	0x080093e1
 8009360:	080093d3 	.word	0x080093d3
 8009364:	2b40      	cmp	r3, #64	; 0x40
 8009366:	d037      	beq.n	80093d8 <UART_SetConfig+0x6bc>
 8009368:	e03a      	b.n	80093e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800936a:	f7fe fae3 	bl	8007934 <HAL_RCCEx_GetD3PCLK1Freq>
 800936e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009370:	e03c      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe faf2 	bl	8007960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800937c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009380:	e034      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009382:	f107 0318 	add.w	r3, r7, #24
 8009386:	4618      	mov	r0, r3
 8009388:	f7fe fc3e 	bl	8007c08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009390:	e02c      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <UART_SetConfig+0x69c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b00      	cmp	r3, #0
 800939c:	d016      	beq.n	80093cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800939e:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <UART_SetConfig+0x69c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	08db      	lsrs	r3, r3, #3
 80093a4:	f003 0303 	and.w	r3, r3, #3
 80093a8:	4a07      	ldr	r2, [pc, #28]	; (80093c8 <UART_SetConfig+0x6ac>)
 80093aa:	fa22 f303 	lsr.w	r3, r2, r3
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093b0:	e01c      	b.n	80093ec <UART_SetConfig+0x6d0>
 80093b2:	bf00      	nop
 80093b4:	40011400 	.word	0x40011400
 80093b8:	58024400 	.word	0x58024400
 80093bc:	40007800 	.word	0x40007800
 80093c0:	40007c00 	.word	0x40007c00
 80093c4:	58000c00 	.word	0x58000c00
 80093c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80093cc:	4b9d      	ldr	r3, [pc, #628]	; (8009644 <UART_SetConfig+0x928>)
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d0:	e00c      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093d2:	4b9d      	ldr	r3, [pc, #628]	; (8009648 <UART_SetConfig+0x92c>)
 80093d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d6:	e009      	b.n	80093ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093de:	e005      	b.n	80093ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80093ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80093ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 81de 	beq.w	80097b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f8:	4a94      	ldr	r2, [pc, #592]	; (800964c <UART_SetConfig+0x930>)
 80093fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093fe:	461a      	mov	r2, r3
 8009400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009402:	fbb3 f3f2 	udiv	r3, r3, r2
 8009406:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	4413      	add	r3, r2
 8009412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009414:	429a      	cmp	r2, r3
 8009416:	d305      	bcc.n	8009424 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800941e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009420:	429a      	cmp	r2, r3
 8009422:	d903      	bls.n	800942c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800942a:	e1c1      	b.n	80097b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800942c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942e:	2200      	movs	r2, #0
 8009430:	60bb      	str	r3, [r7, #8]
 8009432:	60fa      	str	r2, [r7, #12]
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	4a84      	ldr	r2, [pc, #528]	; (800964c <UART_SetConfig+0x930>)
 800943a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800943e:	b29b      	uxth	r3, r3
 8009440:	2200      	movs	r2, #0
 8009442:	603b      	str	r3, [r7, #0]
 8009444:	607a      	str	r2, [r7, #4]
 8009446:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800944e:	f7f6 ff97 	bl	8000380 <__aeabi_uldivmod>
 8009452:	4602      	mov	r2, r0
 8009454:	460b      	mov	r3, r1
 8009456:	4610      	mov	r0, r2
 8009458:	4619      	mov	r1, r3
 800945a:	f04f 0200 	mov.w	r2, #0
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	020b      	lsls	r3, r1, #8
 8009464:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009468:	0202      	lsls	r2, r0, #8
 800946a:	6979      	ldr	r1, [r7, #20]
 800946c:	6849      	ldr	r1, [r1, #4]
 800946e:	0849      	lsrs	r1, r1, #1
 8009470:	2000      	movs	r0, #0
 8009472:	460c      	mov	r4, r1
 8009474:	4605      	mov	r5, r0
 8009476:	eb12 0804 	adds.w	r8, r2, r4
 800947a:	eb43 0905 	adc.w	r9, r3, r5
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	469a      	mov	sl, r3
 8009486:	4693      	mov	fp, r2
 8009488:	4652      	mov	r2, sl
 800948a:	465b      	mov	r3, fp
 800948c:	4640      	mov	r0, r8
 800948e:	4649      	mov	r1, r9
 8009490:	f7f6 ff76 	bl	8000380 <__aeabi_uldivmod>
 8009494:	4602      	mov	r2, r0
 8009496:	460b      	mov	r3, r1
 8009498:	4613      	mov	r3, r2
 800949a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094a2:	d308      	bcc.n	80094b6 <UART_SetConfig+0x79a>
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094aa:	d204      	bcs.n	80094b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094b2:	60da      	str	r2, [r3, #12]
 80094b4:	e17c      	b.n	80097b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80094bc:	e178      	b.n	80097b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c6:	f040 80c5 	bne.w	8009654 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80094ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	dc48      	bgt.n	8009564 <UART_SetConfig+0x848>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	db7b      	blt.n	80095ce <UART_SetConfig+0x8b2>
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d879      	bhi.n	80095ce <UART_SetConfig+0x8b2>
 80094da:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <UART_SetConfig+0x7c4>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	0800956b 	.word	0x0800956b
 80094e4:	08009573 	.word	0x08009573
 80094e8:	080095cf 	.word	0x080095cf
 80094ec:	080095cf 	.word	0x080095cf
 80094f0:	0800957b 	.word	0x0800957b
 80094f4:	080095cf 	.word	0x080095cf
 80094f8:	080095cf 	.word	0x080095cf
 80094fc:	080095cf 	.word	0x080095cf
 8009500:	0800958b 	.word	0x0800958b
 8009504:	080095cf 	.word	0x080095cf
 8009508:	080095cf 	.word	0x080095cf
 800950c:	080095cf 	.word	0x080095cf
 8009510:	080095cf 	.word	0x080095cf
 8009514:	080095cf 	.word	0x080095cf
 8009518:	080095cf 	.word	0x080095cf
 800951c:	080095cf 	.word	0x080095cf
 8009520:	0800959b 	.word	0x0800959b
 8009524:	080095cf 	.word	0x080095cf
 8009528:	080095cf 	.word	0x080095cf
 800952c:	080095cf 	.word	0x080095cf
 8009530:	080095cf 	.word	0x080095cf
 8009534:	080095cf 	.word	0x080095cf
 8009538:	080095cf 	.word	0x080095cf
 800953c:	080095cf 	.word	0x080095cf
 8009540:	080095cf 	.word	0x080095cf
 8009544:	080095cf 	.word	0x080095cf
 8009548:	080095cf 	.word	0x080095cf
 800954c:	080095cf 	.word	0x080095cf
 8009550:	080095cf 	.word	0x080095cf
 8009554:	080095cf 	.word	0x080095cf
 8009558:	080095cf 	.word	0x080095cf
 800955c:	080095cf 	.word	0x080095cf
 8009560:	080095c1 	.word	0x080095c1
 8009564:	2b40      	cmp	r3, #64	; 0x40
 8009566:	d02e      	beq.n	80095c6 <UART_SetConfig+0x8aa>
 8009568:	e031      	b.n	80095ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800956a:	f7fc ffad 	bl	80064c8 <HAL_RCC_GetPCLK1Freq>
 800956e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009570:	e033      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009572:	f7fc ffbf 	bl	80064f4 <HAL_RCC_GetPCLK2Freq>
 8009576:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009578:	e02f      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800957a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe f9ee 	bl	8007960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009588:	e027      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800958a:	f107 0318 	add.w	r3, r7, #24
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe fb3a 	bl	8007c08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009598:	e01f      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800959a:	4b2d      	ldr	r3, [pc, #180]	; (8009650 <UART_SetConfig+0x934>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d009      	beq.n	80095ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095a6:	4b2a      	ldr	r3, [pc, #168]	; (8009650 <UART_SetConfig+0x934>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	08db      	lsrs	r3, r3, #3
 80095ac:	f003 0303 	and.w	r3, r3, #3
 80095b0:	4a24      	ldr	r2, [pc, #144]	; (8009644 <UART_SetConfig+0x928>)
 80095b2:	fa22 f303 	lsr.w	r3, r2, r3
 80095b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80095b8:	e00f      	b.n	80095da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80095ba:	4b22      	ldr	r3, [pc, #136]	; (8009644 <UART_SetConfig+0x928>)
 80095bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095be:	e00c      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80095c0:	4b21      	ldr	r3, [pc, #132]	; (8009648 <UART_SetConfig+0x92c>)
 80095c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095c4:	e009      	b.n	80095da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095cc:	e005      	b.n	80095da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80095d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80095da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80e7 	beq.w	80097b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	4a19      	ldr	r2, [pc, #100]	; (800964c <UART_SetConfig+0x930>)
 80095e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095ec:	461a      	mov	r2, r3
 80095ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80095f4:	005a      	lsls	r2, r3, #1
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	085b      	lsrs	r3, r3, #1
 80095fc:	441a      	add	r2, r3
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	fbb2 f3f3 	udiv	r3, r2, r3
 8009606:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	2b0f      	cmp	r3, #15
 800960c:	d916      	bls.n	800963c <UART_SetConfig+0x920>
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009614:	d212      	bcs.n	800963c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	b29b      	uxth	r3, r3
 800961a:	f023 030f 	bic.w	r3, r3, #15
 800961e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009622:	085b      	lsrs	r3, r3, #1
 8009624:	b29b      	uxth	r3, r3
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	b29a      	uxth	r2, r3
 800962c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800962e:	4313      	orrs	r3, r2
 8009630:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009638:	60da      	str	r2, [r3, #12]
 800963a:	e0b9      	b.n	80097b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009642:	e0b5      	b.n	80097b0 <UART_SetConfig+0xa94>
 8009644:	03d09000 	.word	0x03d09000
 8009648:	003d0900 	.word	0x003d0900
 800964c:	080189d0 	.word	0x080189d0
 8009650:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009654:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009658:	2b20      	cmp	r3, #32
 800965a:	dc49      	bgt.n	80096f0 <UART_SetConfig+0x9d4>
 800965c:	2b00      	cmp	r3, #0
 800965e:	db7c      	blt.n	800975a <UART_SetConfig+0xa3e>
 8009660:	2b20      	cmp	r3, #32
 8009662:	d87a      	bhi.n	800975a <UART_SetConfig+0xa3e>
 8009664:	a201      	add	r2, pc, #4	; (adr r2, 800966c <UART_SetConfig+0x950>)
 8009666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966a:	bf00      	nop
 800966c:	080096f7 	.word	0x080096f7
 8009670:	080096ff 	.word	0x080096ff
 8009674:	0800975b 	.word	0x0800975b
 8009678:	0800975b 	.word	0x0800975b
 800967c:	08009707 	.word	0x08009707
 8009680:	0800975b 	.word	0x0800975b
 8009684:	0800975b 	.word	0x0800975b
 8009688:	0800975b 	.word	0x0800975b
 800968c:	08009717 	.word	0x08009717
 8009690:	0800975b 	.word	0x0800975b
 8009694:	0800975b 	.word	0x0800975b
 8009698:	0800975b 	.word	0x0800975b
 800969c:	0800975b 	.word	0x0800975b
 80096a0:	0800975b 	.word	0x0800975b
 80096a4:	0800975b 	.word	0x0800975b
 80096a8:	0800975b 	.word	0x0800975b
 80096ac:	08009727 	.word	0x08009727
 80096b0:	0800975b 	.word	0x0800975b
 80096b4:	0800975b 	.word	0x0800975b
 80096b8:	0800975b 	.word	0x0800975b
 80096bc:	0800975b 	.word	0x0800975b
 80096c0:	0800975b 	.word	0x0800975b
 80096c4:	0800975b 	.word	0x0800975b
 80096c8:	0800975b 	.word	0x0800975b
 80096cc:	0800975b 	.word	0x0800975b
 80096d0:	0800975b 	.word	0x0800975b
 80096d4:	0800975b 	.word	0x0800975b
 80096d8:	0800975b 	.word	0x0800975b
 80096dc:	0800975b 	.word	0x0800975b
 80096e0:	0800975b 	.word	0x0800975b
 80096e4:	0800975b 	.word	0x0800975b
 80096e8:	0800975b 	.word	0x0800975b
 80096ec:	0800974d 	.word	0x0800974d
 80096f0:	2b40      	cmp	r3, #64	; 0x40
 80096f2:	d02e      	beq.n	8009752 <UART_SetConfig+0xa36>
 80096f4:	e031      	b.n	800975a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096f6:	f7fc fee7 	bl	80064c8 <HAL_RCC_GetPCLK1Freq>
 80096fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80096fc:	e033      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096fe:	f7fc fef9 	bl	80064f4 <HAL_RCC_GetPCLK2Freq>
 8009702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009704:	e02f      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800970a:	4618      	mov	r0, r3
 800970c:	f7fe f928 	bl	8007960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009714:	e027      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009716:	f107 0318 	add.w	r3, r7, #24
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fa74 	bl	8007c08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009724:	e01f      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009726:	4b2d      	ldr	r3, [pc, #180]	; (80097dc <UART_SetConfig+0xac0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0320 	and.w	r3, r3, #32
 800972e:	2b00      	cmp	r3, #0
 8009730:	d009      	beq.n	8009746 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009732:	4b2a      	ldr	r3, [pc, #168]	; (80097dc <UART_SetConfig+0xac0>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	08db      	lsrs	r3, r3, #3
 8009738:	f003 0303 	and.w	r3, r3, #3
 800973c:	4a28      	ldr	r2, [pc, #160]	; (80097e0 <UART_SetConfig+0xac4>)
 800973e:	fa22 f303 	lsr.w	r3, r2, r3
 8009742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009744:	e00f      	b.n	8009766 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009746:	4b26      	ldr	r3, [pc, #152]	; (80097e0 <UART_SetConfig+0xac4>)
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800974a:	e00c      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800974c:	4b25      	ldr	r3, [pc, #148]	; (80097e4 <UART_SetConfig+0xac8>)
 800974e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009750:	e009      	b.n	8009766 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009758:	e005      	b.n	8009766 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009764:	bf00      	nop
    }

    if (pclk != 0U)
 8009766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009768:	2b00      	cmp	r3, #0
 800976a:	d021      	beq.n	80097b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009770:	4a1d      	ldr	r2, [pc, #116]	; (80097e8 <UART_SetConfig+0xacc>)
 8009772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009776:	461a      	mov	r2, r3
 8009778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800977a:	fbb3 f2f2 	udiv	r2, r3, r2
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	085b      	lsrs	r3, r3, #1
 8009784:	441a      	add	r2, r3
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	fbb2 f3f3 	udiv	r3, r2, r3
 800978e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009792:	2b0f      	cmp	r3, #15
 8009794:	d909      	bls.n	80097aa <UART_SetConfig+0xa8e>
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800979c:	d205      	bcs.n	80097aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60da      	str	r2, [r3, #12]
 80097a8:	e002      	b.n	80097b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	2200      	movs	r2, #0
 80097c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	2200      	movs	r2, #0
 80097ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80097cc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3748      	adds	r7, #72	; 0x48
 80097d4:	46bd      	mov	sp, r7
 80097d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097da:	bf00      	nop
 80097dc:	58024400 	.word	0x58024400
 80097e0:	03d09000 	.word	0x03d09000
 80097e4:	003d0900 	.word	0x003d0900
 80097e8:	080189d0 	.word	0x080189d0

080097ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00a      	beq.n	8009816 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d00a      	beq.n	8009838 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983c:	f003 0304 	and.w	r3, r3, #4
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00a      	beq.n	800985a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985e:	f003 0308 	and.w	r3, r3, #8
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	430a      	orrs	r2, r1
 800987a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00a      	beq.n	800989e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	430a      	orrs	r2, r1
 800989c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00a      	beq.n	80098c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01a      	beq.n	8009902 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	430a      	orrs	r2, r1
 80098e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098ea:	d10a      	bne.n	8009902 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	430a      	orrs	r2, r1
 8009900:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00a      	beq.n	8009924 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	430a      	orrs	r2, r1
 8009922:	605a      	str	r2, [r3, #4]
  }
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b098      	sub	sp, #96	; 0x60
 8009934:	af02      	add	r7, sp, #8
 8009936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009940:	f7fa fd0e 	bl	8004360 <HAL_GetTick>
 8009944:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0308 	and.w	r3, r3, #8
 8009950:	2b08      	cmp	r3, #8
 8009952:	d12f      	bne.n	80099b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800995c:	2200      	movs	r2, #0
 800995e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f88e 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d022      	beq.n	80099b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009976:	e853 3f00 	ldrex	r3, [r3]
 800997a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800997c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009982:	653b      	str	r3, [r7, #80]	; 0x50
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	461a      	mov	r2, r3
 800998a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800998c:	647b      	str	r3, [r7, #68]	; 0x44
 800998e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009990:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009994:	e841 2300 	strex	r3, r2, [r1]
 8009998:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800999a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e6      	bne.n	800996e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099b0:	2303      	movs	r3, #3
 80099b2:	e063      	b.n	8009a7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0304 	and.w	r3, r3, #4
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d149      	bne.n	8009a56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ca:	2200      	movs	r2, #0
 80099cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f857 	bl	8009a84 <UART_WaitOnFlagUntilTimeout>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d03c      	beq.n	8009a56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	623b      	str	r3, [r7, #32]
   return(result);
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	461a      	mov	r2, r3
 80099f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099fa:	633b      	str	r3, [r7, #48]	; 0x30
 80099fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a02:	e841 2300 	strex	r3, r2, [r1]
 8009a06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1e6      	bne.n	80099dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3308      	adds	r3, #8
 8009a14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	e853 3f00 	ldrex	r3, [r3]
 8009a1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f023 0301 	bic.w	r3, r3, #1
 8009a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a2e:	61fa      	str	r2, [r7, #28]
 8009a30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a32:	69b9      	ldr	r1, [r7, #24]
 8009a34:	69fa      	ldr	r2, [r7, #28]
 8009a36:	e841 2300 	strex	r3, r2, [r1]
 8009a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1e5      	bne.n	8009a0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2220      	movs	r2, #32
 8009a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e012      	b.n	8009a7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2220      	movs	r2, #32
 8009a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2220      	movs	r2, #32
 8009a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3758      	adds	r7, #88	; 0x58
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	603b      	str	r3, [r7, #0]
 8009a90:	4613      	mov	r3, r2
 8009a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a94:	e049      	b.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9c:	d045      	beq.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a9e:	f7fa fc5f 	bl	8004360 <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	69ba      	ldr	r2, [r7, #24]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d302      	bcc.n	8009ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d101      	bne.n	8009ab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ab4:	2303      	movs	r3, #3
 8009ab6:	e048      	b.n	8009b4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d031      	beq.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	f003 0308 	and.w	r3, r3, #8
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d110      	bne.n	8009af6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2208      	movs	r2, #8
 8009ada:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f000 f839 	bl	8009b54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e029      	b.n	8009b4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69db      	ldr	r3, [r3, #28]
 8009afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b04:	d111      	bne.n	8009b2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 f81f 	bl	8009b54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e00f      	b.n	8009b4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	69da      	ldr	r2, [r3, #28]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	4013      	ands	r3, r2
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	bf0c      	ite	eq
 8009b3a:	2301      	moveq	r3, #1
 8009b3c:	2300      	movne	r3, #0
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	461a      	mov	r2, r3
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d0a6      	beq.n	8009a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b095      	sub	sp, #84	; 0x54
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8009b7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b82:	e841 2300 	strex	r3, r2, [r1]
 8009b86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1e6      	bne.n	8009b5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	3308      	adds	r3, #8
 8009b94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	e853 3f00 	ldrex	r3, [r3]
 8009b9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b9e:	69fa      	ldr	r2, [r7, #28]
 8009ba0:	4b1e      	ldr	r3, [pc, #120]	; (8009c1c <UART_EndRxTransfer+0xc8>)
 8009ba2:	4013      	ands	r3, r2
 8009ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3308      	adds	r3, #8
 8009bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009bb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009bb6:	e841 2300 	strex	r3, r2, [r1]
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e5      	bne.n	8009b8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d118      	bne.n	8009bfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	e853 3f00 	ldrex	r3, [r3]
 8009bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	f023 0310 	bic.w	r3, r3, #16
 8009bde:	647b      	str	r3, [r7, #68]	; 0x44
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	461a      	mov	r2, r3
 8009be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009be8:	61bb      	str	r3, [r7, #24]
 8009bea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bec:	6979      	ldr	r1, [r7, #20]
 8009bee:	69ba      	ldr	r2, [r7, #24]
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1e6      	bne.n	8009bca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2220      	movs	r2, #32
 8009c00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009c10:	bf00      	nop
 8009c12:	3754      	adds	r7, #84	; 0x54
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	effffffe 	.word	0xeffffffe

08009c20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e027      	b.n	8009c86 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2224      	movs	r2, #36	; 0x24
 8009c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0201 	bic.w	r2, r2, #1
 8009c5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2220      	movs	r2, #32
 8009c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d101      	bne.n	8009caa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	e02d      	b.n	8009d06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2224      	movs	r2, #36	; 0x24
 8009cb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f022 0201 	bic.w	r2, r2, #1
 8009cd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f850 	bl	8009d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d101      	bne.n	8009d26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d22:	2302      	movs	r3, #2
 8009d24:	e02d      	b.n	8009d82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2224      	movs	r2, #36	; 0x24
 8009d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0201 	bic.w	r2, r2, #1
 8009d4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f812 	bl	8009d8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2220      	movs	r2, #32
 8009d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d108      	bne.n	8009dae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009dac:	e031      	b.n	8009e12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dae:	2310      	movs	r3, #16
 8009db0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009db2:	2310      	movs	r3, #16
 8009db4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	0e5b      	lsrs	r3, r3, #25
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	0f5b      	lsrs	r3, r3, #29
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	f003 0307 	and.w	r3, r3, #7
 8009dd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	7b3a      	ldrb	r2, [r7, #12]
 8009dda:	4911      	ldr	r1, [pc, #68]	; (8009e20 <UARTEx_SetNbDataToProcess+0x94>)
 8009ddc:	5c8a      	ldrb	r2, [r1, r2]
 8009dde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009de2:	7b3a      	ldrb	r2, [r7, #12]
 8009de4:	490f      	ldr	r1, [pc, #60]	; (8009e24 <UARTEx_SetNbDataToProcess+0x98>)
 8009de6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009de8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009df4:	7bfb      	ldrb	r3, [r7, #15]
 8009df6:	7b7a      	ldrb	r2, [r7, #13]
 8009df8:	4909      	ldr	r1, [pc, #36]	; (8009e20 <UARTEx_SetNbDataToProcess+0x94>)
 8009dfa:	5c8a      	ldrb	r2, [r1, r2]
 8009dfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e00:	7b7a      	ldrb	r2, [r7, #13]
 8009e02:	4908      	ldr	r1, [pc, #32]	; (8009e24 <UARTEx_SetNbDataToProcess+0x98>)
 8009e04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e06:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e12:	bf00      	nop
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	080189e8 	.word	0x080189e8
 8009e24:	080189f0 	.word	0x080189f0

08009e28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e28:	b084      	sub	sp, #16
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b084      	sub	sp, #16
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
 8009e32:	f107 001c 	add.w	r0, r7, #28
 8009e36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d120      	bne.n	8009e82 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68da      	ldr	r2, [r3, #12]
 8009e50:	4b2a      	ldr	r3, [pc, #168]	; (8009efc <USB_CoreInit+0xd4>)
 8009e52:	4013      	ands	r3, r2
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d105      	bne.n	8009e76 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 faac 	bl	800a3d4 <USB_CoreReset>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73fb      	strb	r3, [r7, #15]
 8009e80:	e01a      	b.n	8009eb8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 faa0 	bl	800a3d4 <USB_CoreReset>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	639a      	str	r2, [r3, #56]	; 0x38
 8009eaa:	e005      	b.n	8009eb8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d116      	bne.n	8009eec <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ecc:	4b0c      	ldr	r3, [pc, #48]	; (8009f00 <USB_CoreInit+0xd8>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f043 0206 	orr.w	r2, r3, #6
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	f043 0220 	orr.w	r2, r3, #32
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ef8:	b004      	add	sp, #16
 8009efa:	4770      	bx	lr
 8009efc:	ffbdffbf 	.word	0xffbdffbf
 8009f00:	03ee0000 	.word	0x03ee0000

08009f04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f023 0201 	bic.w	r2, r3, #1
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f26:	b580      	push	{r7, lr}
 8009f28:	b084      	sub	sp, #16
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f42:	78fb      	ldrb	r3, [r7, #3]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d115      	bne.n	8009f74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f54:	2001      	movs	r0, #1
 8009f56:	f7fa fa0f 	bl	8004378 <HAL_Delay>
      ms++;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fa29 	bl	800a3b8 <USB_GetMode>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d01e      	beq.n	8009faa <USB_SetCurrentMode+0x84>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b31      	cmp	r3, #49	; 0x31
 8009f70:	d9f0      	bls.n	8009f54 <USB_SetCurrentMode+0x2e>
 8009f72:	e01a      	b.n	8009faa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d115      	bne.n	8009fa6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f86:	2001      	movs	r0, #1
 8009f88:	f7fa f9f6 	bl	8004378 <HAL_Delay>
      ms++;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa10 	bl	800a3b8 <USB_GetMode>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d005      	beq.n	8009faa <USB_SetCurrentMode+0x84>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b31      	cmp	r3, #49	; 0x31
 8009fa2:	d9f0      	bls.n	8009f86 <USB_SetCurrentMode+0x60>
 8009fa4:	e001      	b.n	8009faa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e005      	b.n	8009fb6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2b32      	cmp	r3, #50	; 0x32
 8009fae:	d101      	bne.n	8009fb4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e000      	b.n	8009fb6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b086      	sub	sp, #24
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009fda:	2300      	movs	r3, #0
 8009fdc:	613b      	str	r3, [r7, #16]
 8009fde:	e009      	b.n	8009ff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	3340      	adds	r3, #64	; 0x40
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	2200      	movs	r2, #0
 8009fec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	613b      	str	r3, [r7, #16]
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	2b0e      	cmp	r3, #14
 8009ff8:	d9f2      	bls.n	8009fe0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d11c      	bne.n	800a03a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a00e:	f043 0302 	orr.w	r3, r3, #2
 800a012:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a018:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	e005      	b.n	800a046 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a04c:	461a      	mov	r2, r3
 800a04e:	2300      	movs	r3, #0
 800a050:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a058:	4619      	mov	r1, r3
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a060:	461a      	mov	r2, r3
 800a062:	680b      	ldr	r3, [r1, #0]
 800a064:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a068:	2b01      	cmp	r3, #1
 800a06a:	d10c      	bne.n	800a086 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d104      	bne.n	800a07c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a072:	2100      	movs	r1, #0
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f965 	bl	800a344 <USB_SetDevSpeed>
 800a07a:	e008      	b.n	800a08e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a07c:	2101      	movs	r1, #1
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 f960 	bl	800a344 <USB_SetDevSpeed>
 800a084:	e003      	b.n	800a08e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a086:	2103      	movs	r1, #3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f95b 	bl	800a344 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a08e:	2110      	movs	r1, #16
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f8f3 	bl	800a27c <USB_FlushTxFifo>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f91f 	bl	800a2e4 <USB_FlushRxFifo>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	613b      	str	r3, [r7, #16]
 800a0d8:	e043      	b.n	800a162 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0f0:	d118      	bne.n	800a124 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10a      	bne.n	800a10e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	015a      	lsls	r2, r3, #5
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a104:	461a      	mov	r2, r3
 800a106:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a10a:	6013      	str	r3, [r2, #0]
 800a10c:	e013      	b.n	800a136 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11a:	461a      	mov	r2, r3
 800a11c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	e008      	b.n	800a136 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a130:	461a      	mov	r2, r3
 800a132:	2300      	movs	r3, #0
 800a134:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	015a      	lsls	r2, r3, #5
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4413      	add	r3, r2
 800a13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a142:	461a      	mov	r2, r3
 800a144:	2300      	movs	r3, #0
 800a146:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a154:	461a      	mov	r2, r3
 800a156:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a15a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	3301      	adds	r3, #1
 800a160:	613b      	str	r3, [r7, #16]
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	429a      	cmp	r2, r3
 800a168:	d3b7      	bcc.n	800a0da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a16a:	2300      	movs	r3, #0
 800a16c:	613b      	str	r3, [r7, #16]
 800a16e:	e043      	b.n	800a1f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a186:	d118      	bne.n	800a1ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19a:	461a      	mov	r2, r3
 800a19c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a1a0:	6013      	str	r3, [r2, #0]
 800a1a2:	e013      	b.n	800a1cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	e008      	b.n	800a1cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d8:	461a      	mov	r2, r3
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	613b      	str	r3, [r7, #16]
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d3b7      	bcc.n	800a170 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a20e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a212:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a220:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a224:	2b00      	cmp	r3, #0
 800a226:	d105      	bne.n	800a234 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	f043 0210 	orr.w	r2, r3, #16
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	699a      	ldr	r2, [r3, #24]
 800a238:	4b0e      	ldr	r3, [pc, #56]	; (800a274 <USB_DevInit+0x2b4>)
 800a23a:	4313      	orrs	r3, r2
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d005      	beq.n	800a252 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	f043 0208 	orr.w	r2, r3, #8
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a254:	2b01      	cmp	r3, #1
 800a256:	d105      	bne.n	800a264 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	699a      	ldr	r2, [r3, #24]
 800a25c:	4b06      	ldr	r3, [pc, #24]	; (800a278 <USB_DevInit+0x2b8>)
 800a25e:	4313      	orrs	r3, r2
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a264:	7dfb      	ldrb	r3, [r7, #23]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a270:	b004      	add	sp, #16
 800a272:	4770      	bx	lr
 800a274:	803c3800 	.word	0x803c3800
 800a278:	40000004 	.word	0x40000004

0800a27c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3301      	adds	r3, #1
 800a28e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4a13      	ldr	r2, [pc, #76]	; (800a2e0 <USB_FlushTxFifo+0x64>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d901      	bls.n	800a29c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e01b      	b.n	800a2d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	daf2      	bge.n	800a28a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	019b      	lsls	r3, r3, #6
 800a2ac:	f043 0220 	orr.w	r2, r3, #32
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	4a08      	ldr	r2, [pc, #32]	; (800a2e0 <USB_FlushTxFifo+0x64>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d901      	bls.n	800a2c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a2c2:	2303      	movs	r3, #3
 800a2c4:	e006      	b.n	800a2d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	f003 0320 	and.w	r3, r3, #32
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	d0f0      	beq.n	800a2b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	00030d40 	.word	0x00030d40

0800a2e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	4a11      	ldr	r2, [pc, #68]	; (800a340 <USB_FlushRxFifo+0x5c>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d901      	bls.n	800a302 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e018      	b.n	800a334 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	2b00      	cmp	r3, #0
 800a308:	daf2      	bge.n	800a2f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a30a:	2300      	movs	r3, #0
 800a30c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2210      	movs	r2, #16
 800a312:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	3301      	adds	r3, #1
 800a318:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	4a08      	ldr	r2, [pc, #32]	; (800a340 <USB_FlushRxFifo+0x5c>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d901      	bls.n	800a326 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e006      	b.n	800a334 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f003 0310 	and.w	r3, r3, #16
 800a32e:	2b10      	cmp	r3, #16
 800a330:	d0f0      	beq.n	800a314 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	00030d40 	.word	0x00030d40

0800a344 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	68f9      	ldr	r1, [r7, #12]
 800a360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a364:	4313      	orrs	r3, r2
 800a366:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr

0800a376 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a376:	b480      	push	{r7}
 800a378:	b085      	sub	sp, #20
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a390:	f023 0303 	bic.w	r3, r3, #3
 800a394:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a3a4:	f043 0302 	orr.w	r3, r3, #2
 800a3a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	f003 0301 	and.w	r3, r3, #1
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	4a13      	ldr	r2, [pc, #76]	; (800a438 <USB_CoreReset+0x64>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d901      	bls.n	800a3f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	e01b      	b.n	800a42a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	daf2      	bge.n	800a3e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	f043 0201 	orr.w	r2, r3, #1
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	3301      	adds	r3, #1
 800a40e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4a09      	ldr	r2, [pc, #36]	; (800a438 <USB_CoreReset+0x64>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d901      	bls.n	800a41c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e006      	b.n	800a42a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b01      	cmp	r3, #1
 800a426:	d0f0      	beq.n	800a40a <USB_CoreReset+0x36>

  return HAL_OK;
 800a428:	2300      	movs	r3, #0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	00030d40 	.word	0x00030d40

0800a43c <checkint>:
 800a43c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a440:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800a444:	429a      	cmp	r2, r3
 800a446:	b570      	push	{r4, r5, r6, lr}
 800a448:	dd2a      	ble.n	800a4a0 <checkint+0x64>
 800a44a:	f240 4333 	movw	r3, #1075	; 0x433
 800a44e:	429a      	cmp	r2, r3
 800a450:	dc24      	bgt.n	800a49c <checkint+0x60>
 800a452:	1a9b      	subs	r3, r3, r2
 800a454:	f1a3 0620 	sub.w	r6, r3, #32
 800a458:	f04f 32ff 	mov.w	r2, #4294967295
 800a45c:	fa02 f403 	lsl.w	r4, r2, r3
 800a460:	fa02 f606 	lsl.w	r6, r2, r6
 800a464:	f1c3 0520 	rsb	r5, r3, #32
 800a468:	fa22 f505 	lsr.w	r5, r2, r5
 800a46c:	4334      	orrs	r4, r6
 800a46e:	432c      	orrs	r4, r5
 800a470:	409a      	lsls	r2, r3
 800a472:	ea20 0202 	bic.w	r2, r0, r2
 800a476:	ea21 0404 	bic.w	r4, r1, r4
 800a47a:	4322      	orrs	r2, r4
 800a47c:	f1a3 0420 	sub.w	r4, r3, #32
 800a480:	f1c3 0220 	rsb	r2, r3, #32
 800a484:	d10c      	bne.n	800a4a0 <checkint+0x64>
 800a486:	40d8      	lsrs	r0, r3
 800a488:	fa01 f302 	lsl.w	r3, r1, r2
 800a48c:	4318      	orrs	r0, r3
 800a48e:	40e1      	lsrs	r1, r4
 800a490:	4308      	orrs	r0, r1
 800a492:	f000 0001 	and.w	r0, r0, #1
 800a496:	f1d0 0002 	rsbs	r0, r0, #2
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	2002      	movs	r0, #2
 800a49e:	e7fc      	b.n	800a49a <checkint+0x5e>
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	e7fa      	b.n	800a49a <checkint+0x5e>
 800a4a4:	0000      	movs	r0, r0
	...

0800a4a8 <pow>:
 800a4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ac:	ee10 4a90 	vmov	r4, s1
 800a4b0:	ed2d 8b0a 	vpush	{d8-d12}
 800a4b4:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 800a4b8:	ee11 7a90 	vmov	r7, s3
 800a4bc:	f10a 32ff 	add.w	r2, sl, #4294967295
 800a4c0:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	ee10 6a10 	vmov	r6, s0
 800a4ca:	ee11 0a10 	vmov	r0, s2
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	46d4      	mov	ip, sl
 800a4d2:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800a4d6:	d806      	bhi.n	800a4e6 <pow+0x3e>
 800a4d8:	f3c5 030a 	ubfx	r3, r5, #0, #11
 800a4dc:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 800a4e0:	2b7f      	cmp	r3, #127	; 0x7f
 800a4e2:	f240 8156 	bls.w	800a792 <pow+0x2ea>
 800a4e6:	1802      	adds	r2, r0, r0
 800a4e8:	eb47 0107 	adc.w	r1, r7, r7
 800a4ec:	f06f 0e01 	mvn.w	lr, #1
 800a4f0:	f112 39ff 	adds.w	r9, r2, #4294967295
 800a4f4:	f141 38ff 	adc.w	r8, r1, #4294967295
 800a4f8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 800a4fc:	45ce      	cmp	lr, r9
 800a4fe:	eb73 0808 	sbcs.w	r8, r3, r8
 800a502:	d23f      	bcs.n	800a584 <pow+0xdc>
 800a504:	ea52 0301 	orrs.w	r3, r2, r1
 800a508:	f04f 0300 	mov.w	r3, #0
 800a50c:	d10c      	bne.n	800a528 <pow+0x80>
 800a50e:	19b6      	adds	r6, r6, r6
 800a510:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800a514:	4164      	adcs	r4, r4
 800a516:	42b3      	cmp	r3, r6
 800a518:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a51c:	41a3      	sbcs	r3, r4
 800a51e:	f0c0 808c 	bcc.w	800a63a <pow+0x192>
 800a522:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a526:	e028      	b.n	800a57a <pow+0xd2>
 800a528:	4da3      	ldr	r5, [pc, #652]	; (800a7b8 <pow+0x310>)
 800a52a:	42ac      	cmp	r4, r5
 800a52c:	bf08      	it	eq
 800a52e:	429e      	cmpeq	r6, r3
 800a530:	d107      	bne.n	800a542 <pow+0x9a>
 800a532:	1800      	adds	r0, r0, r0
 800a534:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 800a538:	417f      	adcs	r7, r7
 800a53a:	4283      	cmp	r3, r0
 800a53c:	4b9f      	ldr	r3, [pc, #636]	; (800a7bc <pow+0x314>)
 800a53e:	41bb      	sbcs	r3, r7
 800a540:	e7ed      	b.n	800a51e <pow+0x76>
 800a542:	19b6      	adds	r6, r6, r6
 800a544:	489e      	ldr	r0, [pc, #632]	; (800a7c0 <pow+0x318>)
 800a546:	4164      	adcs	r4, r4
 800a548:	42b3      	cmp	r3, r6
 800a54a:	eb70 0504 	sbcs.w	r5, r0, r4
 800a54e:	d374      	bcc.n	800a63a <pow+0x192>
 800a550:	4281      	cmp	r1, r0
 800a552:	bf08      	it	eq
 800a554:	429a      	cmpeq	r2, r3
 800a556:	d170      	bne.n	800a63a <pow+0x192>
 800a558:	4a9a      	ldr	r2, [pc, #616]	; (800a7c4 <pow+0x31c>)
 800a55a:	4294      	cmp	r4, r2
 800a55c:	bf08      	it	eq
 800a55e:	429e      	cmpeq	r6, r3
 800a560:	d0df      	beq.n	800a522 <pow+0x7a>
 800a562:	4294      	cmp	r4, r2
 800a564:	ea6f 0707 	mvn.w	r7, r7
 800a568:	bf34      	ite	cc
 800a56a:	2400      	movcc	r4, #0
 800a56c:	2401      	movcs	r4, #1
 800a56e:	0fff      	lsrs	r7, r7, #31
 800a570:	42bc      	cmp	r4, r7
 800a572:	f040 81d9 	bne.w	800a928 <pow+0x480>
 800a576:	ee21 0b01 	vmul.f64	d0, d1, d1
 800a57a:	b006      	add	sp, #24
 800a57c:	ecbd 8b0a 	vpop	{d8-d12}
 800a580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a584:	eb16 0806 	adds.w	r8, r6, r6
 800a588:	eb44 0904 	adc.w	r9, r4, r4
 800a58c:	f118 31ff 	adds.w	r1, r8, #4294967295
 800a590:	f169 0200 	sbc.w	r2, r9, #0
 800a594:	458e      	cmp	lr, r1
 800a596:	4193      	sbcs	r3, r2
 800a598:	d223      	bcs.n	800a5e2 <pow+0x13a>
 800a59a:	ee20 0b00 	vmul.f64	d0, d0, d0
 800a59e:	2c00      	cmp	r4, #0
 800a5a0:	da12      	bge.n	800a5c8 <pow+0x120>
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	f7ff ff4a 	bl	800a43c <checkint>
 800a5a8:	2801      	cmp	r0, #1
 800a5aa:	d10d      	bne.n	800a5c8 <pow+0x120>
 800a5ac:	eeb1 0b40 	vneg.f64	d0, d0
 800a5b0:	ea58 0309 	orrs.w	r3, r8, r9
 800a5b4:	d10a      	bne.n	800a5cc <pow+0x124>
 800a5b6:	2f00      	cmp	r7, #0
 800a5b8:	dadf      	bge.n	800a57a <pow+0xd2>
 800a5ba:	b006      	add	sp, #24
 800a5bc:	ecbd 8b0a 	vpop	{d8-d12}
 800a5c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c4:	f000 ba8c 	b.w	800aae0 <__math_divzero>
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	e7f1      	b.n	800a5b0 <pow+0x108>
 800a5cc:	2f00      	cmp	r7, #0
 800a5ce:	dad4      	bge.n	800a57a <pow+0xd2>
 800a5d0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a5d4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800a5d8:	ed8d 7b00 	vstr	d7, [sp]
 800a5dc:	ed9d 0b00 	vldr	d0, [sp]
 800a5e0:	e7cb      	b.n	800a57a <pow+0xd2>
 800a5e2:	2c00      	cmp	r4, #0
 800a5e4:	da2c      	bge.n	800a640 <pow+0x198>
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7ff ff28 	bl	800a43c <checkint>
 800a5ec:	b930      	cbnz	r0, 800a5fc <pow+0x154>
 800a5ee:	b006      	add	sp, #24
 800a5f0:	ecbd 8b0a 	vpop	{d8-d12}
 800a5f4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	f000 ba8a 	b.w	800ab10 <__math_invalid>
 800a5fc:	2801      	cmp	r0, #1
 800a5fe:	bf14      	ite	ne
 800a600:	2000      	movne	r0, #0
 800a602:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800a606:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a60a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 800a60e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 800a612:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 800a616:	2b7f      	cmp	r3, #127	; 0x7f
 800a618:	d92d      	bls.n	800a676 <pow+0x1ce>
 800a61a:	4b67      	ldr	r3, [pc, #412]	; (800a7b8 <pow+0x310>)
 800a61c:	2000      	movs	r0, #0
 800a61e:	429c      	cmp	r4, r3
 800a620:	bf08      	it	eq
 800a622:	4286      	cmpeq	r6, r0
 800a624:	f43f af7d 	beq.w	800a522 <pow+0x7a>
 800a628:	f240 31bd 	movw	r1, #957	; 0x3bd
 800a62c:	428a      	cmp	r2, r1
 800a62e:	d80c      	bhi.n	800a64a <pow+0x1a2>
 800a630:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a634:	42b0      	cmp	r0, r6
 800a636:	41a3      	sbcs	r3, r4
 800a638:	d204      	bcs.n	800a644 <pow+0x19c>
 800a63a:	ee31 0b00 	vadd.f64	d0, d1, d0
 800a63e:	e79c      	b.n	800a57a <pow+0xd2>
 800a640:	2000      	movs	r0, #0
 800a642:	e7e4      	b.n	800a60e <pow+0x166>
 800a644:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a648:	e797      	b.n	800a57a <pow+0xd2>
 800a64a:	2e01      	cmp	r6, #1
 800a64c:	eb74 0303 	sbcs.w	r3, r4, r3
 800a650:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a654:	bf34      	ite	cc
 800a656:	2301      	movcc	r3, #1
 800a658:	2300      	movcs	r3, #0
 800a65a:	4295      	cmp	r5, r2
 800a65c:	bf8c      	ite	hi
 800a65e:	2500      	movhi	r5, #0
 800a660:	2501      	movls	r5, #1
 800a662:	42ab      	cmp	r3, r5
 800a664:	f000 809d 	beq.w	800a7a2 <pow+0x2fa>
 800a668:	b006      	add	sp, #24
 800a66a:	ecbd 8b0a 	vpop	{d8-d12}
 800a66e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a672:	f000 ba2d 	b.w	800aad0 <__math_oflow>
 800a676:	f1bc 0f00 	cmp.w	ip, #0
 800a67a:	d10b      	bne.n	800a694 <pow+0x1ec>
 800a67c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800a7b0 <pow+0x308>
 800a680:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a684:	ec53 2b17 	vmov	r2, r3, d7
 800a688:	ee17 6a10 	vmov	r6, s14
 800a68c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800a690:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800a694:	4b4c      	ldr	r3, [pc, #304]	; (800a7c8 <pow+0x320>)
 800a696:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800a69a:	4423      	add	r3, r4
 800a69c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800a6a0:	1519      	asrs	r1, r3, #20
 800a6a2:	0d1b      	lsrs	r3, r3, #20
 800a6a4:	051b      	lsls	r3, r3, #20
 800a6a6:	eba4 0903 	sub.w	r9, r4, r3
 800a6aa:	4b48      	ldr	r3, [pc, #288]	; (800a7cc <pow+0x324>)
 800a6ac:	ee04 1a10 	vmov	s8, r1
 800a6b0:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800a6b4:	f1b6 0800 	subs.w	r8, r6, #0
 800a6b8:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 800a6bc:	ec49 8b15 	vmov	d5, r8, r9
 800a6c0:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800a6c4:	eea5 6b07 	vfma.f64	d6, d5, d7
 800a6c8:	ed93 7b00 	vldr	d7, [r3]
 800a6cc:	ed93 5b02 	vldr	d5, [r3, #8]
 800a6d0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800a6d4:	eea4 2b07 	vfma.f64	d2, d4, d7
 800a6d8:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 800a6dc:	ee36 ab02 	vadd.f64	d10, d6, d2
 800a6e0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800a6e4:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a6e8:	ed93 5b04 	vldr	d5, [r3, #16]
 800a6ec:	ee32 2b06 	vadd.f64	d2, d2, d6
 800a6f0:	ee37 7b02 	vadd.f64	d7, d7, d2
 800a6f4:	ee26 5b05 	vmul.f64	d5, d6, d5
 800a6f8:	ed93 4b08 	vldr	d4, [r3, #32]
 800a6fc:	ee26 0b05 	vmul.f64	d0, d6, d5
 800a700:	eeb0 9b40 	vmov.f64	d9, d0
 800a704:	ee95 9b06 	vfnms.f64	d9, d5, d6
 800a708:	ed93 5b06 	vldr	d5, [r3, #24]
 800a70c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 800a710:	ee26 bb00 	vmul.f64	d11, d6, d0
 800a714:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800a718:	eea6 5b04 	vfma.f64	d5, d6, d4
 800a71c:	ee3a ab48 	vsub.f64	d10, d10, d8
 800a720:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 800a724:	ee37 9b09 	vadd.f64	d9, d7, d9
 800a728:	ee3a ab00 	vadd.f64	d10, d10, d0
 800a72c:	eea6 4b03 	vfma.f64	d4, d6, d3
 800a730:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800a734:	ee39 ab0a 	vadd.f64	d10, d9, d10
 800a738:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800a73c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800a740:	eea0 4b03 	vfma.f64	d4, d0, d3
 800a744:	eea0 5b04 	vfma.f64	d5, d0, d4
 800a748:	eeab ab05 	vfma.f64	d10, d11, d5
 800a74c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 800a750:	ee21 7b06 	vmul.f64	d7, d1, d6
 800a754:	ee17 3a90 	vmov	r3, s15
 800a758:	eeb0 5b47 	vmov.f64	d5, d7
 800a75c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800a760:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800a764:	18b2      	adds	r2, r6, r2
 800a766:	2a3e      	cmp	r2, #62	; 0x3e
 800a768:	ee91 5b06 	vfnms.f64	d5, d1, d6
 800a76c:	ee38 8b46 	vsub.f64	d8, d8, d6
 800a770:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800a774:	eea1 5b0a 	vfma.f64	d5, d1, d10
 800a778:	d92b      	bls.n	800a7d2 <pow+0x32a>
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	da0b      	bge.n	800a796 <pow+0x2ee>
 800a77e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800a782:	ee37 0b00 	vadd.f64	d0, d7, d0
 800a786:	2800      	cmp	r0, #0
 800a788:	f43f aef7 	beq.w	800a57a <pow+0xd2>
 800a78c:	eeb1 0b40 	vneg.f64	d0, d0
 800a790:	e6f3      	b.n	800a57a <pow+0xd2>
 800a792:	2000      	movs	r0, #0
 800a794:	e77e      	b.n	800a694 <pow+0x1ec>
 800a796:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 800a79a:	d919      	bls.n	800a7d0 <pow+0x328>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f6bf af63 	bge.w	800a668 <pow+0x1c0>
 800a7a2:	b006      	add	sp, #24
 800a7a4:	ecbd 8b0a 	vpop	{d8-d12}
 800a7a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	f000 b988 	b.w	800aac0 <__math_uflow>
 800a7b0:	00000000 	.word	0x00000000
 800a7b4:	43300000 	.word	0x43300000
 800a7b8:	3ff00000 	.word	0x3ff00000
 800a7bc:	fff00000 	.word	0xfff00000
 800a7c0:	ffe00000 	.word	0xffe00000
 800a7c4:	7fe00000 	.word	0x7fe00000
 800a7c8:	c0196aab 	.word	0xc0196aab
 800a7cc:	080189f8 	.word	0x080189f8
 800a7d0:	2600      	movs	r6, #0
 800a7d2:	495d      	ldr	r1, [pc, #372]	; (800a948 <pow+0x4a0>)
 800a7d4:	ed91 4b02 	vldr	d4, [r1, #8]
 800a7d8:	ed91 3b00 	vldr	d3, [r1]
 800a7dc:	eeb0 6b44 	vmov.f64	d6, d4
 800a7e0:	eea7 6b03 	vfma.f64	d6, d7, d3
 800a7e4:	ee16 5a10 	vmov	r5, s12
 800a7e8:	ee36 6b44 	vsub.f64	d6, d6, d4
 800a7ec:	ed91 4b04 	vldr	d4, [r1, #16]
 800a7f0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800a7f4:	eea6 7b04 	vfma.f64	d7, d6, d4
 800a7f8:	eeb0 0b47 	vmov.f64	d0, d7
 800a7fc:	ed91 7b06 	vldr	d7, [r1, #24]
 800a800:	18dc      	adds	r4, r3, r3
 800a802:	f104 030f 	add.w	r3, r4, #15
 800a806:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800a80a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800a80e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800a812:	ee35 0b00 	vadd.f64	d0, d5, d0
 800a816:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a81a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 800a81e:	ed91 5b08 	vldr	d5, [r1, #32]
 800a822:	ee30 7b07 	vadd.f64	d7, d0, d7
 800a826:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800a82a:	eea0 5b04 	vfma.f64	d5, d0, d4
 800a82e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800a832:	eea6 7b05 	vfma.f64	d7, d6, d5
 800a836:	ee26 6b06 	vmul.f64	d6, d6, d6
 800a83a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800a83e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800a842:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800a846:	eea0 5b04 	vfma.f64	d5, d0, d4
 800a84a:	1940      	adds	r0, r0, r5
 800a84c:	2700      	movs	r7, #0
 800a84e:	eb17 020c 	adds.w	r2, r7, ip
 800a852:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800a856:	eea6 7b05 	vfma.f64	d7, d6, d5
 800a85a:	2e00      	cmp	r6, #0
 800a85c:	d15f      	bne.n	800a91e <pow+0x476>
 800a85e:	42bd      	cmp	r5, r7
 800a860:	db13      	blt.n	800a88a <pow+0x3e2>
 800a862:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800a866:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800a86a:	4610      	mov	r0, r2
 800a86c:	ec41 0b10 	vmov	d0, r0, r1
 800a870:	eea7 0b00 	vfma.f64	d0, d7, d0
 800a874:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a930 <pow+0x488>
 800a878:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a87c:	b006      	add	sp, #24
 800a87e:	ecbd 8b0a 	vpop	{d8-d12}
 800a882:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a886:	f000 b95b 	b.w	800ab40 <__math_check_oflow>
 800a88a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a88e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800a892:	4610      	mov	r0, r2
 800a894:	ec41 0b15 	vmov	d5, r0, r1
 800a898:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800a89c:	ee27 6b05 	vmul.f64	d6, d7, d5
 800a8a0:	ee35 7b06 	vadd.f64	d7, d5, d6
 800a8a4:	eeb0 3bc7 	vabs.f64	d3, d7
 800a8a8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800a8ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b0:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800a938 <pow+0x490>
 800a8b4:	d52a      	bpl.n	800a90c <pow+0x464>
 800a8b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a8ba:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c2:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800a8c6:	ee35 6b06 	vadd.f64	d6, d5, d6
 800a8ca:	bf48      	it	mi
 800a8cc:	eeb0 4b43 	vmovmi.f64	d4, d3
 800a8d0:	ee37 3b04 	vadd.f64	d3, d7, d4
 800a8d4:	ee34 5b43 	vsub.f64	d5, d4, d3
 800a8d8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a8dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a8e0:	ee37 7b03 	vadd.f64	d7, d7, d3
 800a8e4:	ee37 7b44 	vsub.f64	d7, d7, d4
 800a8e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f0:	d104      	bne.n	800a8fc <pow+0x454>
 800a8f2:	4632      	mov	r2, r6
 800a8f4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a8f8:	ec43 2b17 	vmov	d7, r2, r3
 800a8fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a900:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a904:	ee26 6b00 	vmul.f64	d6, d6, d0
 800a908:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a90c:	ee27 0b00 	vmul.f64	d0, d7, d0
 800a910:	b006      	add	sp, #24
 800a912:	ecbd 8b0a 	vpop	{d8-d12}
 800a916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a91a:	f000 b908 	b.w	800ab2e <__math_check_uflow>
 800a91e:	ec43 2b10 	vmov	d0, r2, r3
 800a922:	eea7 0b00 	vfma.f64	d0, d7, d0
 800a926:	e628      	b.n	800a57a <pow+0xd2>
 800a928:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800a940 <pow+0x498>
 800a92c:	e625      	b.n	800a57a <pow+0xd2>
 800a92e:	bf00      	nop
 800a930:	00000000 	.word	0x00000000
 800a934:	7f000000 	.word	0x7f000000
 800a938:	00000000 	.word	0x00000000
 800a93c:	00100000 	.word	0x00100000
	...
 800a948:	08019a40 	.word	0x08019a40
 800a94c:	00000000 	.word	0x00000000

0800a950 <ceil>:
 800a950:	ee10 1a90 	vmov	r1, s1
 800a954:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a958:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a95c:	2b13      	cmp	r3, #19
 800a95e:	b530      	push	{r4, r5, lr}
 800a960:	ee10 0a10 	vmov	r0, s0
 800a964:	ee10 5a10 	vmov	r5, s0
 800a968:	dc2f      	bgt.n	800a9ca <ceil+0x7a>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	da13      	bge.n	800a996 <ceil+0x46>
 800a96e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800aa30 <ceil+0xe0>
 800a972:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a976:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a97e:	dd05      	ble.n	800a98c <ceil+0x3c>
 800a980:	2900      	cmp	r1, #0
 800a982:	db4c      	blt.n	800aa1e <ceil+0xce>
 800a984:	4301      	orrs	r1, r0
 800a986:	d04e      	beq.n	800aa26 <ceil+0xd6>
 800a988:	492b      	ldr	r1, [pc, #172]	; (800aa38 <ceil+0xe8>)
 800a98a:	2000      	movs	r0, #0
 800a98c:	460b      	mov	r3, r1
 800a98e:	4602      	mov	r2, r0
 800a990:	ec43 2b10 	vmov	d0, r2, r3
 800a994:	e020      	b.n	800a9d8 <ceil+0x88>
 800a996:	4a29      	ldr	r2, [pc, #164]	; (800aa3c <ceil+0xec>)
 800a998:	411a      	asrs	r2, r3
 800a99a:	ea01 0402 	and.w	r4, r1, r2
 800a99e:	4304      	orrs	r4, r0
 800a9a0:	d01a      	beq.n	800a9d8 <ceil+0x88>
 800a9a2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 800aa30 <ceil+0xe0>
 800a9a6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a9aa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b2:	ddeb      	ble.n	800a98c <ceil+0x3c>
 800a9b4:	2900      	cmp	r1, #0
 800a9b6:	bfc2      	ittt	gt
 800a9b8:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 800a9bc:	fa40 f303 	asrgt.w	r3, r0, r3
 800a9c0:	18c9      	addgt	r1, r1, r3
 800a9c2:	ea21 0102 	bic.w	r1, r1, r2
 800a9c6:	2000      	movs	r0, #0
 800a9c8:	e7e0      	b.n	800a98c <ceil+0x3c>
 800a9ca:	2b33      	cmp	r3, #51	; 0x33
 800a9cc:	dd05      	ble.n	800a9da <ceil+0x8a>
 800a9ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9d2:	d101      	bne.n	800a9d8 <ceil+0x88>
 800a9d4:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a9d8:	bd30      	pop	{r4, r5, pc}
 800a9da:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800a9de:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e2:	40e2      	lsrs	r2, r4
 800a9e4:	4202      	tst	r2, r0
 800a9e6:	d0f7      	beq.n	800a9d8 <ceil+0x88>
 800a9e8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800aa30 <ceil+0xe0>
 800a9ec:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a9f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f8:	ddc8      	ble.n	800a98c <ceil+0x3c>
 800a9fa:	2900      	cmp	r1, #0
 800a9fc:	dd02      	ble.n	800aa04 <ceil+0xb4>
 800a9fe:	2b14      	cmp	r3, #20
 800aa00:	d103      	bne.n	800aa0a <ceil+0xba>
 800aa02:	3101      	adds	r1, #1
 800aa04:	ea20 0002 	bic.w	r0, r0, r2
 800aa08:	e7c0      	b.n	800a98c <ceil+0x3c>
 800aa0a:	2401      	movs	r4, #1
 800aa0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800aa10:	fa04 f303 	lsl.w	r3, r4, r3
 800aa14:	4418      	add	r0, r3
 800aa16:	42a8      	cmp	r0, r5
 800aa18:	bf38      	it	cc
 800aa1a:	1909      	addcc	r1, r1, r4
 800aa1c:	e7f2      	b.n	800aa04 <ceil+0xb4>
 800aa1e:	2000      	movs	r0, #0
 800aa20:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800aa24:	e7b2      	b.n	800a98c <ceil+0x3c>
 800aa26:	4608      	mov	r0, r1
 800aa28:	e7b0      	b.n	800a98c <ceil+0x3c>
 800aa2a:	bf00      	nop
 800aa2c:	f3af 8000 	nop.w
 800aa30:	8800759c 	.word	0x8800759c
 800aa34:	7e37e43c 	.word	0x7e37e43c
 800aa38:	3ff00000 	.word	0x3ff00000
 800aa3c:	000fffff 	.word	0x000fffff

0800aa40 <sqrt>:
 800aa40:	b508      	push	{r3, lr}
 800aa42:	ed2d 8b04 	vpush	{d8-d9}
 800aa46:	eeb0 8b40 	vmov.f64	d8, d0
 800aa4a:	f000 f819 	bl	800aa80 <__ieee754_sqrt>
 800aa4e:	eeb4 8b48 	vcmp.f64	d8, d8
 800aa52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa56:	d60c      	bvs.n	800aa72 <sqrt+0x32>
 800aa58:	ed9f 9b07 	vldr	d9, [pc, #28]	; 800aa78 <sqrt+0x38>
 800aa5c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800aa60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa64:	d505      	bpl.n	800aa72 <sqrt+0x32>
 800aa66:	f000 f8a5 	bl	800abb4 <__errno>
 800aa6a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800aa6e:	2321      	movs	r3, #33	; 0x21
 800aa70:	6003      	str	r3, [r0, #0]
 800aa72:	ecbd 8b04 	vpop	{d8-d9}
 800aa76:	bd08      	pop	{r3, pc}
	...

0800aa80 <__ieee754_sqrt>:
 800aa80:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800aa84:	4770      	bx	lr

0800aa86 <with_errno>:
 800aa86:	b513      	push	{r0, r1, r4, lr}
 800aa88:	4604      	mov	r4, r0
 800aa8a:	ed8d 0b00 	vstr	d0, [sp]
 800aa8e:	f000 f891 	bl	800abb4 <__errno>
 800aa92:	ed9d 0b00 	vldr	d0, [sp]
 800aa96:	6004      	str	r4, [r0, #0]
 800aa98:	b002      	add	sp, #8
 800aa9a:	bd10      	pop	{r4, pc}

0800aa9c <xflow>:
 800aa9c:	b082      	sub	sp, #8
 800aa9e:	b158      	cbz	r0, 800aab8 <xflow+0x1c>
 800aaa0:	eeb1 7b40 	vneg.f64	d7, d0
 800aaa4:	ed8d 7b00 	vstr	d7, [sp]
 800aaa8:	ed9d 7b00 	vldr	d7, [sp]
 800aaac:	2022      	movs	r0, #34	; 0x22
 800aaae:	ee20 0b07 	vmul.f64	d0, d0, d7
 800aab2:	b002      	add	sp, #8
 800aab4:	f7ff bfe7 	b.w	800aa86 <with_errno>
 800aab8:	eeb0 7b40 	vmov.f64	d7, d0
 800aabc:	e7f2      	b.n	800aaa4 <xflow+0x8>
	...

0800aac0 <__math_uflow>:
 800aac0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aac8 <__math_uflow+0x8>
 800aac4:	f7ff bfea 	b.w	800aa9c <xflow>
 800aac8:	00000000 	.word	0x00000000
 800aacc:	10000000 	.word	0x10000000

0800aad0 <__math_oflow>:
 800aad0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aad8 <__math_oflow+0x8>
 800aad4:	f7ff bfe2 	b.w	800aa9c <xflow>
 800aad8:	00000000 	.word	0x00000000
 800aadc:	70000000 	.word	0x70000000

0800aae0 <__math_divzero>:
 800aae0:	b082      	sub	sp, #8
 800aae2:	2800      	cmp	r0, #0
 800aae4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800aae8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800aaec:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800aaf0:	ed8d 7b00 	vstr	d7, [sp]
 800aaf4:	ed9d 0b00 	vldr	d0, [sp]
 800aaf8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800ab08 <__math_divzero+0x28>
 800aafc:	2022      	movs	r0, #34	; 0x22
 800aafe:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800ab02:	b002      	add	sp, #8
 800ab04:	f7ff bfbf 	b.w	800aa86 <with_errno>
	...

0800ab10 <__math_invalid>:
 800ab10:	eeb0 7b40 	vmov.f64	d7, d0
 800ab14:	eeb4 7b47 	vcmp.f64	d7, d7
 800ab18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ab20:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800ab24:	d602      	bvs.n	800ab2c <__math_invalid+0x1c>
 800ab26:	2021      	movs	r0, #33	; 0x21
 800ab28:	f7ff bfad 	b.w	800aa86 <with_errno>
 800ab2c:	4770      	bx	lr

0800ab2e <__math_check_uflow>:
 800ab2e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ab32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab36:	d102      	bne.n	800ab3e <__math_check_uflow+0x10>
 800ab38:	2022      	movs	r0, #34	; 0x22
 800ab3a:	f7ff bfa4 	b.w	800aa86 <with_errno>
 800ab3e:	4770      	bx	lr

0800ab40 <__math_check_oflow>:
 800ab40:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ab60 <__math_check_oflow+0x20>
 800ab44:	eeb0 7bc0 	vabs.f64	d7, d0
 800ab48:	eeb4 7b46 	vcmp.f64	d7, d6
 800ab4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab50:	dd02      	ble.n	800ab58 <__math_check_oflow+0x18>
 800ab52:	2022      	movs	r0, #34	; 0x22
 800ab54:	f7ff bf97 	b.w	800aa86 <with_errno>
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	f3af 8000 	nop.w
 800ab60:	ffffffff 	.word	0xffffffff
 800ab64:	7fefffff 	.word	0x7fefffff

0800ab68 <__assert_func>:
 800ab68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab6a:	4614      	mov	r4, r2
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <__assert_func+0x2c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4605      	mov	r5, r0
 800ab74:	68d8      	ldr	r0, [r3, #12]
 800ab76:	b14c      	cbz	r4, 800ab8c <__assert_func+0x24>
 800ab78:	4b07      	ldr	r3, [pc, #28]	; (800ab98 <__assert_func+0x30>)
 800ab7a:	9100      	str	r1, [sp, #0]
 800ab7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab80:	4906      	ldr	r1, [pc, #24]	; (800ab9c <__assert_func+0x34>)
 800ab82:	462b      	mov	r3, r5
 800ab84:	f000 f9c8 	bl	800af18 <fiprintf>
 800ab88:	f001 f864 	bl	800bc54 <abort>
 800ab8c:	4b04      	ldr	r3, [pc, #16]	; (800aba0 <__assert_func+0x38>)
 800ab8e:	461c      	mov	r4, r3
 800ab90:	e7f3      	b.n	800ab7a <__assert_func+0x12>
 800ab92:	bf00      	nop
 800ab94:	240004fc 	.word	0x240004fc
 800ab98:	0801a2b0 	.word	0x0801a2b0
 800ab9c:	0801a2bd 	.word	0x0801a2bd
 800aba0:	0801a2eb 	.word	0x0801a2eb

0800aba4 <calloc>:
 800aba4:	4b02      	ldr	r3, [pc, #8]	; (800abb0 <calloc+0xc>)
 800aba6:	460a      	mov	r2, r1
 800aba8:	4601      	mov	r1, r0
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	f000 bb20 	b.w	800b1f0 <_calloc_r>
 800abb0:	240004fc 	.word	0x240004fc

0800abb4 <__errno>:
 800abb4:	4b01      	ldr	r3, [pc, #4]	; (800abbc <__errno+0x8>)
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	240004fc 	.word	0x240004fc

0800abc0 <exit>:
 800abc0:	b508      	push	{r3, lr}
 800abc2:	4b07      	ldr	r3, [pc, #28]	; (800abe0 <exit+0x20>)
 800abc4:	4604      	mov	r4, r0
 800abc6:	b113      	cbz	r3, 800abce <exit+0xe>
 800abc8:	2100      	movs	r1, #0
 800abca:	f3af 8000 	nop.w
 800abce:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <exit+0x24>)
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800abd4:	b103      	cbz	r3, 800abd8 <exit+0x18>
 800abd6:	4798      	blx	r3
 800abd8:	4620      	mov	r0, r4
 800abda:	f7f9 f9db 	bl	8003f94 <_exit>
 800abde:	bf00      	nop
 800abe0:	00000000 	.word	0x00000000
 800abe4:	0801a34c 	.word	0x0801a34c

0800abe8 <__sflush_r>:
 800abe8:	898a      	ldrh	r2, [r1, #12]
 800abea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abee:	4605      	mov	r5, r0
 800abf0:	0710      	lsls	r0, r2, #28
 800abf2:	460c      	mov	r4, r1
 800abf4:	d458      	bmi.n	800aca8 <__sflush_r+0xc0>
 800abf6:	684b      	ldr	r3, [r1, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	dc05      	bgt.n	800ac08 <__sflush_r+0x20>
 800abfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	dc02      	bgt.n	800ac08 <__sflush_r+0x20>
 800ac02:	2000      	movs	r0, #0
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac0a:	2e00      	cmp	r6, #0
 800ac0c:	d0f9      	beq.n	800ac02 <__sflush_r+0x1a>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac14:	682f      	ldr	r7, [r5, #0]
 800ac16:	602b      	str	r3, [r5, #0]
 800ac18:	d032      	beq.n	800ac80 <__sflush_r+0x98>
 800ac1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	075a      	lsls	r2, r3, #29
 800ac20:	d505      	bpl.n	800ac2e <__sflush_r+0x46>
 800ac22:	6863      	ldr	r3, [r4, #4]
 800ac24:	1ac0      	subs	r0, r0, r3
 800ac26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac28:	b10b      	cbz	r3, 800ac2e <__sflush_r+0x46>
 800ac2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac2c:	1ac0      	subs	r0, r0, r3
 800ac2e:	2300      	movs	r3, #0
 800ac30:	4602      	mov	r2, r0
 800ac32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac34:	6a21      	ldr	r1, [r4, #32]
 800ac36:	4628      	mov	r0, r5
 800ac38:	47b0      	blx	r6
 800ac3a:	1c43      	adds	r3, r0, #1
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	d106      	bne.n	800ac4e <__sflush_r+0x66>
 800ac40:	6829      	ldr	r1, [r5, #0]
 800ac42:	291d      	cmp	r1, #29
 800ac44:	d82c      	bhi.n	800aca0 <__sflush_r+0xb8>
 800ac46:	4a2a      	ldr	r2, [pc, #168]	; (800acf0 <__sflush_r+0x108>)
 800ac48:	40ca      	lsrs	r2, r1
 800ac4a:	07d6      	lsls	r6, r2, #31
 800ac4c:	d528      	bpl.n	800aca0 <__sflush_r+0xb8>
 800ac4e:	2200      	movs	r2, #0
 800ac50:	6062      	str	r2, [r4, #4]
 800ac52:	04d9      	lsls	r1, r3, #19
 800ac54:	6922      	ldr	r2, [r4, #16]
 800ac56:	6022      	str	r2, [r4, #0]
 800ac58:	d504      	bpl.n	800ac64 <__sflush_r+0x7c>
 800ac5a:	1c42      	adds	r2, r0, #1
 800ac5c:	d101      	bne.n	800ac62 <__sflush_r+0x7a>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	b903      	cbnz	r3, 800ac64 <__sflush_r+0x7c>
 800ac62:	6560      	str	r0, [r4, #84]	; 0x54
 800ac64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac66:	602f      	str	r7, [r5, #0]
 800ac68:	2900      	cmp	r1, #0
 800ac6a:	d0ca      	beq.n	800ac02 <__sflush_r+0x1a>
 800ac6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac70:	4299      	cmp	r1, r3
 800ac72:	d002      	beq.n	800ac7a <__sflush_r+0x92>
 800ac74:	4628      	mov	r0, r5
 800ac76:	f000 fad1 	bl	800b21c <_free_r>
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	6360      	str	r0, [r4, #52]	; 0x34
 800ac7e:	e7c1      	b.n	800ac04 <__sflush_r+0x1c>
 800ac80:	6a21      	ldr	r1, [r4, #32]
 800ac82:	2301      	movs	r3, #1
 800ac84:	4628      	mov	r0, r5
 800ac86:	47b0      	blx	r6
 800ac88:	1c41      	adds	r1, r0, #1
 800ac8a:	d1c7      	bne.n	800ac1c <__sflush_r+0x34>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d0c4      	beq.n	800ac1c <__sflush_r+0x34>
 800ac92:	2b1d      	cmp	r3, #29
 800ac94:	d001      	beq.n	800ac9a <__sflush_r+0xb2>
 800ac96:	2b16      	cmp	r3, #22
 800ac98:	d101      	bne.n	800ac9e <__sflush_r+0xb6>
 800ac9a:	602f      	str	r7, [r5, #0]
 800ac9c:	e7b1      	b.n	800ac02 <__sflush_r+0x1a>
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca4:	81a3      	strh	r3, [r4, #12]
 800aca6:	e7ad      	b.n	800ac04 <__sflush_r+0x1c>
 800aca8:	690f      	ldr	r7, [r1, #16]
 800acaa:	2f00      	cmp	r7, #0
 800acac:	d0a9      	beq.n	800ac02 <__sflush_r+0x1a>
 800acae:	0793      	lsls	r3, r2, #30
 800acb0:	680e      	ldr	r6, [r1, #0]
 800acb2:	bf08      	it	eq
 800acb4:	694b      	ldreq	r3, [r1, #20]
 800acb6:	600f      	str	r7, [r1, #0]
 800acb8:	bf18      	it	ne
 800acba:	2300      	movne	r3, #0
 800acbc:	eba6 0807 	sub.w	r8, r6, r7
 800acc0:	608b      	str	r3, [r1, #8]
 800acc2:	f1b8 0f00 	cmp.w	r8, #0
 800acc6:	dd9c      	ble.n	800ac02 <__sflush_r+0x1a>
 800acc8:	6a21      	ldr	r1, [r4, #32]
 800acca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800accc:	4643      	mov	r3, r8
 800acce:	463a      	mov	r2, r7
 800acd0:	4628      	mov	r0, r5
 800acd2:	47b0      	blx	r6
 800acd4:	2800      	cmp	r0, #0
 800acd6:	dc06      	bgt.n	800ace6 <__sflush_r+0xfe>
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acde:	81a3      	strh	r3, [r4, #12]
 800ace0:	f04f 30ff 	mov.w	r0, #4294967295
 800ace4:	e78e      	b.n	800ac04 <__sflush_r+0x1c>
 800ace6:	4407      	add	r7, r0
 800ace8:	eba8 0800 	sub.w	r8, r8, r0
 800acec:	e7e9      	b.n	800acc2 <__sflush_r+0xda>
 800acee:	bf00      	nop
 800acf0:	20400001 	.word	0x20400001

0800acf4 <_fflush_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	690b      	ldr	r3, [r1, #16]
 800acf8:	4605      	mov	r5, r0
 800acfa:	460c      	mov	r4, r1
 800acfc:	b913      	cbnz	r3, 800ad04 <_fflush_r+0x10>
 800acfe:	2500      	movs	r5, #0
 800ad00:	4628      	mov	r0, r5
 800ad02:	bd38      	pop	{r3, r4, r5, pc}
 800ad04:	b118      	cbz	r0, 800ad0e <_fflush_r+0x1a>
 800ad06:	6983      	ldr	r3, [r0, #24]
 800ad08:	b90b      	cbnz	r3, 800ad0e <_fflush_r+0x1a>
 800ad0a:	f000 f887 	bl	800ae1c <__sinit>
 800ad0e:	4b14      	ldr	r3, [pc, #80]	; (800ad60 <_fflush_r+0x6c>)
 800ad10:	429c      	cmp	r4, r3
 800ad12:	d11b      	bne.n	800ad4c <_fflush_r+0x58>
 800ad14:	686c      	ldr	r4, [r5, #4]
 800ad16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0ef      	beq.n	800acfe <_fflush_r+0xa>
 800ad1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad20:	07d0      	lsls	r0, r2, #31
 800ad22:	d404      	bmi.n	800ad2e <_fflush_r+0x3a>
 800ad24:	0599      	lsls	r1, r3, #22
 800ad26:	d402      	bmi.n	800ad2e <_fflush_r+0x3a>
 800ad28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad2a:	f000 f9ba 	bl	800b0a2 <__retarget_lock_acquire_recursive>
 800ad2e:	4628      	mov	r0, r5
 800ad30:	4621      	mov	r1, r4
 800ad32:	f7ff ff59 	bl	800abe8 <__sflush_r>
 800ad36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad38:	07da      	lsls	r2, r3, #31
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	d4e0      	bmi.n	800ad00 <_fflush_r+0xc>
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	059b      	lsls	r3, r3, #22
 800ad42:	d4dd      	bmi.n	800ad00 <_fflush_r+0xc>
 800ad44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad46:	f000 f9ad 	bl	800b0a4 <__retarget_lock_release_recursive>
 800ad4a:	e7d9      	b.n	800ad00 <_fflush_r+0xc>
 800ad4c:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <_fflush_r+0x70>)
 800ad4e:	429c      	cmp	r4, r3
 800ad50:	d101      	bne.n	800ad56 <_fflush_r+0x62>
 800ad52:	68ac      	ldr	r4, [r5, #8]
 800ad54:	e7df      	b.n	800ad16 <_fflush_r+0x22>
 800ad56:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <_fflush_r+0x74>)
 800ad58:	429c      	cmp	r4, r3
 800ad5a:	bf08      	it	eq
 800ad5c:	68ec      	ldreq	r4, [r5, #12]
 800ad5e:	e7da      	b.n	800ad16 <_fflush_r+0x22>
 800ad60:	0801a30c 	.word	0x0801a30c
 800ad64:	0801a32c 	.word	0x0801a32c
 800ad68:	0801a2ec 	.word	0x0801a2ec

0800ad6c <std>:
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	b510      	push	{r4, lr}
 800ad70:	4604      	mov	r4, r0
 800ad72:	e9c0 3300 	strd	r3, r3, [r0]
 800ad76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad7a:	6083      	str	r3, [r0, #8]
 800ad7c:	8181      	strh	r1, [r0, #12]
 800ad7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ad80:	81c2      	strh	r2, [r0, #14]
 800ad82:	6183      	str	r3, [r0, #24]
 800ad84:	4619      	mov	r1, r3
 800ad86:	2208      	movs	r2, #8
 800ad88:	305c      	adds	r0, #92	; 0x5c
 800ad8a:	f000 fa29 	bl	800b1e0 <memset>
 800ad8e:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <std+0x38>)
 800ad90:	6263      	str	r3, [r4, #36]	; 0x24
 800ad92:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <std+0x3c>)
 800ad94:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad96:	4b05      	ldr	r3, [pc, #20]	; (800adac <std+0x40>)
 800ad98:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad9a:	4b05      	ldr	r3, [pc, #20]	; (800adb0 <std+0x44>)
 800ad9c:	6224      	str	r4, [r4, #32]
 800ad9e:	6323      	str	r3, [r4, #48]	; 0x30
 800ada0:	bd10      	pop	{r4, pc}
 800ada2:	bf00      	nop
 800ada4:	0800ba29 	.word	0x0800ba29
 800ada8:	0800ba4b 	.word	0x0800ba4b
 800adac:	0800ba83 	.word	0x0800ba83
 800adb0:	0800baa7 	.word	0x0800baa7

0800adb4 <_cleanup_r>:
 800adb4:	4901      	ldr	r1, [pc, #4]	; (800adbc <_cleanup_r+0x8>)
 800adb6:	f000 b8c1 	b.w	800af3c <_fwalk_reent>
 800adba:	bf00      	nop
 800adbc:	0800acf5 	.word	0x0800acf5

0800adc0 <__sfmoreglue>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	2268      	movs	r2, #104	; 0x68
 800adc4:	1e4d      	subs	r5, r1, #1
 800adc6:	4355      	muls	r5, r2
 800adc8:	460e      	mov	r6, r1
 800adca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adce:	f000 fa91 	bl	800b2f4 <_malloc_r>
 800add2:	4604      	mov	r4, r0
 800add4:	b140      	cbz	r0, 800ade8 <__sfmoreglue+0x28>
 800add6:	2100      	movs	r1, #0
 800add8:	e9c0 1600 	strd	r1, r6, [r0]
 800addc:	300c      	adds	r0, #12
 800adde:	60a0      	str	r0, [r4, #8]
 800ade0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ade4:	f000 f9fc 	bl	800b1e0 <memset>
 800ade8:	4620      	mov	r0, r4
 800adea:	bd70      	pop	{r4, r5, r6, pc}

0800adec <__sfp_lock_acquire>:
 800adec:	4801      	ldr	r0, [pc, #4]	; (800adf4 <__sfp_lock_acquire+0x8>)
 800adee:	f000 b958 	b.w	800b0a2 <__retarget_lock_acquire_recursive>
 800adf2:	bf00      	nop
 800adf4:	24000d2d 	.word	0x24000d2d

0800adf8 <__sfp_lock_release>:
 800adf8:	4801      	ldr	r0, [pc, #4]	; (800ae00 <__sfp_lock_release+0x8>)
 800adfa:	f000 b953 	b.w	800b0a4 <__retarget_lock_release_recursive>
 800adfe:	bf00      	nop
 800ae00:	24000d2d 	.word	0x24000d2d

0800ae04 <__sinit_lock_acquire>:
 800ae04:	4801      	ldr	r0, [pc, #4]	; (800ae0c <__sinit_lock_acquire+0x8>)
 800ae06:	f000 b94c 	b.w	800b0a2 <__retarget_lock_acquire_recursive>
 800ae0a:	bf00      	nop
 800ae0c:	24000d2e 	.word	0x24000d2e

0800ae10 <__sinit_lock_release>:
 800ae10:	4801      	ldr	r0, [pc, #4]	; (800ae18 <__sinit_lock_release+0x8>)
 800ae12:	f000 b947 	b.w	800b0a4 <__retarget_lock_release_recursive>
 800ae16:	bf00      	nop
 800ae18:	24000d2e 	.word	0x24000d2e

0800ae1c <__sinit>:
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	4604      	mov	r4, r0
 800ae20:	f7ff fff0 	bl	800ae04 <__sinit_lock_acquire>
 800ae24:	69a3      	ldr	r3, [r4, #24]
 800ae26:	b11b      	cbz	r3, 800ae30 <__sinit+0x14>
 800ae28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae2c:	f7ff bff0 	b.w	800ae10 <__sinit_lock_release>
 800ae30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae34:	6523      	str	r3, [r4, #80]	; 0x50
 800ae36:	4b13      	ldr	r3, [pc, #76]	; (800ae84 <__sinit+0x68>)
 800ae38:	4a13      	ldr	r2, [pc, #76]	; (800ae88 <__sinit+0x6c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae3e:	42a3      	cmp	r3, r4
 800ae40:	bf04      	itt	eq
 800ae42:	2301      	moveq	r3, #1
 800ae44:	61a3      	streq	r3, [r4, #24]
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 f820 	bl	800ae8c <__sfp>
 800ae4c:	6060      	str	r0, [r4, #4]
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 f81c 	bl	800ae8c <__sfp>
 800ae54:	60a0      	str	r0, [r4, #8]
 800ae56:	4620      	mov	r0, r4
 800ae58:	f000 f818 	bl	800ae8c <__sfp>
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	60e0      	str	r0, [r4, #12]
 800ae60:	2104      	movs	r1, #4
 800ae62:	6860      	ldr	r0, [r4, #4]
 800ae64:	f7ff ff82 	bl	800ad6c <std>
 800ae68:	68a0      	ldr	r0, [r4, #8]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	2109      	movs	r1, #9
 800ae6e:	f7ff ff7d 	bl	800ad6c <std>
 800ae72:	68e0      	ldr	r0, [r4, #12]
 800ae74:	2202      	movs	r2, #2
 800ae76:	2112      	movs	r1, #18
 800ae78:	f7ff ff78 	bl	800ad6c <std>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	61a3      	str	r3, [r4, #24]
 800ae80:	e7d2      	b.n	800ae28 <__sinit+0xc>
 800ae82:	bf00      	nop
 800ae84:	0801a34c 	.word	0x0801a34c
 800ae88:	0800adb5 	.word	0x0800adb5

0800ae8c <__sfp>:
 800ae8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae8e:	4607      	mov	r7, r0
 800ae90:	f7ff ffac 	bl	800adec <__sfp_lock_acquire>
 800ae94:	4b1e      	ldr	r3, [pc, #120]	; (800af10 <__sfp+0x84>)
 800ae96:	681e      	ldr	r6, [r3, #0]
 800ae98:	69b3      	ldr	r3, [r6, #24]
 800ae9a:	b913      	cbnz	r3, 800aea2 <__sfp+0x16>
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7ff ffbd 	bl	800ae1c <__sinit>
 800aea2:	3648      	adds	r6, #72	; 0x48
 800aea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	d503      	bpl.n	800aeb4 <__sfp+0x28>
 800aeac:	6833      	ldr	r3, [r6, #0]
 800aeae:	b30b      	cbz	r3, 800aef4 <__sfp+0x68>
 800aeb0:	6836      	ldr	r6, [r6, #0]
 800aeb2:	e7f7      	b.n	800aea4 <__sfp+0x18>
 800aeb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aeb8:	b9d5      	cbnz	r5, 800aef0 <__sfp+0x64>
 800aeba:	4b16      	ldr	r3, [pc, #88]	; (800af14 <__sfp+0x88>)
 800aebc:	60e3      	str	r3, [r4, #12]
 800aebe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aec2:	6665      	str	r5, [r4, #100]	; 0x64
 800aec4:	f000 f8ec 	bl	800b0a0 <__retarget_lock_init_recursive>
 800aec8:	f7ff ff96 	bl	800adf8 <__sfp_lock_release>
 800aecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aed4:	6025      	str	r5, [r4, #0]
 800aed6:	61a5      	str	r5, [r4, #24]
 800aed8:	2208      	movs	r2, #8
 800aeda:	4629      	mov	r1, r5
 800aedc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aee0:	f000 f97e 	bl	800b1e0 <memset>
 800aee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aeec:	4620      	mov	r0, r4
 800aeee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aef0:	3468      	adds	r4, #104	; 0x68
 800aef2:	e7d9      	b.n	800aea8 <__sfp+0x1c>
 800aef4:	2104      	movs	r1, #4
 800aef6:	4638      	mov	r0, r7
 800aef8:	f7ff ff62 	bl	800adc0 <__sfmoreglue>
 800aefc:	4604      	mov	r4, r0
 800aefe:	6030      	str	r0, [r6, #0]
 800af00:	2800      	cmp	r0, #0
 800af02:	d1d5      	bne.n	800aeb0 <__sfp+0x24>
 800af04:	f7ff ff78 	bl	800adf8 <__sfp_lock_release>
 800af08:	230c      	movs	r3, #12
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	e7ee      	b.n	800aeec <__sfp+0x60>
 800af0e:	bf00      	nop
 800af10:	0801a34c 	.word	0x0801a34c
 800af14:	ffff0001 	.word	0xffff0001

0800af18 <fiprintf>:
 800af18:	b40e      	push	{r1, r2, r3}
 800af1a:	b503      	push	{r0, r1, lr}
 800af1c:	4601      	mov	r1, r0
 800af1e:	ab03      	add	r3, sp, #12
 800af20:	4805      	ldr	r0, [pc, #20]	; (800af38 <fiprintf+0x20>)
 800af22:	f853 2b04 	ldr.w	r2, [r3], #4
 800af26:	6800      	ldr	r0, [r0, #0]
 800af28:	9301      	str	r3, [sp, #4]
 800af2a:	f000 fa81 	bl	800b430 <_vfiprintf_r>
 800af2e:	b002      	add	sp, #8
 800af30:	f85d eb04 	ldr.w	lr, [sp], #4
 800af34:	b003      	add	sp, #12
 800af36:	4770      	bx	lr
 800af38:	240004fc 	.word	0x240004fc

0800af3c <_fwalk_reent>:
 800af3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af40:	4606      	mov	r6, r0
 800af42:	4688      	mov	r8, r1
 800af44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af48:	2700      	movs	r7, #0
 800af4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af4e:	f1b9 0901 	subs.w	r9, r9, #1
 800af52:	d505      	bpl.n	800af60 <_fwalk_reent+0x24>
 800af54:	6824      	ldr	r4, [r4, #0]
 800af56:	2c00      	cmp	r4, #0
 800af58:	d1f7      	bne.n	800af4a <_fwalk_reent+0xe>
 800af5a:	4638      	mov	r0, r7
 800af5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af60:	89ab      	ldrh	r3, [r5, #12]
 800af62:	2b01      	cmp	r3, #1
 800af64:	d907      	bls.n	800af76 <_fwalk_reent+0x3a>
 800af66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af6a:	3301      	adds	r3, #1
 800af6c:	d003      	beq.n	800af76 <_fwalk_reent+0x3a>
 800af6e:	4629      	mov	r1, r5
 800af70:	4630      	mov	r0, r6
 800af72:	47c0      	blx	r8
 800af74:	4307      	orrs	r7, r0
 800af76:	3568      	adds	r5, #104	; 0x68
 800af78:	e7e9      	b.n	800af4e <_fwalk_reent+0x12>
	...

0800af7c <_fwrite_r>:
 800af7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af80:	9c08      	ldr	r4, [sp, #32]
 800af82:	468a      	mov	sl, r1
 800af84:	4690      	mov	r8, r2
 800af86:	fb02 f903 	mul.w	r9, r2, r3
 800af8a:	4605      	mov	r5, r0
 800af8c:	b118      	cbz	r0, 800af96 <_fwrite_r+0x1a>
 800af8e:	6983      	ldr	r3, [r0, #24]
 800af90:	b90b      	cbnz	r3, 800af96 <_fwrite_r+0x1a>
 800af92:	f7ff ff43 	bl	800ae1c <__sinit>
 800af96:	4b26      	ldr	r3, [pc, #152]	; (800b030 <_fwrite_r+0xb4>)
 800af98:	429c      	cmp	r4, r3
 800af9a:	d123      	bne.n	800afe4 <_fwrite_r+0x68>
 800af9c:	686c      	ldr	r4, [r5, #4]
 800af9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afa0:	07de      	lsls	r6, r3, #31
 800afa2:	d405      	bmi.n	800afb0 <_fwrite_r+0x34>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	0598      	lsls	r0, r3, #22
 800afa8:	d402      	bmi.n	800afb0 <_fwrite_r+0x34>
 800afaa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afac:	f000 f879 	bl	800b0a2 <__retarget_lock_acquire_recursive>
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	0719      	lsls	r1, r3, #28
 800afb4:	d520      	bpl.n	800aff8 <_fwrite_r+0x7c>
 800afb6:	6923      	ldr	r3, [r4, #16]
 800afb8:	b1f3      	cbz	r3, 800aff8 <_fwrite_r+0x7c>
 800afba:	2600      	movs	r6, #0
 800afbc:	454e      	cmp	r6, r9
 800afbe:	d029      	beq.n	800b014 <_fwrite_r+0x98>
 800afc0:	68a7      	ldr	r7, [r4, #8]
 800afc2:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800afc6:	3f01      	subs	r7, #1
 800afc8:	2f00      	cmp	r7, #0
 800afca:	60a7      	str	r7, [r4, #8]
 800afcc:	da04      	bge.n	800afd8 <_fwrite_r+0x5c>
 800afce:	69a3      	ldr	r3, [r4, #24]
 800afd0:	429f      	cmp	r7, r3
 800afd2:	db19      	blt.n	800b008 <_fwrite_r+0x8c>
 800afd4:	290a      	cmp	r1, #10
 800afd6:	d017      	beq.n	800b008 <_fwrite_r+0x8c>
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	6022      	str	r2, [r4, #0]
 800afde:	7019      	strb	r1, [r3, #0]
 800afe0:	3601      	adds	r6, #1
 800afe2:	e7eb      	b.n	800afbc <_fwrite_r+0x40>
 800afe4:	4b13      	ldr	r3, [pc, #76]	; (800b034 <_fwrite_r+0xb8>)
 800afe6:	429c      	cmp	r4, r3
 800afe8:	d101      	bne.n	800afee <_fwrite_r+0x72>
 800afea:	68ac      	ldr	r4, [r5, #8]
 800afec:	e7d7      	b.n	800af9e <_fwrite_r+0x22>
 800afee:	4b12      	ldr	r3, [pc, #72]	; (800b038 <_fwrite_r+0xbc>)
 800aff0:	429c      	cmp	r4, r3
 800aff2:	bf08      	it	eq
 800aff4:	68ec      	ldreq	r4, [r5, #12]
 800aff6:	e7d2      	b.n	800af9e <_fwrite_r+0x22>
 800aff8:	4621      	mov	r1, r4
 800affa:	4628      	mov	r0, r5
 800affc:	f000 fdbc 	bl	800bb78 <__swsetup_r>
 800b000:	2800      	cmp	r0, #0
 800b002:	d0da      	beq.n	800afba <_fwrite_r+0x3e>
 800b004:	2600      	movs	r6, #0
 800b006:	e005      	b.n	800b014 <_fwrite_r+0x98>
 800b008:	4622      	mov	r2, r4
 800b00a:	4628      	mov	r0, r5
 800b00c:	f000 fd50 	bl	800bab0 <__swbuf_r>
 800b010:	3001      	adds	r0, #1
 800b012:	d1e5      	bne.n	800afe0 <_fwrite_r+0x64>
 800b014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b016:	07da      	lsls	r2, r3, #31
 800b018:	d405      	bmi.n	800b026 <_fwrite_r+0xaa>
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	059b      	lsls	r3, r3, #22
 800b01e:	d402      	bmi.n	800b026 <_fwrite_r+0xaa>
 800b020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b022:	f000 f83f 	bl	800b0a4 <__retarget_lock_release_recursive>
 800b026:	fbb6 f0f8 	udiv	r0, r6, r8
 800b02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b02e:	bf00      	nop
 800b030:	0801a30c 	.word	0x0801a30c
 800b034:	0801a32c 	.word	0x0801a32c
 800b038:	0801a2ec 	.word	0x0801a2ec

0800b03c <fwrite>:
 800b03c:	b507      	push	{r0, r1, r2, lr}
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	4613      	mov	r3, r2
 800b042:	460a      	mov	r2, r1
 800b044:	4601      	mov	r1, r0
 800b046:	4803      	ldr	r0, [pc, #12]	; (800b054 <fwrite+0x18>)
 800b048:	6800      	ldr	r0, [r0, #0]
 800b04a:	f7ff ff97 	bl	800af7c <_fwrite_r>
 800b04e:	b003      	add	sp, #12
 800b050:	f85d fb04 	ldr.w	pc, [sp], #4
 800b054:	240004fc 	.word	0x240004fc

0800b058 <__libc_init_array>:
 800b058:	b570      	push	{r4, r5, r6, lr}
 800b05a:	4d0d      	ldr	r5, [pc, #52]	; (800b090 <__libc_init_array+0x38>)
 800b05c:	4c0d      	ldr	r4, [pc, #52]	; (800b094 <__libc_init_array+0x3c>)
 800b05e:	1b64      	subs	r4, r4, r5
 800b060:	10a4      	asrs	r4, r4, #2
 800b062:	2600      	movs	r6, #0
 800b064:	42a6      	cmp	r6, r4
 800b066:	d109      	bne.n	800b07c <__libc_init_array+0x24>
 800b068:	4d0b      	ldr	r5, [pc, #44]	; (800b098 <__libc_init_array+0x40>)
 800b06a:	4c0c      	ldr	r4, [pc, #48]	; (800b09c <__libc_init_array+0x44>)
 800b06c:	f001 f832 	bl	800c0d4 <_init>
 800b070:	1b64      	subs	r4, r4, r5
 800b072:	10a4      	asrs	r4, r4, #2
 800b074:	2600      	movs	r6, #0
 800b076:	42a6      	cmp	r6, r4
 800b078:	d105      	bne.n	800b086 <__libc_init_array+0x2e>
 800b07a:	bd70      	pop	{r4, r5, r6, pc}
 800b07c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b080:	4798      	blx	r3
 800b082:	3601      	adds	r6, #1
 800b084:	e7ee      	b.n	800b064 <__libc_init_array+0xc>
 800b086:	f855 3b04 	ldr.w	r3, [r5], #4
 800b08a:	4798      	blx	r3
 800b08c:	3601      	adds	r6, #1
 800b08e:	e7f2      	b.n	800b076 <__libc_init_array+0x1e>
 800b090:	0801a38c 	.word	0x0801a38c
 800b094:	0801a38c 	.word	0x0801a38c
 800b098:	0801a38c 	.word	0x0801a38c
 800b09c:	0801a390 	.word	0x0801a390

0800b0a0 <__retarget_lock_init_recursive>:
 800b0a0:	4770      	bx	lr

0800b0a2 <__retarget_lock_acquire_recursive>:
 800b0a2:	4770      	bx	lr

0800b0a4 <__retarget_lock_release_recursive>:
 800b0a4:	4770      	bx	lr

0800b0a6 <__swhatbuf_r>:
 800b0a6:	b570      	push	{r4, r5, r6, lr}
 800b0a8:	460e      	mov	r6, r1
 800b0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ae:	2900      	cmp	r1, #0
 800b0b0:	b096      	sub	sp, #88	; 0x58
 800b0b2:	4614      	mov	r4, r2
 800b0b4:	461d      	mov	r5, r3
 800b0b6:	da08      	bge.n	800b0ca <__swhatbuf_r+0x24>
 800b0b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	602a      	str	r2, [r5, #0]
 800b0c0:	061a      	lsls	r2, r3, #24
 800b0c2:	d410      	bmi.n	800b0e6 <__swhatbuf_r+0x40>
 800b0c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c8:	e00e      	b.n	800b0e8 <__swhatbuf_r+0x42>
 800b0ca:	466a      	mov	r2, sp
 800b0cc:	f000 fdda 	bl	800bc84 <_fstat_r>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	dbf1      	blt.n	800b0b8 <__swhatbuf_r+0x12>
 800b0d4:	9a01      	ldr	r2, [sp, #4]
 800b0d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0de:	425a      	negs	r2, r3
 800b0e0:	415a      	adcs	r2, r3
 800b0e2:	602a      	str	r2, [r5, #0]
 800b0e4:	e7ee      	b.n	800b0c4 <__swhatbuf_r+0x1e>
 800b0e6:	2340      	movs	r3, #64	; 0x40
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	6023      	str	r3, [r4, #0]
 800b0ec:	b016      	add	sp, #88	; 0x58
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}

0800b0f0 <__smakebuf_r>:
 800b0f0:	898b      	ldrh	r3, [r1, #12]
 800b0f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0f4:	079d      	lsls	r5, r3, #30
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460c      	mov	r4, r1
 800b0fa:	d507      	bpl.n	800b10c <__smakebuf_r+0x1c>
 800b0fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b100:	6023      	str	r3, [r4, #0]
 800b102:	6123      	str	r3, [r4, #16]
 800b104:	2301      	movs	r3, #1
 800b106:	6163      	str	r3, [r4, #20]
 800b108:	b002      	add	sp, #8
 800b10a:	bd70      	pop	{r4, r5, r6, pc}
 800b10c:	ab01      	add	r3, sp, #4
 800b10e:	466a      	mov	r2, sp
 800b110:	f7ff ffc9 	bl	800b0a6 <__swhatbuf_r>
 800b114:	9900      	ldr	r1, [sp, #0]
 800b116:	4605      	mov	r5, r0
 800b118:	4630      	mov	r0, r6
 800b11a:	f000 f8eb 	bl	800b2f4 <_malloc_r>
 800b11e:	b948      	cbnz	r0, 800b134 <__smakebuf_r+0x44>
 800b120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b124:	059a      	lsls	r2, r3, #22
 800b126:	d4ef      	bmi.n	800b108 <__smakebuf_r+0x18>
 800b128:	f023 0303 	bic.w	r3, r3, #3
 800b12c:	f043 0302 	orr.w	r3, r3, #2
 800b130:	81a3      	strh	r3, [r4, #12]
 800b132:	e7e3      	b.n	800b0fc <__smakebuf_r+0xc>
 800b134:	4b0d      	ldr	r3, [pc, #52]	; (800b16c <__smakebuf_r+0x7c>)
 800b136:	62b3      	str	r3, [r6, #40]	; 0x28
 800b138:	89a3      	ldrh	r3, [r4, #12]
 800b13a:	6020      	str	r0, [r4, #0]
 800b13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	9b00      	ldr	r3, [sp, #0]
 800b144:	6163      	str	r3, [r4, #20]
 800b146:	9b01      	ldr	r3, [sp, #4]
 800b148:	6120      	str	r0, [r4, #16]
 800b14a:	b15b      	cbz	r3, 800b164 <__smakebuf_r+0x74>
 800b14c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b150:	4630      	mov	r0, r6
 800b152:	f000 fda9 	bl	800bca8 <_isatty_r>
 800b156:	b128      	cbz	r0, 800b164 <__smakebuf_r+0x74>
 800b158:	89a3      	ldrh	r3, [r4, #12]
 800b15a:	f023 0303 	bic.w	r3, r3, #3
 800b15e:	f043 0301 	orr.w	r3, r3, #1
 800b162:	81a3      	strh	r3, [r4, #12]
 800b164:	89a0      	ldrh	r0, [r4, #12]
 800b166:	4305      	orrs	r5, r0
 800b168:	81a5      	strh	r5, [r4, #12]
 800b16a:	e7cd      	b.n	800b108 <__smakebuf_r+0x18>
 800b16c:	0800adb5 	.word	0x0800adb5

0800b170 <malloc>:
 800b170:	4b02      	ldr	r3, [pc, #8]	; (800b17c <malloc+0xc>)
 800b172:	4601      	mov	r1, r0
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	f000 b8bd 	b.w	800b2f4 <_malloc_r>
 800b17a:	bf00      	nop
 800b17c:	240004fc 	.word	0x240004fc

0800b180 <free>:
 800b180:	4b02      	ldr	r3, [pc, #8]	; (800b18c <free+0xc>)
 800b182:	4601      	mov	r1, r0
 800b184:	6818      	ldr	r0, [r3, #0]
 800b186:	f000 b849 	b.w	800b21c <_free_r>
 800b18a:	bf00      	nop
 800b18c:	240004fc 	.word	0x240004fc

0800b190 <memcpy>:
 800b190:	440a      	add	r2, r1
 800b192:	4291      	cmp	r1, r2
 800b194:	f100 33ff 	add.w	r3, r0, #4294967295
 800b198:	d100      	bne.n	800b19c <memcpy+0xc>
 800b19a:	4770      	bx	lr
 800b19c:	b510      	push	{r4, lr}
 800b19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1a6:	4291      	cmp	r1, r2
 800b1a8:	d1f9      	bne.n	800b19e <memcpy+0xe>
 800b1aa:	bd10      	pop	{r4, pc}

0800b1ac <memmove>:
 800b1ac:	4288      	cmp	r0, r1
 800b1ae:	b510      	push	{r4, lr}
 800b1b0:	eb01 0402 	add.w	r4, r1, r2
 800b1b4:	d902      	bls.n	800b1bc <memmove+0x10>
 800b1b6:	4284      	cmp	r4, r0
 800b1b8:	4623      	mov	r3, r4
 800b1ba:	d807      	bhi.n	800b1cc <memmove+0x20>
 800b1bc:	1e43      	subs	r3, r0, #1
 800b1be:	42a1      	cmp	r1, r4
 800b1c0:	d008      	beq.n	800b1d4 <memmove+0x28>
 800b1c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1ca:	e7f8      	b.n	800b1be <memmove+0x12>
 800b1cc:	4402      	add	r2, r0
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	428a      	cmp	r2, r1
 800b1d2:	d100      	bne.n	800b1d6 <memmove+0x2a>
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1de:	e7f7      	b.n	800b1d0 <memmove+0x24>

0800b1e0 <memset>:
 800b1e0:	4402      	add	r2, r0
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d100      	bne.n	800b1ea <memset+0xa>
 800b1e8:	4770      	bx	lr
 800b1ea:	f803 1b01 	strb.w	r1, [r3], #1
 800b1ee:	e7f9      	b.n	800b1e4 <memset+0x4>

0800b1f0 <_calloc_r>:
 800b1f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1f2:	fba1 2402 	umull	r2, r4, r1, r2
 800b1f6:	b94c      	cbnz	r4, 800b20c <_calloc_r+0x1c>
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	9201      	str	r2, [sp, #4]
 800b1fc:	f000 f87a 	bl	800b2f4 <_malloc_r>
 800b200:	9a01      	ldr	r2, [sp, #4]
 800b202:	4605      	mov	r5, r0
 800b204:	b930      	cbnz	r0, 800b214 <_calloc_r+0x24>
 800b206:	4628      	mov	r0, r5
 800b208:	b003      	add	sp, #12
 800b20a:	bd30      	pop	{r4, r5, pc}
 800b20c:	220c      	movs	r2, #12
 800b20e:	6002      	str	r2, [r0, #0]
 800b210:	2500      	movs	r5, #0
 800b212:	e7f8      	b.n	800b206 <_calloc_r+0x16>
 800b214:	4621      	mov	r1, r4
 800b216:	f7ff ffe3 	bl	800b1e0 <memset>
 800b21a:	e7f4      	b.n	800b206 <_calloc_r+0x16>

0800b21c <_free_r>:
 800b21c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b21e:	2900      	cmp	r1, #0
 800b220:	d044      	beq.n	800b2ac <_free_r+0x90>
 800b222:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b226:	9001      	str	r0, [sp, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f1a1 0404 	sub.w	r4, r1, #4
 800b22e:	bfb8      	it	lt
 800b230:	18e4      	addlt	r4, r4, r3
 800b232:	f000 fd5b 	bl	800bcec <__malloc_lock>
 800b236:	4a1e      	ldr	r2, [pc, #120]	; (800b2b0 <_free_r+0x94>)
 800b238:	9801      	ldr	r0, [sp, #4]
 800b23a:	6813      	ldr	r3, [r2, #0]
 800b23c:	b933      	cbnz	r3, 800b24c <_free_r+0x30>
 800b23e:	6063      	str	r3, [r4, #4]
 800b240:	6014      	str	r4, [r2, #0]
 800b242:	b003      	add	sp, #12
 800b244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b248:	f000 bd56 	b.w	800bcf8 <__malloc_unlock>
 800b24c:	42a3      	cmp	r3, r4
 800b24e:	d908      	bls.n	800b262 <_free_r+0x46>
 800b250:	6825      	ldr	r5, [r4, #0]
 800b252:	1961      	adds	r1, r4, r5
 800b254:	428b      	cmp	r3, r1
 800b256:	bf01      	itttt	eq
 800b258:	6819      	ldreq	r1, [r3, #0]
 800b25a:	685b      	ldreq	r3, [r3, #4]
 800b25c:	1949      	addeq	r1, r1, r5
 800b25e:	6021      	streq	r1, [r4, #0]
 800b260:	e7ed      	b.n	800b23e <_free_r+0x22>
 800b262:	461a      	mov	r2, r3
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	b10b      	cbz	r3, 800b26c <_free_r+0x50>
 800b268:	42a3      	cmp	r3, r4
 800b26a:	d9fa      	bls.n	800b262 <_free_r+0x46>
 800b26c:	6811      	ldr	r1, [r2, #0]
 800b26e:	1855      	adds	r5, r2, r1
 800b270:	42a5      	cmp	r5, r4
 800b272:	d10b      	bne.n	800b28c <_free_r+0x70>
 800b274:	6824      	ldr	r4, [r4, #0]
 800b276:	4421      	add	r1, r4
 800b278:	1854      	adds	r4, r2, r1
 800b27a:	42a3      	cmp	r3, r4
 800b27c:	6011      	str	r1, [r2, #0]
 800b27e:	d1e0      	bne.n	800b242 <_free_r+0x26>
 800b280:	681c      	ldr	r4, [r3, #0]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	6053      	str	r3, [r2, #4]
 800b286:	4421      	add	r1, r4
 800b288:	6011      	str	r1, [r2, #0]
 800b28a:	e7da      	b.n	800b242 <_free_r+0x26>
 800b28c:	d902      	bls.n	800b294 <_free_r+0x78>
 800b28e:	230c      	movs	r3, #12
 800b290:	6003      	str	r3, [r0, #0]
 800b292:	e7d6      	b.n	800b242 <_free_r+0x26>
 800b294:	6825      	ldr	r5, [r4, #0]
 800b296:	1961      	adds	r1, r4, r5
 800b298:	428b      	cmp	r3, r1
 800b29a:	bf04      	itt	eq
 800b29c:	6819      	ldreq	r1, [r3, #0]
 800b29e:	685b      	ldreq	r3, [r3, #4]
 800b2a0:	6063      	str	r3, [r4, #4]
 800b2a2:	bf04      	itt	eq
 800b2a4:	1949      	addeq	r1, r1, r5
 800b2a6:	6021      	streq	r1, [r4, #0]
 800b2a8:	6054      	str	r4, [r2, #4]
 800b2aa:	e7ca      	b.n	800b242 <_free_r+0x26>
 800b2ac:	b003      	add	sp, #12
 800b2ae:	bd30      	pop	{r4, r5, pc}
 800b2b0:	24000d30 	.word	0x24000d30

0800b2b4 <sbrk_aligned>:
 800b2b4:	b570      	push	{r4, r5, r6, lr}
 800b2b6:	4e0e      	ldr	r6, [pc, #56]	; (800b2f0 <sbrk_aligned+0x3c>)
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	6831      	ldr	r1, [r6, #0]
 800b2bc:	4605      	mov	r5, r0
 800b2be:	b911      	cbnz	r1, 800b2c6 <sbrk_aligned+0x12>
 800b2c0:	f000 fb82 	bl	800b9c8 <_sbrk_r>
 800b2c4:	6030      	str	r0, [r6, #0]
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	f000 fb7d 	bl	800b9c8 <_sbrk_r>
 800b2ce:	1c43      	adds	r3, r0, #1
 800b2d0:	d00a      	beq.n	800b2e8 <sbrk_aligned+0x34>
 800b2d2:	1cc4      	adds	r4, r0, #3
 800b2d4:	f024 0403 	bic.w	r4, r4, #3
 800b2d8:	42a0      	cmp	r0, r4
 800b2da:	d007      	beq.n	800b2ec <sbrk_aligned+0x38>
 800b2dc:	1a21      	subs	r1, r4, r0
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f000 fb72 	bl	800b9c8 <_sbrk_r>
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	d101      	bne.n	800b2ec <sbrk_aligned+0x38>
 800b2e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	bd70      	pop	{r4, r5, r6, pc}
 800b2f0:	24000d34 	.word	0x24000d34

0800b2f4 <_malloc_r>:
 800b2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f8:	1ccd      	adds	r5, r1, #3
 800b2fa:	f025 0503 	bic.w	r5, r5, #3
 800b2fe:	3508      	adds	r5, #8
 800b300:	2d0c      	cmp	r5, #12
 800b302:	bf38      	it	cc
 800b304:	250c      	movcc	r5, #12
 800b306:	2d00      	cmp	r5, #0
 800b308:	4607      	mov	r7, r0
 800b30a:	db01      	blt.n	800b310 <_malloc_r+0x1c>
 800b30c:	42a9      	cmp	r1, r5
 800b30e:	d905      	bls.n	800b31c <_malloc_r+0x28>
 800b310:	230c      	movs	r3, #12
 800b312:	603b      	str	r3, [r7, #0]
 800b314:	2600      	movs	r6, #0
 800b316:	4630      	mov	r0, r6
 800b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b31c:	4e2e      	ldr	r6, [pc, #184]	; (800b3d8 <_malloc_r+0xe4>)
 800b31e:	f000 fce5 	bl	800bcec <__malloc_lock>
 800b322:	6833      	ldr	r3, [r6, #0]
 800b324:	461c      	mov	r4, r3
 800b326:	bb34      	cbnz	r4, 800b376 <_malloc_r+0x82>
 800b328:	4629      	mov	r1, r5
 800b32a:	4638      	mov	r0, r7
 800b32c:	f7ff ffc2 	bl	800b2b4 <sbrk_aligned>
 800b330:	1c43      	adds	r3, r0, #1
 800b332:	4604      	mov	r4, r0
 800b334:	d14d      	bne.n	800b3d2 <_malloc_r+0xde>
 800b336:	6834      	ldr	r4, [r6, #0]
 800b338:	4626      	mov	r6, r4
 800b33a:	2e00      	cmp	r6, #0
 800b33c:	d140      	bne.n	800b3c0 <_malloc_r+0xcc>
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	4631      	mov	r1, r6
 800b342:	4638      	mov	r0, r7
 800b344:	eb04 0803 	add.w	r8, r4, r3
 800b348:	f000 fb3e 	bl	800b9c8 <_sbrk_r>
 800b34c:	4580      	cmp	r8, r0
 800b34e:	d13a      	bne.n	800b3c6 <_malloc_r+0xd2>
 800b350:	6821      	ldr	r1, [r4, #0]
 800b352:	3503      	adds	r5, #3
 800b354:	1a6d      	subs	r5, r5, r1
 800b356:	f025 0503 	bic.w	r5, r5, #3
 800b35a:	3508      	adds	r5, #8
 800b35c:	2d0c      	cmp	r5, #12
 800b35e:	bf38      	it	cc
 800b360:	250c      	movcc	r5, #12
 800b362:	4629      	mov	r1, r5
 800b364:	4638      	mov	r0, r7
 800b366:	f7ff ffa5 	bl	800b2b4 <sbrk_aligned>
 800b36a:	3001      	adds	r0, #1
 800b36c:	d02b      	beq.n	800b3c6 <_malloc_r+0xd2>
 800b36e:	6823      	ldr	r3, [r4, #0]
 800b370:	442b      	add	r3, r5
 800b372:	6023      	str	r3, [r4, #0]
 800b374:	e00e      	b.n	800b394 <_malloc_r+0xa0>
 800b376:	6822      	ldr	r2, [r4, #0]
 800b378:	1b52      	subs	r2, r2, r5
 800b37a:	d41e      	bmi.n	800b3ba <_malloc_r+0xc6>
 800b37c:	2a0b      	cmp	r2, #11
 800b37e:	d916      	bls.n	800b3ae <_malloc_r+0xba>
 800b380:	1961      	adds	r1, r4, r5
 800b382:	42a3      	cmp	r3, r4
 800b384:	6025      	str	r5, [r4, #0]
 800b386:	bf18      	it	ne
 800b388:	6059      	strne	r1, [r3, #4]
 800b38a:	6863      	ldr	r3, [r4, #4]
 800b38c:	bf08      	it	eq
 800b38e:	6031      	streq	r1, [r6, #0]
 800b390:	5162      	str	r2, [r4, r5]
 800b392:	604b      	str	r3, [r1, #4]
 800b394:	4638      	mov	r0, r7
 800b396:	f104 060b 	add.w	r6, r4, #11
 800b39a:	f000 fcad 	bl	800bcf8 <__malloc_unlock>
 800b39e:	f026 0607 	bic.w	r6, r6, #7
 800b3a2:	1d23      	adds	r3, r4, #4
 800b3a4:	1af2      	subs	r2, r6, r3
 800b3a6:	d0b6      	beq.n	800b316 <_malloc_r+0x22>
 800b3a8:	1b9b      	subs	r3, r3, r6
 800b3aa:	50a3      	str	r3, [r4, r2]
 800b3ac:	e7b3      	b.n	800b316 <_malloc_r+0x22>
 800b3ae:	6862      	ldr	r2, [r4, #4]
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	bf0c      	ite	eq
 800b3b4:	6032      	streq	r2, [r6, #0]
 800b3b6:	605a      	strne	r2, [r3, #4]
 800b3b8:	e7ec      	b.n	800b394 <_malloc_r+0xa0>
 800b3ba:	4623      	mov	r3, r4
 800b3bc:	6864      	ldr	r4, [r4, #4]
 800b3be:	e7b2      	b.n	800b326 <_malloc_r+0x32>
 800b3c0:	4634      	mov	r4, r6
 800b3c2:	6876      	ldr	r6, [r6, #4]
 800b3c4:	e7b9      	b.n	800b33a <_malloc_r+0x46>
 800b3c6:	230c      	movs	r3, #12
 800b3c8:	603b      	str	r3, [r7, #0]
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	f000 fc94 	bl	800bcf8 <__malloc_unlock>
 800b3d0:	e7a1      	b.n	800b316 <_malloc_r+0x22>
 800b3d2:	6025      	str	r5, [r4, #0]
 800b3d4:	e7de      	b.n	800b394 <_malloc_r+0xa0>
 800b3d6:	bf00      	nop
 800b3d8:	24000d30 	.word	0x24000d30

0800b3dc <__sfputc_r>:
 800b3dc:	6893      	ldr	r3, [r2, #8]
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	b410      	push	{r4}
 800b3e4:	6093      	str	r3, [r2, #8]
 800b3e6:	da08      	bge.n	800b3fa <__sfputc_r+0x1e>
 800b3e8:	6994      	ldr	r4, [r2, #24]
 800b3ea:	42a3      	cmp	r3, r4
 800b3ec:	db01      	blt.n	800b3f2 <__sfputc_r+0x16>
 800b3ee:	290a      	cmp	r1, #10
 800b3f0:	d103      	bne.n	800b3fa <__sfputc_r+0x1e>
 800b3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f6:	f000 bb5b 	b.w	800bab0 <__swbuf_r>
 800b3fa:	6813      	ldr	r3, [r2, #0]
 800b3fc:	1c58      	adds	r0, r3, #1
 800b3fe:	6010      	str	r0, [r2, #0]
 800b400:	7019      	strb	r1, [r3, #0]
 800b402:	4608      	mov	r0, r1
 800b404:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <__sfputs_r>:
 800b40a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40c:	4606      	mov	r6, r0
 800b40e:	460f      	mov	r7, r1
 800b410:	4614      	mov	r4, r2
 800b412:	18d5      	adds	r5, r2, r3
 800b414:	42ac      	cmp	r4, r5
 800b416:	d101      	bne.n	800b41c <__sfputs_r+0x12>
 800b418:	2000      	movs	r0, #0
 800b41a:	e007      	b.n	800b42c <__sfputs_r+0x22>
 800b41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b420:	463a      	mov	r2, r7
 800b422:	4630      	mov	r0, r6
 800b424:	f7ff ffda 	bl	800b3dc <__sfputc_r>
 800b428:	1c43      	adds	r3, r0, #1
 800b42a:	d1f3      	bne.n	800b414 <__sfputs_r+0xa>
 800b42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b430 <_vfiprintf_r>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	460d      	mov	r5, r1
 800b436:	b09d      	sub	sp, #116	; 0x74
 800b438:	4614      	mov	r4, r2
 800b43a:	4698      	mov	r8, r3
 800b43c:	4606      	mov	r6, r0
 800b43e:	b118      	cbz	r0, 800b448 <_vfiprintf_r+0x18>
 800b440:	6983      	ldr	r3, [r0, #24]
 800b442:	b90b      	cbnz	r3, 800b448 <_vfiprintf_r+0x18>
 800b444:	f7ff fcea 	bl	800ae1c <__sinit>
 800b448:	4b89      	ldr	r3, [pc, #548]	; (800b670 <_vfiprintf_r+0x240>)
 800b44a:	429d      	cmp	r5, r3
 800b44c:	d11b      	bne.n	800b486 <_vfiprintf_r+0x56>
 800b44e:	6875      	ldr	r5, [r6, #4]
 800b450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b452:	07d9      	lsls	r1, r3, #31
 800b454:	d405      	bmi.n	800b462 <_vfiprintf_r+0x32>
 800b456:	89ab      	ldrh	r3, [r5, #12]
 800b458:	059a      	lsls	r2, r3, #22
 800b45a:	d402      	bmi.n	800b462 <_vfiprintf_r+0x32>
 800b45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b45e:	f7ff fe20 	bl	800b0a2 <__retarget_lock_acquire_recursive>
 800b462:	89ab      	ldrh	r3, [r5, #12]
 800b464:	071b      	lsls	r3, r3, #28
 800b466:	d501      	bpl.n	800b46c <_vfiprintf_r+0x3c>
 800b468:	692b      	ldr	r3, [r5, #16]
 800b46a:	b9eb      	cbnz	r3, 800b4a8 <_vfiprintf_r+0x78>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4630      	mov	r0, r6
 800b470:	f000 fb82 	bl	800bb78 <__swsetup_r>
 800b474:	b1c0      	cbz	r0, 800b4a8 <_vfiprintf_r+0x78>
 800b476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b478:	07dc      	lsls	r4, r3, #31
 800b47a:	d50e      	bpl.n	800b49a <_vfiprintf_r+0x6a>
 800b47c:	f04f 30ff 	mov.w	r0, #4294967295
 800b480:	b01d      	add	sp, #116	; 0x74
 800b482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b486:	4b7b      	ldr	r3, [pc, #492]	; (800b674 <_vfiprintf_r+0x244>)
 800b488:	429d      	cmp	r5, r3
 800b48a:	d101      	bne.n	800b490 <_vfiprintf_r+0x60>
 800b48c:	68b5      	ldr	r5, [r6, #8]
 800b48e:	e7df      	b.n	800b450 <_vfiprintf_r+0x20>
 800b490:	4b79      	ldr	r3, [pc, #484]	; (800b678 <_vfiprintf_r+0x248>)
 800b492:	429d      	cmp	r5, r3
 800b494:	bf08      	it	eq
 800b496:	68f5      	ldreq	r5, [r6, #12]
 800b498:	e7da      	b.n	800b450 <_vfiprintf_r+0x20>
 800b49a:	89ab      	ldrh	r3, [r5, #12]
 800b49c:	0598      	lsls	r0, r3, #22
 800b49e:	d4ed      	bmi.n	800b47c <_vfiprintf_r+0x4c>
 800b4a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4a2:	f7ff fdff 	bl	800b0a4 <__retarget_lock_release_recursive>
 800b4a6:	e7e9      	b.n	800b47c <_vfiprintf_r+0x4c>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ac:	2320      	movs	r3, #32
 800b4ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4b6:	2330      	movs	r3, #48	; 0x30
 800b4b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b67c <_vfiprintf_r+0x24c>
 800b4bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4c0:	f04f 0901 	mov.w	r9, #1
 800b4c4:	4623      	mov	r3, r4
 800b4c6:	469a      	mov	sl, r3
 800b4c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4cc:	b10a      	cbz	r2, 800b4d2 <_vfiprintf_r+0xa2>
 800b4ce:	2a25      	cmp	r2, #37	; 0x25
 800b4d0:	d1f9      	bne.n	800b4c6 <_vfiprintf_r+0x96>
 800b4d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b4d6:	d00b      	beq.n	800b4f0 <_vfiprintf_r+0xc0>
 800b4d8:	465b      	mov	r3, fp
 800b4da:	4622      	mov	r2, r4
 800b4dc:	4629      	mov	r1, r5
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f7ff ff93 	bl	800b40a <__sfputs_r>
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	f000 80aa 	beq.w	800b63e <_vfiprintf_r+0x20e>
 800b4ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ec:	445a      	add	r2, fp
 800b4ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 80a2 	beq.w	800b63e <_vfiprintf_r+0x20e>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b504:	f10a 0a01 	add.w	sl, sl, #1
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	9307      	str	r3, [sp, #28]
 800b50c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b510:	931a      	str	r3, [sp, #104]	; 0x68
 800b512:	4654      	mov	r4, sl
 800b514:	2205      	movs	r2, #5
 800b516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b51a:	4858      	ldr	r0, [pc, #352]	; (800b67c <_vfiprintf_r+0x24c>)
 800b51c:	f7f4 fee0 	bl	80002e0 <memchr>
 800b520:	9a04      	ldr	r2, [sp, #16]
 800b522:	b9d8      	cbnz	r0, 800b55c <_vfiprintf_r+0x12c>
 800b524:	06d1      	lsls	r1, r2, #27
 800b526:	bf44      	itt	mi
 800b528:	2320      	movmi	r3, #32
 800b52a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b52e:	0713      	lsls	r3, r2, #28
 800b530:	bf44      	itt	mi
 800b532:	232b      	movmi	r3, #43	; 0x2b
 800b534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b538:	f89a 3000 	ldrb.w	r3, [sl]
 800b53c:	2b2a      	cmp	r3, #42	; 0x2a
 800b53e:	d015      	beq.n	800b56c <_vfiprintf_r+0x13c>
 800b540:	9a07      	ldr	r2, [sp, #28]
 800b542:	4654      	mov	r4, sl
 800b544:	2000      	movs	r0, #0
 800b546:	f04f 0c0a 	mov.w	ip, #10
 800b54a:	4621      	mov	r1, r4
 800b54c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b550:	3b30      	subs	r3, #48	; 0x30
 800b552:	2b09      	cmp	r3, #9
 800b554:	d94e      	bls.n	800b5f4 <_vfiprintf_r+0x1c4>
 800b556:	b1b0      	cbz	r0, 800b586 <_vfiprintf_r+0x156>
 800b558:	9207      	str	r2, [sp, #28]
 800b55a:	e014      	b.n	800b586 <_vfiprintf_r+0x156>
 800b55c:	eba0 0308 	sub.w	r3, r0, r8
 800b560:	fa09 f303 	lsl.w	r3, r9, r3
 800b564:	4313      	orrs	r3, r2
 800b566:	9304      	str	r3, [sp, #16]
 800b568:	46a2      	mov	sl, r4
 800b56a:	e7d2      	b.n	800b512 <_vfiprintf_r+0xe2>
 800b56c:	9b03      	ldr	r3, [sp, #12]
 800b56e:	1d19      	adds	r1, r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	9103      	str	r1, [sp, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	bfbb      	ittet	lt
 800b578:	425b      	neglt	r3, r3
 800b57a:	f042 0202 	orrlt.w	r2, r2, #2
 800b57e:	9307      	strge	r3, [sp, #28]
 800b580:	9307      	strlt	r3, [sp, #28]
 800b582:	bfb8      	it	lt
 800b584:	9204      	strlt	r2, [sp, #16]
 800b586:	7823      	ldrb	r3, [r4, #0]
 800b588:	2b2e      	cmp	r3, #46	; 0x2e
 800b58a:	d10c      	bne.n	800b5a6 <_vfiprintf_r+0x176>
 800b58c:	7863      	ldrb	r3, [r4, #1]
 800b58e:	2b2a      	cmp	r3, #42	; 0x2a
 800b590:	d135      	bne.n	800b5fe <_vfiprintf_r+0x1ce>
 800b592:	9b03      	ldr	r3, [sp, #12]
 800b594:	1d1a      	adds	r2, r3, #4
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	9203      	str	r2, [sp, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bfb8      	it	lt
 800b59e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5a2:	3402      	adds	r4, #2
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b68c <_vfiprintf_r+0x25c>
 800b5aa:	7821      	ldrb	r1, [r4, #0]
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	4650      	mov	r0, sl
 800b5b0:	f7f4 fe96 	bl	80002e0 <memchr>
 800b5b4:	b140      	cbz	r0, 800b5c8 <_vfiprintf_r+0x198>
 800b5b6:	2340      	movs	r3, #64	; 0x40
 800b5b8:	eba0 000a 	sub.w	r0, r0, sl
 800b5bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b5c0:	9b04      	ldr	r3, [sp, #16]
 800b5c2:	4303      	orrs	r3, r0
 800b5c4:	3401      	adds	r4, #1
 800b5c6:	9304      	str	r3, [sp, #16]
 800b5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5cc:	482c      	ldr	r0, [pc, #176]	; (800b680 <_vfiprintf_r+0x250>)
 800b5ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5d2:	2206      	movs	r2, #6
 800b5d4:	f7f4 fe84 	bl	80002e0 <memchr>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d03f      	beq.n	800b65c <_vfiprintf_r+0x22c>
 800b5dc:	4b29      	ldr	r3, [pc, #164]	; (800b684 <_vfiprintf_r+0x254>)
 800b5de:	bb1b      	cbnz	r3, 800b628 <_vfiprintf_r+0x1f8>
 800b5e0:	9b03      	ldr	r3, [sp, #12]
 800b5e2:	3307      	adds	r3, #7
 800b5e4:	f023 0307 	bic.w	r3, r3, #7
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	9303      	str	r3, [sp, #12]
 800b5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ee:	443b      	add	r3, r7
 800b5f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b5f2:	e767      	b.n	800b4c4 <_vfiprintf_r+0x94>
 800b5f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	2001      	movs	r0, #1
 800b5fc:	e7a5      	b.n	800b54a <_vfiprintf_r+0x11a>
 800b5fe:	2300      	movs	r3, #0
 800b600:	3401      	adds	r4, #1
 800b602:	9305      	str	r3, [sp, #20]
 800b604:	4619      	mov	r1, r3
 800b606:	f04f 0c0a 	mov.w	ip, #10
 800b60a:	4620      	mov	r0, r4
 800b60c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b610:	3a30      	subs	r2, #48	; 0x30
 800b612:	2a09      	cmp	r2, #9
 800b614:	d903      	bls.n	800b61e <_vfiprintf_r+0x1ee>
 800b616:	2b00      	cmp	r3, #0
 800b618:	d0c5      	beq.n	800b5a6 <_vfiprintf_r+0x176>
 800b61a:	9105      	str	r1, [sp, #20]
 800b61c:	e7c3      	b.n	800b5a6 <_vfiprintf_r+0x176>
 800b61e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b622:	4604      	mov	r4, r0
 800b624:	2301      	movs	r3, #1
 800b626:	e7f0      	b.n	800b60a <_vfiprintf_r+0x1da>
 800b628:	ab03      	add	r3, sp, #12
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	462a      	mov	r2, r5
 800b62e:	4b16      	ldr	r3, [pc, #88]	; (800b688 <_vfiprintf_r+0x258>)
 800b630:	a904      	add	r1, sp, #16
 800b632:	4630      	mov	r0, r6
 800b634:	f3af 8000 	nop.w
 800b638:	4607      	mov	r7, r0
 800b63a:	1c78      	adds	r0, r7, #1
 800b63c:	d1d6      	bne.n	800b5ec <_vfiprintf_r+0x1bc>
 800b63e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b640:	07d9      	lsls	r1, r3, #31
 800b642:	d405      	bmi.n	800b650 <_vfiprintf_r+0x220>
 800b644:	89ab      	ldrh	r3, [r5, #12]
 800b646:	059a      	lsls	r2, r3, #22
 800b648:	d402      	bmi.n	800b650 <_vfiprintf_r+0x220>
 800b64a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b64c:	f7ff fd2a 	bl	800b0a4 <__retarget_lock_release_recursive>
 800b650:	89ab      	ldrh	r3, [r5, #12]
 800b652:	065b      	lsls	r3, r3, #25
 800b654:	f53f af12 	bmi.w	800b47c <_vfiprintf_r+0x4c>
 800b658:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b65a:	e711      	b.n	800b480 <_vfiprintf_r+0x50>
 800b65c:	ab03      	add	r3, sp, #12
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	462a      	mov	r2, r5
 800b662:	4b09      	ldr	r3, [pc, #36]	; (800b688 <_vfiprintf_r+0x258>)
 800b664:	a904      	add	r1, sp, #16
 800b666:	4630      	mov	r0, r6
 800b668:	f000 f880 	bl	800b76c <_printf_i>
 800b66c:	e7e4      	b.n	800b638 <_vfiprintf_r+0x208>
 800b66e:	bf00      	nop
 800b670:	0801a30c 	.word	0x0801a30c
 800b674:	0801a32c 	.word	0x0801a32c
 800b678:	0801a2ec 	.word	0x0801a2ec
 800b67c:	0801a350 	.word	0x0801a350
 800b680:	0801a35a 	.word	0x0801a35a
 800b684:	00000000 	.word	0x00000000
 800b688:	0800b40b 	.word	0x0800b40b
 800b68c:	0801a356 	.word	0x0801a356

0800b690 <_printf_common>:
 800b690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	4616      	mov	r6, r2
 800b696:	4699      	mov	r9, r3
 800b698:	688a      	ldr	r2, [r1, #8]
 800b69a:	690b      	ldr	r3, [r1, #16]
 800b69c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	bfb8      	it	lt
 800b6a4:	4613      	movlt	r3, r2
 800b6a6:	6033      	str	r3, [r6, #0]
 800b6a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6ac:	4607      	mov	r7, r0
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	b10a      	cbz	r2, 800b6b6 <_printf_common+0x26>
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	6033      	str	r3, [r6, #0]
 800b6b6:	6823      	ldr	r3, [r4, #0]
 800b6b8:	0699      	lsls	r1, r3, #26
 800b6ba:	bf42      	ittt	mi
 800b6bc:	6833      	ldrmi	r3, [r6, #0]
 800b6be:	3302      	addmi	r3, #2
 800b6c0:	6033      	strmi	r3, [r6, #0]
 800b6c2:	6825      	ldr	r5, [r4, #0]
 800b6c4:	f015 0506 	ands.w	r5, r5, #6
 800b6c8:	d106      	bne.n	800b6d8 <_printf_common+0x48>
 800b6ca:	f104 0a19 	add.w	sl, r4, #25
 800b6ce:	68e3      	ldr	r3, [r4, #12]
 800b6d0:	6832      	ldr	r2, [r6, #0]
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	42ab      	cmp	r3, r5
 800b6d6:	dc26      	bgt.n	800b726 <_printf_common+0x96>
 800b6d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6dc:	1e13      	subs	r3, r2, #0
 800b6de:	6822      	ldr	r2, [r4, #0]
 800b6e0:	bf18      	it	ne
 800b6e2:	2301      	movne	r3, #1
 800b6e4:	0692      	lsls	r2, r2, #26
 800b6e6:	d42b      	bmi.n	800b740 <_printf_common+0xb0>
 800b6e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	4638      	mov	r0, r7
 800b6f0:	47c0      	blx	r8
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	d01e      	beq.n	800b734 <_printf_common+0xa4>
 800b6f6:	6823      	ldr	r3, [r4, #0]
 800b6f8:	68e5      	ldr	r5, [r4, #12]
 800b6fa:	6832      	ldr	r2, [r6, #0]
 800b6fc:	f003 0306 	and.w	r3, r3, #6
 800b700:	2b04      	cmp	r3, #4
 800b702:	bf08      	it	eq
 800b704:	1aad      	subeq	r5, r5, r2
 800b706:	68a3      	ldr	r3, [r4, #8]
 800b708:	6922      	ldr	r2, [r4, #16]
 800b70a:	bf0c      	ite	eq
 800b70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b710:	2500      	movne	r5, #0
 800b712:	4293      	cmp	r3, r2
 800b714:	bfc4      	itt	gt
 800b716:	1a9b      	subgt	r3, r3, r2
 800b718:	18ed      	addgt	r5, r5, r3
 800b71a:	2600      	movs	r6, #0
 800b71c:	341a      	adds	r4, #26
 800b71e:	42b5      	cmp	r5, r6
 800b720:	d11a      	bne.n	800b758 <_printf_common+0xc8>
 800b722:	2000      	movs	r0, #0
 800b724:	e008      	b.n	800b738 <_printf_common+0xa8>
 800b726:	2301      	movs	r3, #1
 800b728:	4652      	mov	r2, sl
 800b72a:	4649      	mov	r1, r9
 800b72c:	4638      	mov	r0, r7
 800b72e:	47c0      	blx	r8
 800b730:	3001      	adds	r0, #1
 800b732:	d103      	bne.n	800b73c <_printf_common+0xac>
 800b734:	f04f 30ff 	mov.w	r0, #4294967295
 800b738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73c:	3501      	adds	r5, #1
 800b73e:	e7c6      	b.n	800b6ce <_printf_common+0x3e>
 800b740:	18e1      	adds	r1, r4, r3
 800b742:	1c5a      	adds	r2, r3, #1
 800b744:	2030      	movs	r0, #48	; 0x30
 800b746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b74a:	4422      	add	r2, r4
 800b74c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b754:	3302      	adds	r3, #2
 800b756:	e7c7      	b.n	800b6e8 <_printf_common+0x58>
 800b758:	2301      	movs	r3, #1
 800b75a:	4622      	mov	r2, r4
 800b75c:	4649      	mov	r1, r9
 800b75e:	4638      	mov	r0, r7
 800b760:	47c0      	blx	r8
 800b762:	3001      	adds	r0, #1
 800b764:	d0e6      	beq.n	800b734 <_printf_common+0xa4>
 800b766:	3601      	adds	r6, #1
 800b768:	e7d9      	b.n	800b71e <_printf_common+0x8e>
	...

0800b76c <_printf_i>:
 800b76c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b770:	7e0f      	ldrb	r7, [r1, #24]
 800b772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b774:	2f78      	cmp	r7, #120	; 0x78
 800b776:	4691      	mov	r9, r2
 800b778:	4680      	mov	r8, r0
 800b77a:	460c      	mov	r4, r1
 800b77c:	469a      	mov	sl, r3
 800b77e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b782:	d807      	bhi.n	800b794 <_printf_i+0x28>
 800b784:	2f62      	cmp	r7, #98	; 0x62
 800b786:	d80a      	bhi.n	800b79e <_printf_i+0x32>
 800b788:	2f00      	cmp	r7, #0
 800b78a:	f000 80d8 	beq.w	800b93e <_printf_i+0x1d2>
 800b78e:	2f58      	cmp	r7, #88	; 0x58
 800b790:	f000 80a3 	beq.w	800b8da <_printf_i+0x16e>
 800b794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b79c:	e03a      	b.n	800b814 <_printf_i+0xa8>
 800b79e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7a2:	2b15      	cmp	r3, #21
 800b7a4:	d8f6      	bhi.n	800b794 <_printf_i+0x28>
 800b7a6:	a101      	add	r1, pc, #4	; (adr r1, 800b7ac <_printf_i+0x40>)
 800b7a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7ac:	0800b805 	.word	0x0800b805
 800b7b0:	0800b819 	.word	0x0800b819
 800b7b4:	0800b795 	.word	0x0800b795
 800b7b8:	0800b795 	.word	0x0800b795
 800b7bc:	0800b795 	.word	0x0800b795
 800b7c0:	0800b795 	.word	0x0800b795
 800b7c4:	0800b819 	.word	0x0800b819
 800b7c8:	0800b795 	.word	0x0800b795
 800b7cc:	0800b795 	.word	0x0800b795
 800b7d0:	0800b795 	.word	0x0800b795
 800b7d4:	0800b795 	.word	0x0800b795
 800b7d8:	0800b925 	.word	0x0800b925
 800b7dc:	0800b849 	.word	0x0800b849
 800b7e0:	0800b907 	.word	0x0800b907
 800b7e4:	0800b795 	.word	0x0800b795
 800b7e8:	0800b795 	.word	0x0800b795
 800b7ec:	0800b947 	.word	0x0800b947
 800b7f0:	0800b795 	.word	0x0800b795
 800b7f4:	0800b849 	.word	0x0800b849
 800b7f8:	0800b795 	.word	0x0800b795
 800b7fc:	0800b795 	.word	0x0800b795
 800b800:	0800b90f 	.word	0x0800b90f
 800b804:	682b      	ldr	r3, [r5, #0]
 800b806:	1d1a      	adds	r2, r3, #4
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	602a      	str	r2, [r5, #0]
 800b80c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b814:	2301      	movs	r3, #1
 800b816:	e0a3      	b.n	800b960 <_printf_i+0x1f4>
 800b818:	6820      	ldr	r0, [r4, #0]
 800b81a:	6829      	ldr	r1, [r5, #0]
 800b81c:	0606      	lsls	r6, r0, #24
 800b81e:	f101 0304 	add.w	r3, r1, #4
 800b822:	d50a      	bpl.n	800b83a <_printf_i+0xce>
 800b824:	680e      	ldr	r6, [r1, #0]
 800b826:	602b      	str	r3, [r5, #0]
 800b828:	2e00      	cmp	r6, #0
 800b82a:	da03      	bge.n	800b834 <_printf_i+0xc8>
 800b82c:	232d      	movs	r3, #45	; 0x2d
 800b82e:	4276      	negs	r6, r6
 800b830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b834:	485e      	ldr	r0, [pc, #376]	; (800b9b0 <_printf_i+0x244>)
 800b836:	230a      	movs	r3, #10
 800b838:	e019      	b.n	800b86e <_printf_i+0x102>
 800b83a:	680e      	ldr	r6, [r1, #0]
 800b83c:	602b      	str	r3, [r5, #0]
 800b83e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b842:	bf18      	it	ne
 800b844:	b236      	sxthne	r6, r6
 800b846:	e7ef      	b.n	800b828 <_printf_i+0xbc>
 800b848:	682b      	ldr	r3, [r5, #0]
 800b84a:	6820      	ldr	r0, [r4, #0]
 800b84c:	1d19      	adds	r1, r3, #4
 800b84e:	6029      	str	r1, [r5, #0]
 800b850:	0601      	lsls	r1, r0, #24
 800b852:	d501      	bpl.n	800b858 <_printf_i+0xec>
 800b854:	681e      	ldr	r6, [r3, #0]
 800b856:	e002      	b.n	800b85e <_printf_i+0xf2>
 800b858:	0646      	lsls	r6, r0, #25
 800b85a:	d5fb      	bpl.n	800b854 <_printf_i+0xe8>
 800b85c:	881e      	ldrh	r6, [r3, #0]
 800b85e:	4854      	ldr	r0, [pc, #336]	; (800b9b0 <_printf_i+0x244>)
 800b860:	2f6f      	cmp	r7, #111	; 0x6f
 800b862:	bf0c      	ite	eq
 800b864:	2308      	moveq	r3, #8
 800b866:	230a      	movne	r3, #10
 800b868:	2100      	movs	r1, #0
 800b86a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b86e:	6865      	ldr	r5, [r4, #4]
 800b870:	60a5      	str	r5, [r4, #8]
 800b872:	2d00      	cmp	r5, #0
 800b874:	bfa2      	ittt	ge
 800b876:	6821      	ldrge	r1, [r4, #0]
 800b878:	f021 0104 	bicge.w	r1, r1, #4
 800b87c:	6021      	strge	r1, [r4, #0]
 800b87e:	b90e      	cbnz	r6, 800b884 <_printf_i+0x118>
 800b880:	2d00      	cmp	r5, #0
 800b882:	d04d      	beq.n	800b920 <_printf_i+0x1b4>
 800b884:	4615      	mov	r5, r2
 800b886:	fbb6 f1f3 	udiv	r1, r6, r3
 800b88a:	fb03 6711 	mls	r7, r3, r1, r6
 800b88e:	5dc7      	ldrb	r7, [r0, r7]
 800b890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b894:	4637      	mov	r7, r6
 800b896:	42bb      	cmp	r3, r7
 800b898:	460e      	mov	r6, r1
 800b89a:	d9f4      	bls.n	800b886 <_printf_i+0x11a>
 800b89c:	2b08      	cmp	r3, #8
 800b89e:	d10b      	bne.n	800b8b8 <_printf_i+0x14c>
 800b8a0:	6823      	ldr	r3, [r4, #0]
 800b8a2:	07de      	lsls	r6, r3, #31
 800b8a4:	d508      	bpl.n	800b8b8 <_printf_i+0x14c>
 800b8a6:	6923      	ldr	r3, [r4, #16]
 800b8a8:	6861      	ldr	r1, [r4, #4]
 800b8aa:	4299      	cmp	r1, r3
 800b8ac:	bfde      	ittt	le
 800b8ae:	2330      	movle	r3, #48	; 0x30
 800b8b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8b8:	1b52      	subs	r2, r2, r5
 800b8ba:	6122      	str	r2, [r4, #16]
 800b8bc:	f8cd a000 	str.w	sl, [sp]
 800b8c0:	464b      	mov	r3, r9
 800b8c2:	aa03      	add	r2, sp, #12
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	f7ff fee2 	bl	800b690 <_printf_common>
 800b8cc:	3001      	adds	r0, #1
 800b8ce:	d14c      	bne.n	800b96a <_printf_i+0x1fe>
 800b8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d4:	b004      	add	sp, #16
 800b8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8da:	4835      	ldr	r0, [pc, #212]	; (800b9b0 <_printf_i+0x244>)
 800b8dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b8e0:	6829      	ldr	r1, [r5, #0]
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b8e8:	6029      	str	r1, [r5, #0]
 800b8ea:	061d      	lsls	r5, r3, #24
 800b8ec:	d514      	bpl.n	800b918 <_printf_i+0x1ac>
 800b8ee:	07df      	lsls	r7, r3, #31
 800b8f0:	bf44      	itt	mi
 800b8f2:	f043 0320 	orrmi.w	r3, r3, #32
 800b8f6:	6023      	strmi	r3, [r4, #0]
 800b8f8:	b91e      	cbnz	r6, 800b902 <_printf_i+0x196>
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	f023 0320 	bic.w	r3, r3, #32
 800b900:	6023      	str	r3, [r4, #0]
 800b902:	2310      	movs	r3, #16
 800b904:	e7b0      	b.n	800b868 <_printf_i+0xfc>
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	f043 0320 	orr.w	r3, r3, #32
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	2378      	movs	r3, #120	; 0x78
 800b910:	4828      	ldr	r0, [pc, #160]	; (800b9b4 <_printf_i+0x248>)
 800b912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b916:	e7e3      	b.n	800b8e0 <_printf_i+0x174>
 800b918:	0659      	lsls	r1, r3, #25
 800b91a:	bf48      	it	mi
 800b91c:	b2b6      	uxthmi	r6, r6
 800b91e:	e7e6      	b.n	800b8ee <_printf_i+0x182>
 800b920:	4615      	mov	r5, r2
 800b922:	e7bb      	b.n	800b89c <_printf_i+0x130>
 800b924:	682b      	ldr	r3, [r5, #0]
 800b926:	6826      	ldr	r6, [r4, #0]
 800b928:	6961      	ldr	r1, [r4, #20]
 800b92a:	1d18      	adds	r0, r3, #4
 800b92c:	6028      	str	r0, [r5, #0]
 800b92e:	0635      	lsls	r5, r6, #24
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	d501      	bpl.n	800b938 <_printf_i+0x1cc>
 800b934:	6019      	str	r1, [r3, #0]
 800b936:	e002      	b.n	800b93e <_printf_i+0x1d2>
 800b938:	0670      	lsls	r0, r6, #25
 800b93a:	d5fb      	bpl.n	800b934 <_printf_i+0x1c8>
 800b93c:	8019      	strh	r1, [r3, #0]
 800b93e:	2300      	movs	r3, #0
 800b940:	6123      	str	r3, [r4, #16]
 800b942:	4615      	mov	r5, r2
 800b944:	e7ba      	b.n	800b8bc <_printf_i+0x150>
 800b946:	682b      	ldr	r3, [r5, #0]
 800b948:	1d1a      	adds	r2, r3, #4
 800b94a:	602a      	str	r2, [r5, #0]
 800b94c:	681d      	ldr	r5, [r3, #0]
 800b94e:	6862      	ldr	r2, [r4, #4]
 800b950:	2100      	movs	r1, #0
 800b952:	4628      	mov	r0, r5
 800b954:	f7f4 fcc4 	bl	80002e0 <memchr>
 800b958:	b108      	cbz	r0, 800b95e <_printf_i+0x1f2>
 800b95a:	1b40      	subs	r0, r0, r5
 800b95c:	6060      	str	r0, [r4, #4]
 800b95e:	6863      	ldr	r3, [r4, #4]
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	2300      	movs	r3, #0
 800b964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b968:	e7a8      	b.n	800b8bc <_printf_i+0x150>
 800b96a:	6923      	ldr	r3, [r4, #16]
 800b96c:	462a      	mov	r2, r5
 800b96e:	4649      	mov	r1, r9
 800b970:	4640      	mov	r0, r8
 800b972:	47d0      	blx	sl
 800b974:	3001      	adds	r0, #1
 800b976:	d0ab      	beq.n	800b8d0 <_printf_i+0x164>
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	079b      	lsls	r3, r3, #30
 800b97c:	d413      	bmi.n	800b9a6 <_printf_i+0x23a>
 800b97e:	68e0      	ldr	r0, [r4, #12]
 800b980:	9b03      	ldr	r3, [sp, #12]
 800b982:	4298      	cmp	r0, r3
 800b984:	bfb8      	it	lt
 800b986:	4618      	movlt	r0, r3
 800b988:	e7a4      	b.n	800b8d4 <_printf_i+0x168>
 800b98a:	2301      	movs	r3, #1
 800b98c:	4632      	mov	r2, r6
 800b98e:	4649      	mov	r1, r9
 800b990:	4640      	mov	r0, r8
 800b992:	47d0      	blx	sl
 800b994:	3001      	adds	r0, #1
 800b996:	d09b      	beq.n	800b8d0 <_printf_i+0x164>
 800b998:	3501      	adds	r5, #1
 800b99a:	68e3      	ldr	r3, [r4, #12]
 800b99c:	9903      	ldr	r1, [sp, #12]
 800b99e:	1a5b      	subs	r3, r3, r1
 800b9a0:	42ab      	cmp	r3, r5
 800b9a2:	dcf2      	bgt.n	800b98a <_printf_i+0x21e>
 800b9a4:	e7eb      	b.n	800b97e <_printf_i+0x212>
 800b9a6:	2500      	movs	r5, #0
 800b9a8:	f104 0619 	add.w	r6, r4, #25
 800b9ac:	e7f5      	b.n	800b99a <_printf_i+0x22e>
 800b9ae:	bf00      	nop
 800b9b0:	0801a361 	.word	0x0801a361
 800b9b4:	0801a372 	.word	0x0801a372

0800b9b8 <realloc>:
 800b9b8:	4b02      	ldr	r3, [pc, #8]	; (800b9c4 <realloc+0xc>)
 800b9ba:	460a      	mov	r2, r1
 800b9bc:	4601      	mov	r1, r0
 800b9be:	6818      	ldr	r0, [r3, #0]
 800b9c0:	f000 b9a0 	b.w	800bd04 <_realloc_r>
 800b9c4:	240004fc 	.word	0x240004fc

0800b9c8 <_sbrk_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4d06      	ldr	r5, [pc, #24]	; (800b9e4 <_sbrk_r+0x1c>)
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	602b      	str	r3, [r5, #0]
 800b9d4:	f7f8 fb56 	bl	8004084 <_sbrk>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d102      	bne.n	800b9e2 <_sbrk_r+0x1a>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b103      	cbz	r3, 800b9e2 <_sbrk_r+0x1a>
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	24000d38 	.word	0x24000d38

0800b9e8 <siprintf>:
 800b9e8:	b40e      	push	{r1, r2, r3}
 800b9ea:	b500      	push	{lr}
 800b9ec:	b09c      	sub	sp, #112	; 0x70
 800b9ee:	ab1d      	add	r3, sp, #116	; 0x74
 800b9f0:	9002      	str	r0, [sp, #8]
 800b9f2:	9006      	str	r0, [sp, #24]
 800b9f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9f8:	4809      	ldr	r0, [pc, #36]	; (800ba20 <siprintf+0x38>)
 800b9fa:	9107      	str	r1, [sp, #28]
 800b9fc:	9104      	str	r1, [sp, #16]
 800b9fe:	4909      	ldr	r1, [pc, #36]	; (800ba24 <siprintf+0x3c>)
 800ba00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba04:	9105      	str	r1, [sp, #20]
 800ba06:	6800      	ldr	r0, [r0, #0]
 800ba08:	9301      	str	r3, [sp, #4]
 800ba0a:	a902      	add	r1, sp, #8
 800ba0c:	f000 fa04 	bl	800be18 <_svfiprintf_r>
 800ba10:	9b02      	ldr	r3, [sp, #8]
 800ba12:	2200      	movs	r2, #0
 800ba14:	701a      	strb	r2, [r3, #0]
 800ba16:	b01c      	add	sp, #112	; 0x70
 800ba18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba1c:	b003      	add	sp, #12
 800ba1e:	4770      	bx	lr
 800ba20:	240004fc 	.word	0x240004fc
 800ba24:	ffff0208 	.word	0xffff0208

0800ba28 <__sread>:
 800ba28:	b510      	push	{r4, lr}
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba30:	f000 faf2 	bl	800c018 <_read_r>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	bfab      	itete	ge
 800ba38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba3a:	89a3      	ldrhlt	r3, [r4, #12]
 800ba3c:	181b      	addge	r3, r3, r0
 800ba3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba42:	bfac      	ite	ge
 800ba44:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba46:	81a3      	strhlt	r3, [r4, #12]
 800ba48:	bd10      	pop	{r4, pc}

0800ba4a <__swrite>:
 800ba4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4e:	461f      	mov	r7, r3
 800ba50:	898b      	ldrh	r3, [r1, #12]
 800ba52:	05db      	lsls	r3, r3, #23
 800ba54:	4605      	mov	r5, r0
 800ba56:	460c      	mov	r4, r1
 800ba58:	4616      	mov	r6, r2
 800ba5a:	d505      	bpl.n	800ba68 <__swrite+0x1e>
 800ba5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba60:	2302      	movs	r3, #2
 800ba62:	2200      	movs	r2, #0
 800ba64:	f000 f930 	bl	800bcc8 <_lseek_r>
 800ba68:	89a3      	ldrh	r3, [r4, #12]
 800ba6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	4632      	mov	r2, r6
 800ba76:	463b      	mov	r3, r7
 800ba78:	4628      	mov	r0, r5
 800ba7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7e:	f000 b869 	b.w	800bb54 <_write_r>

0800ba82 <__sseek>:
 800ba82:	b510      	push	{r4, lr}
 800ba84:	460c      	mov	r4, r1
 800ba86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba8a:	f000 f91d 	bl	800bcc8 <_lseek_r>
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	bf15      	itete	ne
 800ba94:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba9e:	81a3      	strheq	r3, [r4, #12]
 800baa0:	bf18      	it	ne
 800baa2:	81a3      	strhne	r3, [r4, #12]
 800baa4:	bd10      	pop	{r4, pc}

0800baa6 <__sclose>:
 800baa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baaa:	f000 b8db 	b.w	800bc64 <_close_r>
	...

0800bab0 <__swbuf_r>:
 800bab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab2:	460e      	mov	r6, r1
 800bab4:	4614      	mov	r4, r2
 800bab6:	4605      	mov	r5, r0
 800bab8:	b118      	cbz	r0, 800bac2 <__swbuf_r+0x12>
 800baba:	6983      	ldr	r3, [r0, #24]
 800babc:	b90b      	cbnz	r3, 800bac2 <__swbuf_r+0x12>
 800babe:	f7ff f9ad 	bl	800ae1c <__sinit>
 800bac2:	4b21      	ldr	r3, [pc, #132]	; (800bb48 <__swbuf_r+0x98>)
 800bac4:	429c      	cmp	r4, r3
 800bac6:	d12b      	bne.n	800bb20 <__swbuf_r+0x70>
 800bac8:	686c      	ldr	r4, [r5, #4]
 800baca:	69a3      	ldr	r3, [r4, #24]
 800bacc:	60a3      	str	r3, [r4, #8]
 800bace:	89a3      	ldrh	r3, [r4, #12]
 800bad0:	071a      	lsls	r2, r3, #28
 800bad2:	d52f      	bpl.n	800bb34 <__swbuf_r+0x84>
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	b36b      	cbz	r3, 800bb34 <__swbuf_r+0x84>
 800bad8:	6923      	ldr	r3, [r4, #16]
 800bada:	6820      	ldr	r0, [r4, #0]
 800badc:	1ac0      	subs	r0, r0, r3
 800bade:	6963      	ldr	r3, [r4, #20]
 800bae0:	b2f6      	uxtb	r6, r6
 800bae2:	4283      	cmp	r3, r0
 800bae4:	4637      	mov	r7, r6
 800bae6:	dc04      	bgt.n	800baf2 <__swbuf_r+0x42>
 800bae8:	4621      	mov	r1, r4
 800baea:	4628      	mov	r0, r5
 800baec:	f7ff f902 	bl	800acf4 <_fflush_r>
 800baf0:	bb30      	cbnz	r0, 800bb40 <__swbuf_r+0x90>
 800baf2:	68a3      	ldr	r3, [r4, #8]
 800baf4:	3b01      	subs	r3, #1
 800baf6:	60a3      	str	r3, [r4, #8]
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	6022      	str	r2, [r4, #0]
 800bafe:	701e      	strb	r6, [r3, #0]
 800bb00:	6963      	ldr	r3, [r4, #20]
 800bb02:	3001      	adds	r0, #1
 800bb04:	4283      	cmp	r3, r0
 800bb06:	d004      	beq.n	800bb12 <__swbuf_r+0x62>
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	07db      	lsls	r3, r3, #31
 800bb0c:	d506      	bpl.n	800bb1c <__swbuf_r+0x6c>
 800bb0e:	2e0a      	cmp	r6, #10
 800bb10:	d104      	bne.n	800bb1c <__swbuf_r+0x6c>
 800bb12:	4621      	mov	r1, r4
 800bb14:	4628      	mov	r0, r5
 800bb16:	f7ff f8ed 	bl	800acf4 <_fflush_r>
 800bb1a:	b988      	cbnz	r0, 800bb40 <__swbuf_r+0x90>
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb20:	4b0a      	ldr	r3, [pc, #40]	; (800bb4c <__swbuf_r+0x9c>)
 800bb22:	429c      	cmp	r4, r3
 800bb24:	d101      	bne.n	800bb2a <__swbuf_r+0x7a>
 800bb26:	68ac      	ldr	r4, [r5, #8]
 800bb28:	e7cf      	b.n	800baca <__swbuf_r+0x1a>
 800bb2a:	4b09      	ldr	r3, [pc, #36]	; (800bb50 <__swbuf_r+0xa0>)
 800bb2c:	429c      	cmp	r4, r3
 800bb2e:	bf08      	it	eq
 800bb30:	68ec      	ldreq	r4, [r5, #12]
 800bb32:	e7ca      	b.n	800baca <__swbuf_r+0x1a>
 800bb34:	4621      	mov	r1, r4
 800bb36:	4628      	mov	r0, r5
 800bb38:	f000 f81e 	bl	800bb78 <__swsetup_r>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d0cb      	beq.n	800bad8 <__swbuf_r+0x28>
 800bb40:	f04f 37ff 	mov.w	r7, #4294967295
 800bb44:	e7ea      	b.n	800bb1c <__swbuf_r+0x6c>
 800bb46:	bf00      	nop
 800bb48:	0801a30c 	.word	0x0801a30c
 800bb4c:	0801a32c 	.word	0x0801a32c
 800bb50:	0801a2ec 	.word	0x0801a2ec

0800bb54 <_write_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	4d07      	ldr	r5, [pc, #28]	; (800bb74 <_write_r+0x20>)
 800bb58:	4604      	mov	r4, r0
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	4611      	mov	r1, r2
 800bb5e:	2200      	movs	r2, #0
 800bb60:	602a      	str	r2, [r5, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f7f8 fa3d 	bl	8003fe2 <_write>
 800bb68:	1c43      	adds	r3, r0, #1
 800bb6a:	d102      	bne.n	800bb72 <_write_r+0x1e>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	b103      	cbz	r3, 800bb72 <_write_r+0x1e>
 800bb70:	6023      	str	r3, [r4, #0]
 800bb72:	bd38      	pop	{r3, r4, r5, pc}
 800bb74:	24000d38 	.word	0x24000d38

0800bb78 <__swsetup_r>:
 800bb78:	4b32      	ldr	r3, [pc, #200]	; (800bc44 <__swsetup_r+0xcc>)
 800bb7a:	b570      	push	{r4, r5, r6, lr}
 800bb7c:	681d      	ldr	r5, [r3, #0]
 800bb7e:	4606      	mov	r6, r0
 800bb80:	460c      	mov	r4, r1
 800bb82:	b125      	cbz	r5, 800bb8e <__swsetup_r+0x16>
 800bb84:	69ab      	ldr	r3, [r5, #24]
 800bb86:	b913      	cbnz	r3, 800bb8e <__swsetup_r+0x16>
 800bb88:	4628      	mov	r0, r5
 800bb8a:	f7ff f947 	bl	800ae1c <__sinit>
 800bb8e:	4b2e      	ldr	r3, [pc, #184]	; (800bc48 <__swsetup_r+0xd0>)
 800bb90:	429c      	cmp	r4, r3
 800bb92:	d10f      	bne.n	800bbb4 <__swsetup_r+0x3c>
 800bb94:	686c      	ldr	r4, [r5, #4]
 800bb96:	89a3      	ldrh	r3, [r4, #12]
 800bb98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb9c:	0719      	lsls	r1, r3, #28
 800bb9e:	d42c      	bmi.n	800bbfa <__swsetup_r+0x82>
 800bba0:	06dd      	lsls	r5, r3, #27
 800bba2:	d411      	bmi.n	800bbc8 <__swsetup_r+0x50>
 800bba4:	2309      	movs	r3, #9
 800bba6:	6033      	str	r3, [r6, #0]
 800bba8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbac:	81a3      	strh	r3, [r4, #12]
 800bbae:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb2:	e03e      	b.n	800bc32 <__swsetup_r+0xba>
 800bbb4:	4b25      	ldr	r3, [pc, #148]	; (800bc4c <__swsetup_r+0xd4>)
 800bbb6:	429c      	cmp	r4, r3
 800bbb8:	d101      	bne.n	800bbbe <__swsetup_r+0x46>
 800bbba:	68ac      	ldr	r4, [r5, #8]
 800bbbc:	e7eb      	b.n	800bb96 <__swsetup_r+0x1e>
 800bbbe:	4b24      	ldr	r3, [pc, #144]	; (800bc50 <__swsetup_r+0xd8>)
 800bbc0:	429c      	cmp	r4, r3
 800bbc2:	bf08      	it	eq
 800bbc4:	68ec      	ldreq	r4, [r5, #12]
 800bbc6:	e7e6      	b.n	800bb96 <__swsetup_r+0x1e>
 800bbc8:	0758      	lsls	r0, r3, #29
 800bbca:	d512      	bpl.n	800bbf2 <__swsetup_r+0x7a>
 800bbcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbce:	b141      	cbz	r1, 800bbe2 <__swsetup_r+0x6a>
 800bbd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbd4:	4299      	cmp	r1, r3
 800bbd6:	d002      	beq.n	800bbde <__swsetup_r+0x66>
 800bbd8:	4630      	mov	r0, r6
 800bbda:	f7ff fb1f 	bl	800b21c <_free_r>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	6363      	str	r3, [r4, #52]	; 0x34
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	2300      	movs	r3, #0
 800bbec:	6063      	str	r3, [r4, #4]
 800bbee:	6923      	ldr	r3, [r4, #16]
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	f043 0308 	orr.w	r3, r3, #8
 800bbf8:	81a3      	strh	r3, [r4, #12]
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	b94b      	cbnz	r3, 800bc12 <__swsetup_r+0x9a>
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc08:	d003      	beq.n	800bc12 <__swsetup_r+0x9a>
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7ff fa6f 	bl	800b0f0 <__smakebuf_r>
 800bc12:	89a0      	ldrh	r0, [r4, #12]
 800bc14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc18:	f010 0301 	ands.w	r3, r0, #1
 800bc1c:	d00a      	beq.n	800bc34 <__swsetup_r+0xbc>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	60a3      	str	r3, [r4, #8]
 800bc22:	6963      	ldr	r3, [r4, #20]
 800bc24:	425b      	negs	r3, r3
 800bc26:	61a3      	str	r3, [r4, #24]
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	b943      	cbnz	r3, 800bc3e <__swsetup_r+0xc6>
 800bc2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc30:	d1ba      	bne.n	800bba8 <__swsetup_r+0x30>
 800bc32:	bd70      	pop	{r4, r5, r6, pc}
 800bc34:	0781      	lsls	r1, r0, #30
 800bc36:	bf58      	it	pl
 800bc38:	6963      	ldrpl	r3, [r4, #20]
 800bc3a:	60a3      	str	r3, [r4, #8]
 800bc3c:	e7f4      	b.n	800bc28 <__swsetup_r+0xb0>
 800bc3e:	2000      	movs	r0, #0
 800bc40:	e7f7      	b.n	800bc32 <__swsetup_r+0xba>
 800bc42:	bf00      	nop
 800bc44:	240004fc 	.word	0x240004fc
 800bc48:	0801a30c 	.word	0x0801a30c
 800bc4c:	0801a32c 	.word	0x0801a32c
 800bc50:	0801a2ec 	.word	0x0801a2ec

0800bc54 <abort>:
 800bc54:	b508      	push	{r3, lr}
 800bc56:	2006      	movs	r0, #6
 800bc58:	f000 fa18 	bl	800c08c <raise>
 800bc5c:	2001      	movs	r0, #1
 800bc5e:	f7f8 f999 	bl	8003f94 <_exit>
	...

0800bc64 <_close_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d06      	ldr	r5, [pc, #24]	; (800bc80 <_close_r+0x1c>)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	f7f8 f9d3 	bl	800401a <_close>
 800bc74:	1c43      	adds	r3, r0, #1
 800bc76:	d102      	bne.n	800bc7e <_close_r+0x1a>
 800bc78:	682b      	ldr	r3, [r5, #0]
 800bc7a:	b103      	cbz	r3, 800bc7e <_close_r+0x1a>
 800bc7c:	6023      	str	r3, [r4, #0]
 800bc7e:	bd38      	pop	{r3, r4, r5, pc}
 800bc80:	24000d38 	.word	0x24000d38

0800bc84 <_fstat_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4d07      	ldr	r5, [pc, #28]	; (800bca4 <_fstat_r+0x20>)
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	4608      	mov	r0, r1
 800bc8e:	4611      	mov	r1, r2
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	f7f8 f9ce 	bl	8004032 <_fstat>
 800bc96:	1c43      	adds	r3, r0, #1
 800bc98:	d102      	bne.n	800bca0 <_fstat_r+0x1c>
 800bc9a:	682b      	ldr	r3, [r5, #0]
 800bc9c:	b103      	cbz	r3, 800bca0 <_fstat_r+0x1c>
 800bc9e:	6023      	str	r3, [r4, #0]
 800bca0:	bd38      	pop	{r3, r4, r5, pc}
 800bca2:	bf00      	nop
 800bca4:	24000d38 	.word	0x24000d38

0800bca8 <_isatty_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d06      	ldr	r5, [pc, #24]	; (800bcc4 <_isatty_r+0x1c>)
 800bcac:	2300      	movs	r3, #0
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	602b      	str	r3, [r5, #0]
 800bcb4:	f7f8 f9cd 	bl	8004052 <_isatty>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_isatty_r+0x1a>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_isatty_r+0x1a>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	24000d38 	.word	0x24000d38

0800bcc8 <_lseek_r>:
 800bcc8:	b538      	push	{r3, r4, r5, lr}
 800bcca:	4d07      	ldr	r5, [pc, #28]	; (800bce8 <_lseek_r+0x20>)
 800bccc:	4604      	mov	r4, r0
 800bcce:	4608      	mov	r0, r1
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	602a      	str	r2, [r5, #0]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	f7f8 f9c6 	bl	8004068 <_lseek>
 800bcdc:	1c43      	adds	r3, r0, #1
 800bcde:	d102      	bne.n	800bce6 <_lseek_r+0x1e>
 800bce0:	682b      	ldr	r3, [r5, #0]
 800bce2:	b103      	cbz	r3, 800bce6 <_lseek_r+0x1e>
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	bd38      	pop	{r3, r4, r5, pc}
 800bce8:	24000d38 	.word	0x24000d38

0800bcec <__malloc_lock>:
 800bcec:	4801      	ldr	r0, [pc, #4]	; (800bcf4 <__malloc_lock+0x8>)
 800bcee:	f7ff b9d8 	b.w	800b0a2 <__retarget_lock_acquire_recursive>
 800bcf2:	bf00      	nop
 800bcf4:	24000d2c 	.word	0x24000d2c

0800bcf8 <__malloc_unlock>:
 800bcf8:	4801      	ldr	r0, [pc, #4]	; (800bd00 <__malloc_unlock+0x8>)
 800bcfa:	f7ff b9d3 	b.w	800b0a4 <__retarget_lock_release_recursive>
 800bcfe:	bf00      	nop
 800bd00:	24000d2c 	.word	0x24000d2c

0800bd04 <_realloc_r>:
 800bd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd08:	4680      	mov	r8, r0
 800bd0a:	4614      	mov	r4, r2
 800bd0c:	460e      	mov	r6, r1
 800bd0e:	b921      	cbnz	r1, 800bd1a <_realloc_r+0x16>
 800bd10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd14:	4611      	mov	r1, r2
 800bd16:	f7ff baed 	b.w	800b2f4 <_malloc_r>
 800bd1a:	b92a      	cbnz	r2, 800bd28 <_realloc_r+0x24>
 800bd1c:	f7ff fa7e 	bl	800b21c <_free_r>
 800bd20:	4625      	mov	r5, r4
 800bd22:	4628      	mov	r0, r5
 800bd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd28:	f000 f9cc 	bl	800c0c4 <_malloc_usable_size_r>
 800bd2c:	4284      	cmp	r4, r0
 800bd2e:	4607      	mov	r7, r0
 800bd30:	d802      	bhi.n	800bd38 <_realloc_r+0x34>
 800bd32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd36:	d812      	bhi.n	800bd5e <_realloc_r+0x5a>
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	f7ff fada 	bl	800b2f4 <_malloc_r>
 800bd40:	4605      	mov	r5, r0
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d0ed      	beq.n	800bd22 <_realloc_r+0x1e>
 800bd46:	42bc      	cmp	r4, r7
 800bd48:	4622      	mov	r2, r4
 800bd4a:	4631      	mov	r1, r6
 800bd4c:	bf28      	it	cs
 800bd4e:	463a      	movcs	r2, r7
 800bd50:	f7ff fa1e 	bl	800b190 <memcpy>
 800bd54:	4631      	mov	r1, r6
 800bd56:	4640      	mov	r0, r8
 800bd58:	f7ff fa60 	bl	800b21c <_free_r>
 800bd5c:	e7e1      	b.n	800bd22 <_realloc_r+0x1e>
 800bd5e:	4635      	mov	r5, r6
 800bd60:	e7df      	b.n	800bd22 <_realloc_r+0x1e>

0800bd62 <__ssputs_r>:
 800bd62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd66:	688e      	ldr	r6, [r1, #8]
 800bd68:	429e      	cmp	r6, r3
 800bd6a:	4682      	mov	sl, r0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	4690      	mov	r8, r2
 800bd70:	461f      	mov	r7, r3
 800bd72:	d838      	bhi.n	800bde6 <__ssputs_r+0x84>
 800bd74:	898a      	ldrh	r2, [r1, #12]
 800bd76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd7a:	d032      	beq.n	800bde2 <__ssputs_r+0x80>
 800bd7c:	6825      	ldr	r5, [r4, #0]
 800bd7e:	6909      	ldr	r1, [r1, #16]
 800bd80:	eba5 0901 	sub.w	r9, r5, r1
 800bd84:	6965      	ldr	r5, [r4, #20]
 800bd86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd8e:	3301      	adds	r3, #1
 800bd90:	444b      	add	r3, r9
 800bd92:	106d      	asrs	r5, r5, #1
 800bd94:	429d      	cmp	r5, r3
 800bd96:	bf38      	it	cc
 800bd98:	461d      	movcc	r5, r3
 800bd9a:	0553      	lsls	r3, r2, #21
 800bd9c:	d531      	bpl.n	800be02 <__ssputs_r+0xa0>
 800bd9e:	4629      	mov	r1, r5
 800bda0:	f7ff faa8 	bl	800b2f4 <_malloc_r>
 800bda4:	4606      	mov	r6, r0
 800bda6:	b950      	cbnz	r0, 800bdbe <__ssputs_r+0x5c>
 800bda8:	230c      	movs	r3, #12
 800bdaa:	f8ca 3000 	str.w	r3, [sl]
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdbe:	6921      	ldr	r1, [r4, #16]
 800bdc0:	464a      	mov	r2, r9
 800bdc2:	f7ff f9e5 	bl	800b190 <memcpy>
 800bdc6:	89a3      	ldrh	r3, [r4, #12]
 800bdc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bdcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdd0:	81a3      	strh	r3, [r4, #12]
 800bdd2:	6126      	str	r6, [r4, #16]
 800bdd4:	6165      	str	r5, [r4, #20]
 800bdd6:	444e      	add	r6, r9
 800bdd8:	eba5 0509 	sub.w	r5, r5, r9
 800bddc:	6026      	str	r6, [r4, #0]
 800bdde:	60a5      	str	r5, [r4, #8]
 800bde0:	463e      	mov	r6, r7
 800bde2:	42be      	cmp	r6, r7
 800bde4:	d900      	bls.n	800bde8 <__ssputs_r+0x86>
 800bde6:	463e      	mov	r6, r7
 800bde8:	6820      	ldr	r0, [r4, #0]
 800bdea:	4632      	mov	r2, r6
 800bdec:	4641      	mov	r1, r8
 800bdee:	f7ff f9dd 	bl	800b1ac <memmove>
 800bdf2:	68a3      	ldr	r3, [r4, #8]
 800bdf4:	1b9b      	subs	r3, r3, r6
 800bdf6:	60a3      	str	r3, [r4, #8]
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	4433      	add	r3, r6
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	2000      	movs	r0, #0
 800be00:	e7db      	b.n	800bdba <__ssputs_r+0x58>
 800be02:	462a      	mov	r2, r5
 800be04:	f7ff ff7e 	bl	800bd04 <_realloc_r>
 800be08:	4606      	mov	r6, r0
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d1e1      	bne.n	800bdd2 <__ssputs_r+0x70>
 800be0e:	6921      	ldr	r1, [r4, #16]
 800be10:	4650      	mov	r0, sl
 800be12:	f7ff fa03 	bl	800b21c <_free_r>
 800be16:	e7c7      	b.n	800bda8 <__ssputs_r+0x46>

0800be18 <_svfiprintf_r>:
 800be18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be1c:	4698      	mov	r8, r3
 800be1e:	898b      	ldrh	r3, [r1, #12]
 800be20:	061b      	lsls	r3, r3, #24
 800be22:	b09d      	sub	sp, #116	; 0x74
 800be24:	4607      	mov	r7, r0
 800be26:	460d      	mov	r5, r1
 800be28:	4614      	mov	r4, r2
 800be2a:	d50e      	bpl.n	800be4a <_svfiprintf_r+0x32>
 800be2c:	690b      	ldr	r3, [r1, #16]
 800be2e:	b963      	cbnz	r3, 800be4a <_svfiprintf_r+0x32>
 800be30:	2140      	movs	r1, #64	; 0x40
 800be32:	f7ff fa5f 	bl	800b2f4 <_malloc_r>
 800be36:	6028      	str	r0, [r5, #0]
 800be38:	6128      	str	r0, [r5, #16]
 800be3a:	b920      	cbnz	r0, 800be46 <_svfiprintf_r+0x2e>
 800be3c:	230c      	movs	r3, #12
 800be3e:	603b      	str	r3, [r7, #0]
 800be40:	f04f 30ff 	mov.w	r0, #4294967295
 800be44:	e0d1      	b.n	800bfea <_svfiprintf_r+0x1d2>
 800be46:	2340      	movs	r3, #64	; 0x40
 800be48:	616b      	str	r3, [r5, #20]
 800be4a:	2300      	movs	r3, #0
 800be4c:	9309      	str	r3, [sp, #36]	; 0x24
 800be4e:	2320      	movs	r3, #32
 800be50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be54:	f8cd 800c 	str.w	r8, [sp, #12]
 800be58:	2330      	movs	r3, #48	; 0x30
 800be5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c004 <_svfiprintf_r+0x1ec>
 800be5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be62:	f04f 0901 	mov.w	r9, #1
 800be66:	4623      	mov	r3, r4
 800be68:	469a      	mov	sl, r3
 800be6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be6e:	b10a      	cbz	r2, 800be74 <_svfiprintf_r+0x5c>
 800be70:	2a25      	cmp	r2, #37	; 0x25
 800be72:	d1f9      	bne.n	800be68 <_svfiprintf_r+0x50>
 800be74:	ebba 0b04 	subs.w	fp, sl, r4
 800be78:	d00b      	beq.n	800be92 <_svfiprintf_r+0x7a>
 800be7a:	465b      	mov	r3, fp
 800be7c:	4622      	mov	r2, r4
 800be7e:	4629      	mov	r1, r5
 800be80:	4638      	mov	r0, r7
 800be82:	f7ff ff6e 	bl	800bd62 <__ssputs_r>
 800be86:	3001      	adds	r0, #1
 800be88:	f000 80aa 	beq.w	800bfe0 <_svfiprintf_r+0x1c8>
 800be8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be8e:	445a      	add	r2, fp
 800be90:	9209      	str	r2, [sp, #36]	; 0x24
 800be92:	f89a 3000 	ldrb.w	r3, [sl]
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 80a2 	beq.w	800bfe0 <_svfiprintf_r+0x1c8>
 800be9c:	2300      	movs	r3, #0
 800be9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bea6:	f10a 0a01 	add.w	sl, sl, #1
 800beaa:	9304      	str	r3, [sp, #16]
 800beac:	9307      	str	r3, [sp, #28]
 800beae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beb2:	931a      	str	r3, [sp, #104]	; 0x68
 800beb4:	4654      	mov	r4, sl
 800beb6:	2205      	movs	r2, #5
 800beb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bebc:	4851      	ldr	r0, [pc, #324]	; (800c004 <_svfiprintf_r+0x1ec>)
 800bebe:	f7f4 fa0f 	bl	80002e0 <memchr>
 800bec2:	9a04      	ldr	r2, [sp, #16]
 800bec4:	b9d8      	cbnz	r0, 800befe <_svfiprintf_r+0xe6>
 800bec6:	06d0      	lsls	r0, r2, #27
 800bec8:	bf44      	itt	mi
 800beca:	2320      	movmi	r3, #32
 800becc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bed0:	0711      	lsls	r1, r2, #28
 800bed2:	bf44      	itt	mi
 800bed4:	232b      	movmi	r3, #43	; 0x2b
 800bed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beda:	f89a 3000 	ldrb.w	r3, [sl]
 800bede:	2b2a      	cmp	r3, #42	; 0x2a
 800bee0:	d015      	beq.n	800bf0e <_svfiprintf_r+0xf6>
 800bee2:	9a07      	ldr	r2, [sp, #28]
 800bee4:	4654      	mov	r4, sl
 800bee6:	2000      	movs	r0, #0
 800bee8:	f04f 0c0a 	mov.w	ip, #10
 800beec:	4621      	mov	r1, r4
 800beee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bef2:	3b30      	subs	r3, #48	; 0x30
 800bef4:	2b09      	cmp	r3, #9
 800bef6:	d94e      	bls.n	800bf96 <_svfiprintf_r+0x17e>
 800bef8:	b1b0      	cbz	r0, 800bf28 <_svfiprintf_r+0x110>
 800befa:	9207      	str	r2, [sp, #28]
 800befc:	e014      	b.n	800bf28 <_svfiprintf_r+0x110>
 800befe:	eba0 0308 	sub.w	r3, r0, r8
 800bf02:	fa09 f303 	lsl.w	r3, r9, r3
 800bf06:	4313      	orrs	r3, r2
 800bf08:	9304      	str	r3, [sp, #16]
 800bf0a:	46a2      	mov	sl, r4
 800bf0c:	e7d2      	b.n	800beb4 <_svfiprintf_r+0x9c>
 800bf0e:	9b03      	ldr	r3, [sp, #12]
 800bf10:	1d19      	adds	r1, r3, #4
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	9103      	str	r1, [sp, #12]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	bfbb      	ittet	lt
 800bf1a:	425b      	neglt	r3, r3
 800bf1c:	f042 0202 	orrlt.w	r2, r2, #2
 800bf20:	9307      	strge	r3, [sp, #28]
 800bf22:	9307      	strlt	r3, [sp, #28]
 800bf24:	bfb8      	it	lt
 800bf26:	9204      	strlt	r2, [sp, #16]
 800bf28:	7823      	ldrb	r3, [r4, #0]
 800bf2a:	2b2e      	cmp	r3, #46	; 0x2e
 800bf2c:	d10c      	bne.n	800bf48 <_svfiprintf_r+0x130>
 800bf2e:	7863      	ldrb	r3, [r4, #1]
 800bf30:	2b2a      	cmp	r3, #42	; 0x2a
 800bf32:	d135      	bne.n	800bfa0 <_svfiprintf_r+0x188>
 800bf34:	9b03      	ldr	r3, [sp, #12]
 800bf36:	1d1a      	adds	r2, r3, #4
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	9203      	str	r2, [sp, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	bfb8      	it	lt
 800bf40:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf44:	3402      	adds	r4, #2
 800bf46:	9305      	str	r3, [sp, #20]
 800bf48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c014 <_svfiprintf_r+0x1fc>
 800bf4c:	7821      	ldrb	r1, [r4, #0]
 800bf4e:	2203      	movs	r2, #3
 800bf50:	4650      	mov	r0, sl
 800bf52:	f7f4 f9c5 	bl	80002e0 <memchr>
 800bf56:	b140      	cbz	r0, 800bf6a <_svfiprintf_r+0x152>
 800bf58:	2340      	movs	r3, #64	; 0x40
 800bf5a:	eba0 000a 	sub.w	r0, r0, sl
 800bf5e:	fa03 f000 	lsl.w	r0, r3, r0
 800bf62:	9b04      	ldr	r3, [sp, #16]
 800bf64:	4303      	orrs	r3, r0
 800bf66:	3401      	adds	r4, #1
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf6e:	4826      	ldr	r0, [pc, #152]	; (800c008 <_svfiprintf_r+0x1f0>)
 800bf70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf74:	2206      	movs	r2, #6
 800bf76:	f7f4 f9b3 	bl	80002e0 <memchr>
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d038      	beq.n	800bff0 <_svfiprintf_r+0x1d8>
 800bf7e:	4b23      	ldr	r3, [pc, #140]	; (800c00c <_svfiprintf_r+0x1f4>)
 800bf80:	bb1b      	cbnz	r3, 800bfca <_svfiprintf_r+0x1b2>
 800bf82:	9b03      	ldr	r3, [sp, #12]
 800bf84:	3307      	adds	r3, #7
 800bf86:	f023 0307 	bic.w	r3, r3, #7
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	9303      	str	r3, [sp, #12]
 800bf8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf90:	4433      	add	r3, r6
 800bf92:	9309      	str	r3, [sp, #36]	; 0x24
 800bf94:	e767      	b.n	800be66 <_svfiprintf_r+0x4e>
 800bf96:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf9a:	460c      	mov	r4, r1
 800bf9c:	2001      	movs	r0, #1
 800bf9e:	e7a5      	b.n	800beec <_svfiprintf_r+0xd4>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	3401      	adds	r4, #1
 800bfa4:	9305      	str	r3, [sp, #20]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	f04f 0c0a 	mov.w	ip, #10
 800bfac:	4620      	mov	r0, r4
 800bfae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfb2:	3a30      	subs	r2, #48	; 0x30
 800bfb4:	2a09      	cmp	r2, #9
 800bfb6:	d903      	bls.n	800bfc0 <_svfiprintf_r+0x1a8>
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d0c5      	beq.n	800bf48 <_svfiprintf_r+0x130>
 800bfbc:	9105      	str	r1, [sp, #20]
 800bfbe:	e7c3      	b.n	800bf48 <_svfiprintf_r+0x130>
 800bfc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e7f0      	b.n	800bfac <_svfiprintf_r+0x194>
 800bfca:	ab03      	add	r3, sp, #12
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	462a      	mov	r2, r5
 800bfd0:	4b0f      	ldr	r3, [pc, #60]	; (800c010 <_svfiprintf_r+0x1f8>)
 800bfd2:	a904      	add	r1, sp, #16
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	f3af 8000 	nop.w
 800bfda:	1c42      	adds	r2, r0, #1
 800bfdc:	4606      	mov	r6, r0
 800bfde:	d1d6      	bne.n	800bf8e <_svfiprintf_r+0x176>
 800bfe0:	89ab      	ldrh	r3, [r5, #12]
 800bfe2:	065b      	lsls	r3, r3, #25
 800bfe4:	f53f af2c 	bmi.w	800be40 <_svfiprintf_r+0x28>
 800bfe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfea:	b01d      	add	sp, #116	; 0x74
 800bfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff0:	ab03      	add	r3, sp, #12
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	462a      	mov	r2, r5
 800bff6:	4b06      	ldr	r3, [pc, #24]	; (800c010 <_svfiprintf_r+0x1f8>)
 800bff8:	a904      	add	r1, sp, #16
 800bffa:	4638      	mov	r0, r7
 800bffc:	f7ff fbb6 	bl	800b76c <_printf_i>
 800c000:	e7eb      	b.n	800bfda <_svfiprintf_r+0x1c2>
 800c002:	bf00      	nop
 800c004:	0801a350 	.word	0x0801a350
 800c008:	0801a35a 	.word	0x0801a35a
 800c00c:	00000000 	.word	0x00000000
 800c010:	0800bd63 	.word	0x0800bd63
 800c014:	0801a356 	.word	0x0801a356

0800c018 <_read_r>:
 800c018:	b538      	push	{r3, r4, r5, lr}
 800c01a:	4d07      	ldr	r5, [pc, #28]	; (800c038 <_read_r+0x20>)
 800c01c:	4604      	mov	r4, r0
 800c01e:	4608      	mov	r0, r1
 800c020:	4611      	mov	r1, r2
 800c022:	2200      	movs	r2, #0
 800c024:	602a      	str	r2, [r5, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	f7f7 ffbe 	bl	8003fa8 <_read>
 800c02c:	1c43      	adds	r3, r0, #1
 800c02e:	d102      	bne.n	800c036 <_read_r+0x1e>
 800c030:	682b      	ldr	r3, [r5, #0]
 800c032:	b103      	cbz	r3, 800c036 <_read_r+0x1e>
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	bd38      	pop	{r3, r4, r5, pc}
 800c038:	24000d38 	.word	0x24000d38

0800c03c <_raise_r>:
 800c03c:	291f      	cmp	r1, #31
 800c03e:	b538      	push	{r3, r4, r5, lr}
 800c040:	4604      	mov	r4, r0
 800c042:	460d      	mov	r5, r1
 800c044:	d904      	bls.n	800c050 <_raise_r+0x14>
 800c046:	2316      	movs	r3, #22
 800c048:	6003      	str	r3, [r0, #0]
 800c04a:	f04f 30ff 	mov.w	r0, #4294967295
 800c04e:	bd38      	pop	{r3, r4, r5, pc}
 800c050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c052:	b112      	cbz	r2, 800c05a <_raise_r+0x1e>
 800c054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c058:	b94b      	cbnz	r3, 800c06e <_raise_r+0x32>
 800c05a:	4620      	mov	r0, r4
 800c05c:	f000 f830 	bl	800c0c0 <_getpid_r>
 800c060:	462a      	mov	r2, r5
 800c062:	4601      	mov	r1, r0
 800c064:	4620      	mov	r0, r4
 800c066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c06a:	f000 b817 	b.w	800c09c <_kill_r>
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d00a      	beq.n	800c088 <_raise_r+0x4c>
 800c072:	1c59      	adds	r1, r3, #1
 800c074:	d103      	bne.n	800c07e <_raise_r+0x42>
 800c076:	2316      	movs	r3, #22
 800c078:	6003      	str	r3, [r0, #0]
 800c07a:	2001      	movs	r0, #1
 800c07c:	e7e7      	b.n	800c04e <_raise_r+0x12>
 800c07e:	2400      	movs	r4, #0
 800c080:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c084:	4628      	mov	r0, r5
 800c086:	4798      	blx	r3
 800c088:	2000      	movs	r0, #0
 800c08a:	e7e0      	b.n	800c04e <_raise_r+0x12>

0800c08c <raise>:
 800c08c:	4b02      	ldr	r3, [pc, #8]	; (800c098 <raise+0xc>)
 800c08e:	4601      	mov	r1, r0
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	f7ff bfd3 	b.w	800c03c <_raise_r>
 800c096:	bf00      	nop
 800c098:	240004fc 	.word	0x240004fc

0800c09c <_kill_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d07      	ldr	r5, [pc, #28]	; (800c0bc <_kill_r+0x20>)
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	f7f7 ff63 	bl	8003f74 <_kill>
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	d102      	bne.n	800c0b8 <_kill_r+0x1c>
 800c0b2:	682b      	ldr	r3, [r5, #0]
 800c0b4:	b103      	cbz	r3, 800c0b8 <_kill_r+0x1c>
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ba:	bf00      	nop
 800c0bc:	24000d38 	.word	0x24000d38

0800c0c0 <_getpid_r>:
 800c0c0:	f7f7 bf50 	b.w	8003f64 <_getpid>

0800c0c4 <_malloc_usable_size_r>:
 800c0c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0c8:	1f18      	subs	r0, r3, #4
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	bfbc      	itt	lt
 800c0ce:	580b      	ldrlt	r3, [r1, r0]
 800c0d0:	18c0      	addlt	r0, r0, r3
 800c0d2:	4770      	bx	lr

0800c0d4 <_init>:
 800c0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d6:	bf00      	nop
 800c0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0da:	bc08      	pop	{r3}
 800c0dc:	469e      	mov	lr, r3
 800c0de:	4770      	bx	lr

0800c0e0 <_fini>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	bf00      	nop
 800c0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0e6:	bc08      	pop	{r3}
 800c0e8:	469e      	mov	lr, r3
 800c0ea:	4770      	bx	lr
