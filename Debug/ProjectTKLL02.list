
ProjectTKLL02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2a4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ea44  0800b548  0800b548  0001b548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019f8c  08019f8c  00029f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019f94  08019f94  00029f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019f98  08019f98  00029f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000560  24000000  08019f9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000560  0801a4fc  00030560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240005c0  0801a55c  000305c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  24000620  0801a5bc  00030620  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ce8  0801a5bc  00030ce8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030620  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c3f  00000000  00000000  0003064e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b63  00000000  00000000  0005528d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001868  00000000  00000000  00057df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e8  00000000  00000000  00059658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038828  00000000  00000000  0005ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020352  00000000  00000000  00093668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00164360  00000000  00000000  000b39ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00217d1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a84  00000000  00000000  00217d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000620 	.word	0x24000620
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b52c 	.word	0x0800b52c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000624 	.word	0x24000624
 80002dc:	0800b52c 	.word	0x0800b52c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <stbiw__sbgrowf>:
#define stbiw__sbpush(a, v)      (stbiw__sbmaybegrow(a,1), (a)[stbiw__sbn(a)++] = (v))
#define stbiw__sbcount(a)        ((a) ? stbiw__sbn(a) : 0)
#define stbiw__sbfree(a)         ((a) ? STBIW_FREE(stbiw__sbraw(a)),0 : 0)

static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
   int m = *arr ? 2*stbiw__sbm(*arr)+increment : increment+1;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d007      	beq.n	80006a8 <stbiw__sbgrowf+0x24>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b08      	subs	r3, #8
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	005a      	lsls	r2, r3, #1
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4413      	add	r3, r2
 80006a6:	e001      	b.n	80006ac <stbiw__sbgrowf+0x28>
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3301      	adds	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
   void *p = STBIW_REALLOC_SIZED(*arr ? stbiw__sbraw(*arr) : 0, *arr ? (stbiw__sbm(*arr)*itemsize + sizeof(int)*2) : 0, itemsize * m + sizeof(int)*2);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d003      	beq.n	80006be <stbiw__sbgrowf+0x3a>
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3b08      	subs	r3, #8
 80006bc:	e000      	b.n	80006c0 <stbiw__sbgrowf+0x3c>
 80006be:	2300      	movs	r3, #0
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	6979      	ldr	r1, [r7, #20]
 80006c4:	fb01 f202 	mul.w	r2, r1, r2
 80006c8:	3208      	adds	r2, #8
 80006ca:	4611      	mov	r1, r2
 80006cc:	4618      	mov	r0, r3
 80006ce:	f00a fb9f 	bl	800ae10 <realloc>
 80006d2:	6138      	str	r0, [r7, #16]
   STBIW_ASSERT(p);
 80006d4:	693b      	ldr	r3, [r7, #16]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d106      	bne.n	80006e8 <stbiw__sbgrowf+0x64>
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <stbiw__sbgrowf+0x9c>)
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <stbiw__sbgrowf+0xa0>)
 80006de:	f240 313e 	movw	r1, #830	; 0x33e
 80006e2:	4811      	ldr	r0, [pc, #68]	; (8000728 <stbiw__sbgrowf+0xa4>)
 80006e4:	f009 fc6c 	bl	8009fc0 <__assert_func>
   if (p) {
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d011      	beq.n	8000712 <stbiw__sbgrowf+0x8e>
      if (!*arr) ((int *) p)[1] = 0;
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d103      	bne.n	80006fe <stbiw__sbgrowf+0x7a>
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	3304      	adds	r3, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
      *arr = (void *) ((int *) p + 2);
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	f103 0208 	add.w	r2, r3, #8
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	601a      	str	r2, [r3, #0]
      stbiw__sbm(*arr) = m;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3b08      	subs	r3, #8
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	601a      	str	r2, [r3, #0]
   }
   return *arr;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
}
 8000716:	4618      	mov	r0, r3
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	0800be44 	.word	0x0800be44
 8000724:	0801858c 	.word	0x0801858c
 8000728:	0800bd2c 	.word	0x0800bd2c

0800072c <stbiw__zlib_flushf>:

static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
   while (*bitcount >= 8) {
 8000738:	e02a      	b.n	8000790 <stbiw__zlib_flushf+0x64>
      stbiw__sbpush(data, STBIW_UCHAR(*bitbuffer));
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d008      	beq.n	8000752 <stbiw__zlib_flushf+0x26>
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3b04      	subs	r3, #4
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3b08      	subs	r3, #8
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	429a      	cmp	r2, r3
 8000750:	db07      	blt.n	8000762 <stbiw__zlib_flushf+0x36>
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	2201      	movs	r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff92 	bl	8000684 <stbiw__sbgrowf>
 8000760:	bf00      	nop
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	681c      	ldr	r4, [r3, #0]
 8000766:	68f9      	ldr	r1, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	3b04      	subs	r3, #4
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	1c50      	adds	r0, r2, #1
 8000770:	6018      	str	r0, [r3, #0]
 8000772:	4613      	mov	r3, r2
 8000774:	440b      	add	r3, r1
 8000776:	b2e2      	uxtb	r2, r4
 8000778:	701a      	strb	r2, [r3, #0]
      *bitbuffer >>= 8;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	0a1a      	lsrs	r2, r3, #8
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	601a      	str	r2, [r3, #0]
      *bitcount -= 8;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f1a3 0208 	sub.w	r2, r3, #8
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	601a      	str	r2, [r3, #0]
   while (*bitcount >= 8) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b07      	cmp	r3, #7
 8000796:	dcd0      	bgt.n	800073a <stbiw__zlib_flushf+0xe>
   }
   return data;
 8000798:	68fb      	ldr	r3, [r7, #12]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd90      	pop	{r4, r7, pc}

080007a2 <stbiw__zlib_bitrev>:

static int stbiw__zlib_bitrev(int code, int codebits)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b085      	sub	sp, #20
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
   int res=0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
   while (codebits--) {
 80007b0:	e009      	b.n	80007c6 <stbiw__zlib_bitrev+0x24>
      res = (res << 1) | (code & 1);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	005a      	lsls	r2, r3, #1
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	4313      	orrs	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
      code >>= 1;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	105b      	asrs	r3, r3, #1
 80007c4:	607b      	str	r3, [r7, #4]
   while (codebits--) {
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	603a      	str	r2, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f0      	bne.n	80007b2 <stbiw__zlib_bitrev+0x10>
   }
   return res;
 80007d0:	68fb      	ldr	r3, [r7, #12]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <stbiw__zlib_countm>:

static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)
{
 80007de:	b480      	push	{r7}
 80007e0:	b087      	sub	sp, #28
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
   int i;
   for (i=0; i < limit && i < 258; ++i)
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e00c      	b.n	800080a <stbiw__zlib_countm+0x2c>
      if (a[i] != b[i]) break;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	4413      	add	r3, r2
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	68b9      	ldr	r1, [r7, #8]
 80007fc:	440b      	add	r3, r1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d10b      	bne.n	800081c <stbiw__zlib_countm+0x3e>
   for (i=0; i < limit && i < 258; ++i)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	429a      	cmp	r2, r3
 8000810:	da05      	bge.n	800081e <stbiw__zlib_countm+0x40>
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000818:	dbea      	blt.n	80007f0 <stbiw__zlib_countm+0x12>
 800081a:	e000      	b.n	800081e <stbiw__zlib_countm+0x40>
      if (a[i] != b[i]) break;
 800081c:	bf00      	nop
   return i;
 800081e:	697b      	ldr	r3, [r7, #20]
}
 8000820:	4618      	mov	r0, r3
 8000822:	371c      	adds	r7, #28
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <stbiw__zhash>:

static unsigned int stbiw__zhash(unsigned char *data)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
   stbiw_uint32 hash = data[0] + (data[1] << 8) + (data[2] << 16);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	441a      	add	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3302      	adds	r3, #2
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	041b      	lsls	r3, r3, #16
 800084c:	4413      	add	r3, r2
 800084e:	60fb      	str	r3, [r7, #12]
   hash ^= hash << 3;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	4053      	eors	r3, r2
 8000858:	60fb      	str	r3, [r7, #12]
   hash += hash >> 5;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	095b      	lsrs	r3, r3, #5
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	4413      	add	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]
   hash ^= hash << 4;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	011b      	lsls	r3, r3, #4
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	4053      	eors	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]
   hash += hash >> 17;
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	0c5b      	lsrs	r3, r3, #17
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
   hash ^= hash << 25;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	065b      	lsls	r3, r3, #25
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	4053      	eors	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
   hash += hash >> 6;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	099b      	lsrs	r3, r3, #6
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	4413      	add	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
   return hash;
 800088c:	68fb      	ldr	r3, [r7, #12]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <stbi_zlib_compress>:
#define stbiw__ZHASH   16384

#endif // STBIW_ZLIB_COMPRESS

STBIWDEF unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b097      	sub	sp, #92	; 0x5c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	603b      	str	r3, [r7, #0]
#else // use builtin
   static unsigned short lengthc[] = { 3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258, 259 };
   static unsigned char  lengtheb[]= { 0,0,0,0,0,0,0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4,  4,  5,  5,  5,  5,  0 };
   static unsigned short distc[]   = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577, 32768 };
   static unsigned char  disteb[]  = { 0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13 };
   unsigned int bitbuf=0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
   int i,j, bitcount=0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
   unsigned char *out = NULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
   unsigned char ***hash_table = (unsigned char***) STBIW_MALLOC(stbiw__ZHASH * sizeof(unsigned char**));
 80008b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80008ba:	f009 fe85 	bl	800a5c8 <malloc>
 80008be:	4603      	mov	r3, r0
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
   if (hash_table == NULL)
 80008c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d102      	bne.n	80008ce <stbi_zlib_compress+0x32>
      return NULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f000 bd62 	b.w	8001392 <stbi_zlib_compress+0xaf6>
   if (quality < 5) quality = 5;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	dc01      	bgt.n	80008d8 <stbi_zlib_compress+0x3c>
 80008d4:	2305      	movs	r3, #5
 80008d6:	603b      	str	r3, [r7, #0]

   stbiw__sbpush(out, 0x78);   // DEFLATE 32K window
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d008      	beq.n	80008f0 <stbi_zlib_compress+0x54>
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	3b04      	subs	r3, #4
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	3b08      	subs	r3, #8
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	db07      	blt.n	8000900 <stbi_zlib_compress+0x64>
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	2201      	movs	r2, #1
 80008f6:	2101      	movs	r1, #1
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fec3 	bl	8000684 <stbiw__sbgrowf>
 80008fe:	bf00      	nop
 8000900:	6939      	ldr	r1, [r7, #16]
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	3b04      	subs	r3, #4
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	1c50      	adds	r0, r2, #1
 800090a:	6018      	str	r0, [r3, #0]
 800090c:	4613      	mov	r3, r2
 800090e:	440b      	add	r3, r1
 8000910:	2278      	movs	r2, #120	; 0x78
 8000912:	701a      	strb	r2, [r3, #0]
   stbiw__sbpush(out, 0x5e);   // FLEVEL = 1
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d008      	beq.n	800092c <stbi_zlib_compress+0x90>
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	3b04      	subs	r3, #4
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	1c5a      	adds	r2, r3, #1
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	3b08      	subs	r3, #8
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	db07      	blt.n	800093c <stbi_zlib_compress+0xa0>
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2201      	movs	r2, #1
 8000932:	2101      	movs	r1, #1
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fea5 	bl	8000684 <stbiw__sbgrowf>
 800093a:	bf00      	nop
 800093c:	6939      	ldr	r1, [r7, #16]
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	3b04      	subs	r3, #4
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	1c50      	adds	r0, r2, #1
 8000946:	6018      	str	r0, [r3, #0]
 8000948:	4613      	mov	r3, r2
 800094a:	440b      	add	r3, r1
 800094c:	225e      	movs	r2, #94	; 0x5e
 800094e:	701a      	strb	r2, [r3, #0]
   stbiw__zlib_add(1,1);  // BFINAL = 1
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	2201      	movs	r2, #1
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	461a      	mov	r2, r3
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	4313      	orrs	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	3301      	adds	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	f107 0214 	add.w	r2, r7, #20
 800096c:	f107 0118 	add.w	r1, r7, #24
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fedb 	bl	800072c <stbiw__zlib_flushf>
 8000976:	4603      	mov	r3, r0
 8000978:	613b      	str	r3, [r7, #16]
   stbiw__zlib_add(1,2);  // BTYPE = 1 -- fixed huffman
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	2201      	movs	r2, #1
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	461a      	mov	r2, r3
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3302      	adds	r3, #2
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	f107 0214 	add.w	r2, r7, #20
 8000996:	f107 0118 	add.w	r1, r7, #24
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fec6 	bl	800072c <stbiw__zlib_flushf>
 80009a0:	4603      	mov	r3, r0
 80009a2:	613b      	str	r3, [r7, #16]

   for (i=0; i < stbiw__ZHASH; ++i)
 80009a4:	2300      	movs	r3, #0
 80009a6:	657b      	str	r3, [r7, #84]	; 0x54
 80009a8:	e008      	b.n	80009bc <stbi_zlib_compress+0x120>
      hash_table[i] = NULL;
 80009aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009b0:	4413      	add	r3, r2
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
   for (i=0; i < stbiw__ZHASH; ++i)
 80009b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009b8:	3301      	adds	r3, #1
 80009ba:	657b      	str	r3, [r7, #84]	; 0x54
 80009bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80009c2:	dbf2      	blt.n	80009aa <stbi_zlib_compress+0x10e>

   i=0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	657b      	str	r3, [r7, #84]	; 0x54
   while (i < data_len-3) {
 80009c8:	e26e      	b.n	8000ea8 <stbi_zlib_compress+0x60c>
      // hash next 3 bytes of data to be compressed
      int h = stbiw__zhash(data+i)&(stbiw__ZHASH-1), best=3;
 80009ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	4413      	add	r3, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff2b 	bl	800082c <stbiw__zhash>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80009dc:	633b      	str	r3, [r7, #48]	; 0x30
 80009de:	2303      	movs	r3, #3
 80009e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      unsigned char *bestloc = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	64bb      	str	r3, [r7, #72]	; 0x48
      unsigned char **hlist = hash_table[h];
 80009e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009ec:	4413      	add	r3, r2
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      int n = stbiw__sbcount(hlist);
 80009f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d003      	beq.n	8000a00 <stbi_zlib_compress+0x164>
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80009fe:	e000      	b.n	8000a02 <stbi_zlib_compress+0x166>
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
      for (j=0; j < n; ++j) {
 8000a04:	2300      	movs	r3, #0
 8000a06:	653b      	str	r3, [r7, #80]	; 0x50
 8000a08:	e02a      	b.n	8000a60 <stbi_zlib_compress+0x1c4>
         if (hlist[j]-data > i-32768) { // if entry lies within window
 8000a0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a0c:	4ba3      	ldr	r3, [pc, #652]	; (8000c9c <stbi_zlib_compress+0x400>)
 8000a0e:	4413      	add	r3, r2
 8000a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a16:	440a      	add	r2, r1
 8000a18:	6811      	ldr	r1, [r2, #0]
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	1a8a      	subs	r2, r1, r2
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	dc1b      	bgt.n	8000a5a <stbi_zlib_compress+0x1be>
            int d = stbiw__zlib_countm(hlist[j], data+i, data_len-i);
 8000a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a28:	4413      	add	r3, r2
 8000a2a:	6818      	ldr	r0, [r3, #0]
 8000a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	18d1      	adds	r1, r2, r3
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a36:	1ad3      	subs	r3, r2, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	f7ff fed0 	bl	80007de <stbiw__zlib_countm>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	61fb      	str	r3, [r7, #28]
            if (d >= best) { best=d; bestloc=hlist[j]; }
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000a46:	429a      	cmp	r2, r3
 8000a48:	db07      	blt.n	8000a5a <stbi_zlib_compress+0x1be>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a54:	4413      	add	r3, r2
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	64bb      	str	r3, [r7, #72]	; 0x48
      for (j=0; j < n; ++j) {
 8000a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8000a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbd0      	blt.n	8000a0a <stbi_zlib_compress+0x16e>
         }
      }
      // when hash table entry is too long, delete half the entries
      if (hash_table[h] && stbiw__sbn(hash_table[h]) == 2*quality) {
 8000a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a6e:	4413      	add	r3, r2
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d024      	beq.n	8000ac0 <stbi_zlib_compress+0x224>
 8000a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a7c:	4413      	add	r3, r2
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3b04      	subs	r3, #4
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d119      	bne.n	8000ac0 <stbi_zlib_compress+0x224>
         STBIW_MEMMOVE(hash_table[h], hash_table[h]+quality, sizeof(hash_table[h][0])*quality);
 8000a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a92:	4413      	add	r3, r2
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a98:	009b      	lsls	r3, r3, #2
 8000a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a9c:	4413      	add	r3, r2
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	18d1      	adds	r1, r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f009 fdaa 	bl	800a604 <memmove>
         stbiw__sbn(hash_table[h]) = quality;
 8000ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ab6:	4413      	add	r3, r2
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	3b04      	subs	r3, #4
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	601a      	str	r2, [r3, #0]
      }
      stbiw__sbpush(hash_table[h],data+i);
 8000ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ac6:	4413      	add	r3, r2
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d010      	beq.n	8000af0 <stbi_zlib_compress+0x254>
 8000ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ad4:	4413      	add	r3, r2
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3b04      	subs	r3, #4
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000ae4:	440b      	add	r3, r1
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	3b08      	subs	r3, #8
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	db09      	blt.n	8000b04 <stbi_zlib_compress+0x268>
 8000af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000af6:	4413      	add	r3, r2
 8000af8:	2204      	movs	r2, #4
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fdc1 	bl	8000684 <stbiw__sbgrowf>
 8000b02:	bf00      	nop
 8000b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b0c:	4413      	add	r3, r2
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b16:	4413      	add	r3, r2
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	1c54      	adds	r4, r2, #1
 8000b20:	601c      	str	r4, [r3, #0]
 8000b22:	4613      	mov	r3, r2
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	4403      	add	r3, r0
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	440a      	add	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]

      if (bestloc) {
 8000b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d048      	beq.n	8000bc6 <stbi_zlib_compress+0x32a>
         // "lazy matching" - check match at *next* byte, and if it's better, do cur byte as literal
         h = stbiw__zhash(data+i+1)&(stbiw__ZHASH-1);
 8000b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b36:	3301      	adds	r3, #1
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fe75 	bl	800082c <stbiw__zhash>
 8000b42:	4603      	mov	r3, r0
 8000b44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
         hlist = hash_table[h];
 8000b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b50:	4413      	add	r3, r2
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
         n = stbiw__sbcount(hlist);
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d003      	beq.n	8000b64 <stbi_zlib_compress+0x2c8>
 8000b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b5e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8000b62:	e000      	b.n	8000b66 <stbi_zlib_compress+0x2ca>
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
         for (j=0; j < n; ++j) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8000b6c:	e027      	b.n	8000bbe <stbi_zlib_compress+0x322>
            if (hlist[j]-data > i-32767) {
 8000b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000b70:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <stbi_zlib_compress+0x404>)
 8000b72:	4413      	add	r3, r2
 8000b74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b76:	0092      	lsls	r2, r2, #2
 8000b78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b7a:	440a      	add	r2, r1
 8000b7c:	6811      	ldr	r1, [r2, #0]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	1a8a      	subs	r2, r1, r2
 8000b82:	4293      	cmp	r3, r2
 8000b84:	dc18      	bgt.n	8000bb8 <stbi_zlib_compress+0x31c>
               int e = stbiw__zlib_countm(hlist[j], data+i+1, data_len-i-1);
 8000b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b8c:	4413      	add	r3, r2
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b92:	3301      	adds	r3, #1
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	18d1      	adds	r1, r2, r3
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	f7ff fe1c 	bl	80007de <stbiw__zlib_countm>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
               if (e > best) { // if next match is better, bail on current match
 8000baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dd02      	ble.n	8000bb8 <stbi_zlib_compress+0x31c>
                  bestloc = NULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
                  break;
 8000bb6:	e006      	b.n	8000bc6 <stbi_zlib_compress+0x32a>
         for (j=0; j < n; ++j) {
 8000bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bba:	3301      	adds	r3, #1
 8000bbc:	653b      	str	r3, [r7, #80]	; 0x50
 8000bbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	dbd3      	blt.n	8000b6e <stbi_zlib_compress+0x2d2>
               }
            }
         }
      }

      if (bestloc) {
 8000bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	f000 8126 	beq.w	8000e1a <stbi_zlib_compress+0x57e>
         int d = (int) (data+i - bestloc); // distance back
 8000bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	441a      	add	r2, r3
 8000bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	623b      	str	r3, [r7, #32]
         STBIW_ASSERT(d <= 32767 && best <= 258);
 8000bda:	6a3b      	ldr	r3, [r7, #32]
 8000bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000be0:	da03      	bge.n	8000bea <stbi_zlib_compress+0x34e>
 8000be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000be4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000be8:	dd06      	ble.n	8000bf8 <stbi_zlib_compress+0x35c>
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <stbi_zlib_compress+0x408>)
 8000bec:	4a2e      	ldr	r2, [pc, #184]	; (8000ca8 <stbi_zlib_compress+0x40c>)
 8000bee:	f240 31bf 	movw	r1, #959	; 0x3bf
 8000bf2:	482e      	ldr	r0, [pc, #184]	; (8000cac <stbi_zlib_compress+0x410>)
 8000bf4:	f009 f9e4 	bl	8009fc0 <__assert_func>
         for (j=0; best > lengthc[j+1]-1; ++j);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	653b      	str	r3, [r7, #80]	; 0x50
 8000bfc:	e002      	b.n	8000c04 <stbi_zlib_compress+0x368>
 8000bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c00:	3301      	adds	r3, #1
 8000c02:	653b      	str	r3, [r7, #80]	; 0x50
 8000c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <stbi_zlib_compress+0x414>)
 8000c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c12:	4293      	cmp	r3, r2
 8000c14:	daf3      	bge.n	8000bfe <stbi_zlib_compress+0x362>
         stbiw__zlib_huff(j+257);
 8000c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c18:	f113 0f71 	cmn.w	r3, #113	; 0x71
 8000c1c:	da1c      	bge.n	8000c58 <stbi_zlib_compress+0x3bc>
 8000c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c20:	f203 1331 	addw	r3, r3, #305	; 0x131
 8000c24:	2108      	movs	r1, #8
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fdbb 	bl	80007a2 <stbiw__zlib_bitrev>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3308      	adds	r3, #8
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	f107 0214 	add.w	r2, r7, #20
 8000c48:	f107 0118 	add.w	r1, r7, #24
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fd6d 	bl	800072c <stbiw__zlib_flushf>
 8000c52:	4603      	mov	r3, r0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	e067      	b.n	8000d28 <stbi_zlib_compress+0x48c>
 8000c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c5e:	da29      	bge.n	8000cb4 <stbi_zlib_compress+0x418>
 8000c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000c62:	f203 2301 	addw	r3, r3, #513	; 0x201
 8000c66:	2109      	movs	r1, #9
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fd9a 	bl	80007a2 <stbiw__zlib_bitrev>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3309      	adds	r3, #9
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	f107 0214 	add.w	r2, r7, #20
 8000c8a:	f107 0118 	add.w	r1, r7, #24
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fd4c 	bl	800072c <stbiw__zlib_flushf>
 8000c94:	4603      	mov	r3, r0
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	e046      	b.n	8000d28 <stbi_zlib_compress+0x48c>
 8000c9a:	bf00      	nop
 8000c9c:	ffff8001 	.word	0xffff8001
 8000ca0:	ffff8002 	.word	0xffff8002
 8000ca4:	0800be48 	.word	0x0800be48
 8000ca8:	0801859c 	.word	0x0801859c
 8000cac:	0800bd2c 	.word	0x0800bd2c
 8000cb0:	24000008 	.word	0x24000008
 8000cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cb6:	2b16      	cmp	r3, #22
 8000cb8:	dc1b      	bgt.n	8000cf2 <stbi_zlib_compress+0x456>
 8000cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	2107      	movs	r1, #7
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fd6e 	bl	80007a2 <stbiw__zlib_bitrev>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3307      	adds	r3, #7
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	f107 0214 	add.w	r2, r7, #20
 8000ce2:	f107 0118 	add.w	r1, r7, #24
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fd20 	bl	800072c <stbiw__zlib_flushf>
 8000cec:	4603      	mov	r3, r0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	e01a      	b.n	8000d28 <stbi_zlib_compress+0x48c>
 8000cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cf4:	33a9      	adds	r3, #169	; 0xa9
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fd52 	bl	80007a2 <stbiw__zlib_bitrev>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	461a      	mov	r2, r3
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3308      	adds	r3, #8
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	f107 0214 	add.w	r2, r7, #20
 8000d1a:	f107 0118 	add.w	r1, r7, #24
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fd04 	bl	800072c <stbiw__zlib_flushf>
 8000d24:	4603      	mov	r3, r0
 8000d26:	613b      	str	r3, [r7, #16]
         if (lengtheb[j]) stbiw__zlib_add(best - lengthc[j], lengtheb[j]);
 8000d28:	4aa0      	ldr	r2, [pc, #640]	; (8000fac <stbi_zlib_compress+0x710>)
 8000d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d2c:	4413      	add	r3, r2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d01f      	beq.n	8000d74 <stbi_zlib_compress+0x4d8>
 8000d34:	4a9e      	ldr	r2, [pc, #632]	; (8000fb0 <stbi_zlib_compress+0x714>)
 8000d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d40:	1a9a      	subs	r2, r3, r2
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
 8000d50:	4a96      	ldr	r2, [pc, #600]	; (8000fac <stbi_zlib_compress+0x710>)
 8000d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d54:	4413      	add	r3, r2
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	f107 0214 	add.w	r2, r7, #20
 8000d66:	f107 0118 	add.w	r1, r7, #24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fcde 	bl	800072c <stbiw__zlib_flushf>
 8000d70:	4603      	mov	r3, r0
 8000d72:	613b      	str	r3, [r7, #16]
         for (j=0; d > distc[j+1]-1; ++j);
 8000d74:	2300      	movs	r3, #0
 8000d76:	653b      	str	r3, [r7, #80]	; 0x50
 8000d78:	e002      	b.n	8000d80 <stbi_zlib_compress+0x4e4>
 8000d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8000d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d82:	3301      	adds	r3, #1
 8000d84:	4a8b      	ldr	r2, [pc, #556]	; (8000fb4 <stbi_zlib_compress+0x718>)
 8000d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	daf3      	bge.n	8000d7a <stbi_zlib_compress+0x4de>
         stbiw__zlib_add(stbiw__zlib_bitrev(j,5),5);
 8000d92:	2105      	movs	r1, #5
 8000d94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000d96:	f7ff fd04 	bl	80007a2 <stbiw__zlib_bitrev>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3305      	adds	r3, #5
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	f107 0214 	add.w	r2, r7, #20
 8000db6:	f107 0118 	add.w	r1, r7, #24
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fcb6 	bl	800072c <stbiw__zlib_flushf>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	613b      	str	r3, [r7, #16]
         if (disteb[j]) stbiw__zlib_add(d - distc[j], disteb[j]);
 8000dc4:	4a7c      	ldr	r2, [pc, #496]	; (8000fb8 <stbi_zlib_compress+0x71c>)
 8000dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d01f      	beq.n	8000e10 <stbi_zlib_compress+0x574>
 8000dd0:	4a78      	ldr	r2, [pc, #480]	; (8000fb4 <stbi_zlib_compress+0x718>)
 8000dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000dd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	1a9a      	subs	r2, r3, r2
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	4a72      	ldr	r2, [pc, #456]	; (8000fb8 <stbi_zlib_compress+0x71c>)
 8000dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000df0:	4413      	add	r3, r2
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	f107 0214 	add.w	r2, r7, #20
 8000e02:	f107 0118 	add.w	r1, r7, #24
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fc90 	bl	800072c <stbiw__zlib_flushf>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	613b      	str	r3, [r7, #16]
         i += best;
 8000e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e14:	4413      	add	r3, r2
 8000e16:	657b      	str	r3, [r7, #84]	; 0x54
 8000e18:	e046      	b.n	8000ea8 <stbi_zlib_compress+0x60c>
      } else {
         stbiw__zlib_huffb(data[i]);
 8000e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b8f      	cmp	r3, #143	; 0x8f
 8000e24:	d81e      	bhi.n	8000e64 <stbi_zlib_compress+0x5c8>
 8000e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e28:	68fa      	ldr	r2, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	3330      	adds	r3, #48	; 0x30
 8000e30:	2108      	movs	r1, #8
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fcb5 	bl	80007a2 <stbiw__zlib_bitrev>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	461a      	mov	r2, r3
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	f107 0214 	add.w	r2, r7, #20
 8000e54:	f107 0118 	add.w	r1, r7, #24
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fc67 	bl	800072c <stbiw__zlib_flushf>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	e01e      	b.n	8000ea2 <stbi_zlib_compress+0x606>
 8000e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e70:	2109      	movs	r1, #9
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fc95 	bl	80007a2 <stbiw__zlib_bitrev>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	461a      	mov	r2, r3
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3309      	adds	r3, #9
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	f107 0214 	add.w	r2, r7, #20
 8000e94:	f107 0118 	add.w	r1, r7, #24
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fc47 	bl	800072c <stbiw__zlib_flushf>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	613b      	str	r3, [r7, #16]
         ++i;
 8000ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	657b      	str	r3, [r7, #84]	; 0x54
   while (i < data_len-3) {
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3b03      	subs	r3, #3
 8000eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	f6ff ad8b 	blt.w	80009ca <stbi_zlib_compress+0x12e>
      }
   }
   // write out final bytes
   for (;i < data_len; ++i)
 8000eb4:	e046      	b.n	8000f44 <stbi_zlib_compress+0x6a8>
      stbiw__zlib_huffb(data[i]);
 8000eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b8f      	cmp	r3, #143	; 0x8f
 8000ec0:	d81e      	bhi.n	8000f00 <stbi_zlib_compress+0x664>
 8000ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	3330      	adds	r3, #48	; 0x30
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fc67 	bl	80007a2 <stbiw__zlib_bitrev>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	461a      	mov	r2, r3
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3308      	adds	r3, #8
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	f107 0214 	add.w	r2, r7, #20
 8000ef0:	f107 0118 	add.w	r1, r7, #24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fc19 	bl	800072c <stbiw__zlib_flushf>
 8000efa:	4603      	mov	r3, r0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	e01e      	b.n	8000f3e <stbi_zlib_compress+0x6a2>
 8000f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f0c:	2109      	movs	r1, #9
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fc47 	bl	80007a2 <stbiw__zlib_bitrev>
 8000f14:	4602      	mov	r2, r0
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	3309      	adds	r3, #9
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	f107 0214 	add.w	r2, r7, #20
 8000f30:	f107 0118 	add.w	r1, r7, #24
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fbf9 	bl	800072c <stbiw__zlib_flushf>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	613b      	str	r3, [r7, #16]
   for (;i < data_len; ++i)
 8000f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f40:	3301      	adds	r3, #1
 8000f42:	657b      	str	r3, [r7, #84]	; 0x54
 8000f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dbb4      	blt.n	8000eb6 <stbi_zlib_compress+0x61a>
   stbiw__zlib_huff(256); // end of block
 8000f4c:	2107      	movs	r1, #7
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff fc27 	bl	80007a2 <stbiw__zlib_bitrev>
 8000f54:	4602      	mov	r2, r0
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3307      	adds	r3, #7
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	f107 0214 	add.w	r2, r7, #20
 8000f70:	f107 0118 	add.w	r1, r7, #24
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbd9 	bl	800072c <stbiw__zlib_flushf>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	613b      	str	r3, [r7, #16]
   // pad with 0 bits to byte boundary
   while (bitcount)
 8000f7e:	e00e      	b.n	8000f9e <stbi_zlib_compress+0x702>
      stbiw__zlib_add(0,1);
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	61bb      	str	r3, [r7, #24]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	3301      	adds	r3, #1
 8000f88:	617b      	str	r3, [r7, #20]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	f107 0214 	add.w	r2, r7, #20
 8000f90:	f107 0118 	add.w	r1, r7, #24
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fbc9 	bl	800072c <stbiw__zlib_flushf>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	613b      	str	r3, [r7, #16]
   while (bitcount)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1ed      	bne.n	8000f80 <stbi_zlib_compress+0x6e4>

   for (i=0; i < stbiw__ZHASH; ++i)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8000fa8:	e01b      	b.n	8000fe2 <stbi_zlib_compress+0x746>
 8000faa:	bf00      	nop
 8000fac:	24000044 	.word	0x24000044
 8000fb0:	24000008 	.word	0x24000008
 8000fb4:	24000064 	.word	0x24000064
 8000fb8:	240000a4 	.word	0x240000a4
      (void) stbiw__sbfree(hash_table[i]);
 8000fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fc2:	4413      	add	r3, r2
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <stbi_zlib_compress+0x740>
 8000fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd0:	4413      	add	r3, r2
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f009 fafe 	bl	800a5d8 <free>
   for (i=0; i < stbiw__ZHASH; ++i)
 8000fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fde:	3301      	adds	r3, #1
 8000fe0:	657b      	str	r3, [r7, #84]	; 0x54
 8000fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000fe8:	dbe8      	blt.n	8000fbc <stbi_zlib_compress+0x720>
   STBIW_FREE(hash_table);
 8000fea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000fec:	f009 faf4 	bl	800a5d8 <free>

   // store uncompressed instead if compression was worse
   if (stbiw__sbn(out) > data_len + 2 + ((data_len+32766)/32767)*5) {
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	1c98      	adds	r0, r3, #2
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8001000:	4413      	add	r3, r2
 8001002:	4a7e      	ldr	r2, [pc, #504]	; (80011fc <stbi_zlib_compress+0x960>)
 8001004:	fb82 4203 	smull	r4, r2, r2, r3
 8001008:	441a      	add	r2, r3
 800100a:	1392      	asrs	r2, r2, #14
 800100c:	17db      	asrs	r3, r3, #31
 800100e:	1ad2      	subs	r2, r2, r3
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	4403      	add	r3, r0
 8001018:	4299      	cmp	r1, r3
 800101a:	f340 80d7 	ble.w	80011cc <stbi_zlib_compress+0x930>
      stbiw__sbn(out) = 2;  // truncate to DEFLATE 32K window and FLEVEL = 1
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	3b04      	subs	r3, #4
 8001022:	2202      	movs	r2, #2
 8001024:	601a      	str	r2, [r3, #0]
      for (j = 0; j < data_len;) {
 8001026:	2300      	movs	r3, #0
 8001028:	653b      	str	r3, [r7, #80]	; 0x50
 800102a:	e0ca      	b.n	80011c2 <stbi_zlib_compress+0x926>
         int blocklen = data_len - j;
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	647b      	str	r3, [r7, #68]	; 0x44
         if (blocklen > 32767) blocklen = 32767;
 8001034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800103a:	db02      	blt.n	8001042 <stbi_zlib_compress+0x7a6>
 800103c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001040:	647b      	str	r3, [r7, #68]	; 0x44
         stbiw__sbpush(out, data_len - j == blocklen); // BFINAL = ?, BTYPE = 0 -- no compression
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d008      	beq.n	800105a <stbi_zlib_compress+0x7be>
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3b04      	subs	r3, #4
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	3b08      	subs	r3, #8
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	db07      	blt.n	800106a <stbi_zlib_compress+0x7ce>
 800105a:	f107 0310 	add.w	r3, r7, #16
 800105e:	2201      	movs	r2, #1
 8001060:	2101      	movs	r1, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fb0e 	bl	8000684 <stbiw__sbgrowf>
 8001068:	bf00      	nop
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001072:	429a      	cmp	r2, r3
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2dc      	uxtb	r4, r3
 800107c:	6939      	ldr	r1, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	3b04      	subs	r3, #4
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	1c50      	adds	r0, r2, #1
 8001086:	6018      	str	r0, [r3, #0]
 8001088:	4613      	mov	r3, r2
 800108a:	440b      	add	r3, r1
 800108c:	4622      	mov	r2, r4
 800108e:	701a      	strb	r2, [r3, #0]
         stbiw__sbpush(out, STBIW_UCHAR(blocklen)); // LEN
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d008      	beq.n	80010a8 <stbi_zlib_compress+0x80c>
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	3b04      	subs	r3, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	3b08      	subs	r3, #8
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	db07      	blt.n	80010b8 <stbi_zlib_compress+0x81c>
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	2201      	movs	r2, #1
 80010ae:	2101      	movs	r1, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fae7 	bl	8000684 <stbiw__sbgrowf>
 80010b6:	bf00      	nop
 80010b8:	6939      	ldr	r1, [r7, #16]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	3b04      	subs	r3, #4
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	1c50      	adds	r0, r2, #1
 80010c2:	6018      	str	r0, [r3, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	701a      	strb	r2, [r3, #0]
         stbiw__sbpush(out, STBIW_UCHAR(blocklen >> 8));
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <stbi_zlib_compress+0x84a>
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	3b04      	subs	r3, #4
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	3b08      	subs	r3, #8
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	db07      	blt.n	80010f6 <stbi_zlib_compress+0x85a>
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	2201      	movs	r2, #1
 80010ec:	2101      	movs	r1, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fac8 	bl	8000684 <stbiw__sbgrowf>
 80010f4:	bf00      	nop
 80010f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010f8:	121c      	asrs	r4, r3, #8
 80010fa:	6939      	ldr	r1, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	3b04      	subs	r3, #4
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	1c50      	adds	r0, r2, #1
 8001104:	6018      	str	r0, [r3, #0]
 8001106:	4613      	mov	r3, r2
 8001108:	440b      	add	r3, r1
 800110a:	b2e2      	uxtb	r2, r4
 800110c:	701a      	strb	r2, [r3, #0]
         stbiw__sbpush(out, STBIW_UCHAR(~blocklen)); // NLEN
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d008      	beq.n	8001126 <stbi_zlib_compress+0x88a>
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	3b04      	subs	r3, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	3b08      	subs	r3, #8
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	db07      	blt.n	8001136 <stbi_zlib_compress+0x89a>
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	2201      	movs	r2, #1
 800112c:	2101      	movs	r1, #1
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff faa8 	bl	8000684 <stbiw__sbgrowf>
 8001134:	bf00      	nop
 8001136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001138:	b2d9      	uxtb	r1, r3
 800113a:	6938      	ldr	r0, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	3b04      	subs	r3, #4
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	1c54      	adds	r4, r2, #1
 8001144:	601c      	str	r4, [r3, #0]
 8001146:	4613      	mov	r3, r2
 8001148:	4403      	add	r3, r0
 800114a:	43ca      	mvns	r2, r1
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	701a      	strb	r2, [r3, #0]
         stbiw__sbpush(out, STBIW_UCHAR(~blocklen >> 8));
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d008      	beq.n	8001168 <stbi_zlib_compress+0x8cc>
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	3b04      	subs	r3, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3b08      	subs	r3, #8
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	db07      	blt.n	8001178 <stbi_zlib_compress+0x8dc>
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2201      	movs	r2, #1
 800116e:	2101      	movs	r1, #1
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa87 	bl	8000684 <stbiw__sbgrowf>
 8001176:	bf00      	nop
 8001178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800117a:	43db      	mvns	r3, r3
 800117c:	121c      	asrs	r4, r3, #8
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	3b04      	subs	r3, #4
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	1c50      	adds	r0, r2, #1
 8001188:	6018      	str	r0, [r3, #0]
 800118a:	4613      	mov	r3, r2
 800118c:	440b      	add	r3, r1
 800118e:	b2e2      	uxtb	r2, r4
 8001190:	701a      	strb	r2, [r3, #0]
         memcpy(out+stbiw__sbn(out), data+j, blocklen);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	3a04      	subs	r2, #4
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	1898      	adds	r0, r3, r2
 800119c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	4413      	add	r3, r2
 80011a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011a4:	4619      	mov	r1, r3
 80011a6:	f009 fa1f 	bl	800a5e8 <memcpy>
         stbiw__sbn(out) += blocklen;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	3b04      	subs	r3, #4
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	3b04      	subs	r3, #4
 80011b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80011b6:	440a      	add	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]
         j += blocklen;
 80011ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011be:	4413      	add	r3, r2
 80011c0:	653b      	str	r3, [r7, #80]	; 0x50
      for (j = 0; j < data_len;) {
 80011c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	f6ff af30 	blt.w	800102c <stbi_zlib_compress+0x790>
      }
   }

   {
      // compute adler32 on input
      unsigned int s1=1, s2=0;
 80011cc:	2301      	movs	r3, #1
 80011ce:	643b      	str	r3, [r7, #64]	; 0x40
 80011d0:	2300      	movs	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
      int blocklen = (int) (data_len % 5552);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <stbi_zlib_compress+0x964>)
 80011d8:	fb82 1203 	smull	r1, r2, r2, r3
 80011dc:	12d1      	asrs	r1, r2, #11
 80011de:	17da      	asrs	r2, r3, #31
 80011e0:	1a8a      	subs	r2, r1, r2
 80011e2:	f241 51b0 	movw	r1, #5552	; 0x15b0
 80011e6:	fb01 f202 	mul.w	r2, r1, r2
 80011ea:	1a9b      	subs	r3, r3, r2
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
      j=0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	653b      	str	r3, [r7, #80]	; 0x50
      while (j < data_len) {
 80011f2:	e03c      	b.n	800126e <stbi_zlib_compress+0x9d2>
         for (i=0; i < blocklen; ++i) { s1 += data[j+i]; s2 += s1; }
 80011f4:	2300      	movs	r3, #0
 80011f6:	657b      	str	r3, [r7, #84]	; 0x54
 80011f8:	e016      	b.n	8001228 <stbi_zlib_compress+0x98c>
 80011fa:	bf00      	nop
 80011fc:	80010003 	.word	0x80010003
 8001200:	5e6ea9af 	.word	0x5e6ea9af
 8001204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001208:	4413      	add	r3, r2
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	461a      	mov	r2, r3
 8001214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001216:	4413      	add	r3, r2
 8001218:	643b      	str	r3, [r7, #64]	; 0x40
 800121a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800121c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800121e:	4413      	add	r3, r2
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001224:	3301      	adds	r3, #1
 8001226:	657b      	str	r3, [r7, #84]	; 0x54
 8001228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800122a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800122c:	429a      	cmp	r2, r3
 800122e:	dbe9      	blt.n	8001204 <stbi_zlib_compress+0x968>
         s1 %= 65521; s2 %= 65521;
 8001230:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001232:	4b5a      	ldr	r3, [pc, #360]	; (800139c <stbi_zlib_compress+0xb00>)
 8001234:	fba3 2301 	umull	r2, r3, r3, r1
 8001238:	0bda      	lsrs	r2, r3, #15
 800123a:	4613      	mov	r3, r2
 800123c:	031b      	lsls	r3, r3, #12
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	011b      	lsls	r3, r3, #4
 8001242:	4413      	add	r3, r2
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	643b      	str	r3, [r7, #64]	; 0x40
 8001248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800124a:	4b54      	ldr	r3, [pc, #336]	; (800139c <stbi_zlib_compress+0xb00>)
 800124c:	fba3 2301 	umull	r2, r3, r3, r1
 8001250:	0bda      	lsrs	r2, r3, #15
 8001252:	4613      	mov	r3, r2
 8001254:	031b      	lsls	r3, r3, #12
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4413      	add	r3, r2
 800125c:	1acb      	subs	r3, r1, r3
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
         j += blocklen;
 8001260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001264:	4413      	add	r3, r2
 8001266:	653b      	str	r3, [r7, #80]	; 0x50
         blocklen = 5552;
 8001268:	f241 53b0 	movw	r3, #5552	; 0x15b0
 800126c:	63bb      	str	r3, [r7, #56]	; 0x38
      while (j < data_len) {
 800126e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	429a      	cmp	r2, r3
 8001274:	dbbe      	blt.n	80011f4 <stbi_zlib_compress+0x958>
      }
      stbiw__sbpush(out, STBIW_UCHAR(s2 >> 8));
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d008      	beq.n	800128e <stbi_zlib_compress+0x9f2>
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	3b04      	subs	r3, #4
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1c5a      	adds	r2, r3, #1
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	3b08      	subs	r3, #8
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	db07      	blt.n	800129e <stbi_zlib_compress+0xa02>
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	2201      	movs	r2, #1
 8001294:	2101      	movs	r1, #1
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f9f4 	bl	8000684 <stbiw__sbgrowf>
 800129c:	bf00      	nop
 800129e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012a0:	0a1c      	lsrs	r4, r3, #8
 80012a2:	6939      	ldr	r1, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	3b04      	subs	r3, #4
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	1c50      	adds	r0, r2, #1
 80012ac:	6018      	str	r0, [r3, #0]
 80012ae:	4613      	mov	r3, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	b2e2      	uxtb	r2, r4
 80012b4:	701a      	strb	r2, [r3, #0]
      stbiw__sbpush(out, STBIW_UCHAR(s2));
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <stbi_zlib_compress+0xa32>
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	3b04      	subs	r3, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	3b08      	subs	r3, #8
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	db07      	blt.n	80012de <stbi_zlib_compress+0xa42>
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2201      	movs	r2, #1
 80012d4:	2101      	movs	r1, #1
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f9d4 	bl	8000684 <stbiw__sbgrowf>
 80012dc:	bf00      	nop
 80012de:	6939      	ldr	r1, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	3b04      	subs	r3, #4
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	1c50      	adds	r0, r2, #1
 80012e8:	6018      	str	r0, [r3, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
      stbiw__sbpush(out, STBIW_UCHAR(s1 >> 8));
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d008      	beq.n	800130c <stbi_zlib_compress+0xa70>
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	3b04      	subs	r3, #4
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	3b08      	subs	r3, #8
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	db07      	blt.n	800131c <stbi_zlib_compress+0xa80>
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2201      	movs	r2, #1
 8001312:	2101      	movs	r1, #1
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f9b5 	bl	8000684 <stbiw__sbgrowf>
 800131a:	bf00      	nop
 800131c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800131e:	0a1c      	lsrs	r4, r3, #8
 8001320:	6939      	ldr	r1, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	3b04      	subs	r3, #4
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	1c50      	adds	r0, r2, #1
 800132a:	6018      	str	r0, [r3, #0]
 800132c:	4613      	mov	r3, r2
 800132e:	440b      	add	r3, r1
 8001330:	b2e2      	uxtb	r2, r4
 8001332:	701a      	strb	r2, [r3, #0]
      stbiw__sbpush(out, STBIW_UCHAR(s1));
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d008      	beq.n	800134c <stbi_zlib_compress+0xab0>
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	3b04      	subs	r3, #4
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	3b08      	subs	r3, #8
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	db07      	blt.n	800135c <stbi_zlib_compress+0xac0>
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	2201      	movs	r2, #1
 8001352:	2101      	movs	r1, #1
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f995 	bl	8000684 <stbiw__sbgrowf>
 800135a:	bf00      	nop
 800135c:	6939      	ldr	r1, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	3b04      	subs	r3, #4
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	1c50      	adds	r0, r2, #1
 8001366:	6018      	str	r0, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	440b      	add	r3, r1
 800136c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]
   }
   *out_len = stbiw__sbn(out);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	601a      	str	r2, [r3, #0]
   // make returned pointer freeable
   STBIW_MEMMOVE(stbiw__sbraw(out), out, *out_len);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	f1a3 0008 	sub.w	r0, r3, #8
 8001382:	6939      	ldr	r1, [r7, #16]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	461a      	mov	r2, r3
 800138a:	f009 f93b 	bl	800a604 <memmove>
   return (unsigned char *) stbiw__sbraw(out);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	3b08      	subs	r3, #8
#endif // STBIW_ZLIB_COMPRESS
}
 8001392:	4618      	mov	r0, r3
 8001394:	375c      	adds	r7, #92	; 0x5c
 8001396:	46bd      	mov	sp, r7
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	bf00      	nop
 800139c:	80078071 	.word	0x80078071

080013a0 <stbiw__crc32>:

static unsigned int stbiw__crc32(unsigned char *buffer, int len)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
      0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
      0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
      0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
   };

   unsigned int crc = ~0u;
 80013aa:	f04f 33ff 	mov.w	r3, #4294967295
 80013ae:	60fb      	str	r3, [r7, #12]
   int i;
   for (i=0; i < len; ++i)
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	e011      	b.n	80013da <stbiw__crc32+0x3a>
      crc = (crc >> 8) ^ crc_table[buffer[i] ^ (crc & 0xff)];
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	0a1a      	lsrs	r2, r3, #8
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	440b      	add	r3, r1
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	404b      	eors	r3, r1
 80013ca:	490a      	ldr	r1, [pc, #40]	; (80013f4 <stbiw__crc32+0x54>)
 80013cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013d0:	4053      	eors	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
   for (i=0; i < len; ++i)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbe9      	blt.n	80013b6 <stbiw__crc32+0x16>
   return ~crc;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	43db      	mvns	r3, r3
#endif
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	240000c4 	.word	0x240000c4

080013f8 <stbiw__wpcrc>:
#define stbiw__wpng4(o,a,b,c,d) ((o)[0]=STBIW_UCHAR(a),(o)[1]=STBIW_UCHAR(b),(o)[2]=STBIW_UCHAR(c),(o)[3]=STBIW_UCHAR(d),(o)+=4)
#define stbiw__wp32(data,v) stbiw__wpng4(data, (v)>>24,(v)>>16,(v)>>8,(v));
#define stbiw__wptag(data,s) stbiw__wpng4(data, s[0],s[1],s[2],s[3])

static void stbiw__wpcrc(unsigned char **data, int len)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
   unsigned int crc = stbiw__crc32(*data - len - 4, len+4);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	f06f 0303 	mvn.w	r3, #3
 800140c:	1a5b      	subs	r3, r3, r1
 800140e:	441a      	add	r2, r3
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3304      	adds	r3, #4
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff ffc2 	bl	80013a0 <stbiw__crc32>
 800141c:	60f8      	str	r0, [r7, #12]
   stbiw__wp32(*data, crc);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	0e1a      	lsrs	r2, r3, #24
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	0c1a      	lsrs	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	0a1a      	lsrs	r2, r3, #8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3302      	adds	r3, #2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3303      	adds	r3, #3
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1d1a      	adds	r2, r3, #4
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <stbiw__paeth>:

static unsigned char stbiw__paeth(int a, int b, int c)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
   int p = a + b - c, pa = abs(p-a), pb = abs(p-b), pc = abs(p-c);
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	441a      	add	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	69fa      	ldr	r2, [r7, #28]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	bfb8      	it	lt
 8001486:	425b      	neglt	r3, r3
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	bfb8      	it	lt
 8001494:	425b      	neglt	r3, r3
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	bfb8      	it	lt
 80014a2:	425b      	neglt	r3, r3
 80014a4:	613b      	str	r3, [r7, #16]
   if (pa <= pb && pa <= pc) return STBIW_UCHAR(a);
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dc06      	bgt.n	80014bc <stbiw__paeth+0x58>
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dc02      	bgt.n	80014bc <stbiw__paeth+0x58>
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	e008      	b.n	80014ce <stbiw__paeth+0x6a>
   if (pb <= pc) return STBIW_UCHAR(b);
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dc02      	bgt.n	80014ca <stbiw__paeth+0x66>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	e001      	b.n	80014ce <stbiw__paeth+0x6a>
   return STBIW_UCHAR(c);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	b2db      	uxtb	r3, r3
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <stbiw__encode_png_line>:

// @OPTIMIZE: provide an option that always forces left-predict or paeth predict
static void stbiw__encode_png_line(unsigned char *pixels, int stride_bytes, int width, int height, int y, int n, int filter_type, signed char *line_buffer)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b08b      	sub	sp, #44	; 0x2c
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	603b      	str	r3, [r7, #0]
   static int mapping[] = { 0,1,2,3,4 };
   static int firstmap[] = { 0,1,0,5,6 };
   int *mymap = (y != 0) ? mapping : firstmap;
 80014ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <stbiw__encode_png_line+0x18>
 80014f0:	4b97      	ldr	r3, [pc, #604]	; (8001750 <stbiw__encode_png_line+0x274>)
 80014f2:	e000      	b.n	80014f6 <stbiw__encode_png_line+0x1a>
 80014f4:	4b97      	ldr	r3, [pc, #604]	; (8001754 <stbiw__encode_png_line+0x278>)
 80014f6:	623b      	str	r3, [r7, #32]
   int i;
   int type = mymap[filter_type];
 80014f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	6a3a      	ldr	r2, [r7, #32]
 80014fe:	4413      	add	r3, r2
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	61fb      	str	r3, [r7, #28]
   unsigned char *z = pixels + stride_bytes * (stbi__flip_vertically_on_write ? height-1-y : y);
 8001504:	4b94      	ldr	r3, [pc, #592]	; (8001758 <stbiw__encode_png_line+0x27c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <stbiw__encode_png_line+0x3a>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	1e5a      	subs	r2, r3, #1
 8001510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	e000      	b.n	8001518 <stbiw__encode_png_line+0x3c>
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	461a      	mov	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4413      	add	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
   int signed_stride = stbi__flip_vertically_on_write ? -stride_bytes : stride_bytes;
 8001526:	4b8c      	ldr	r3, [pc, #560]	; (8001758 <stbiw__encode_png_line+0x27c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <stbiw__encode_png_line+0x58>
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	425b      	negs	r3, r3
 8001532:	e000      	b.n	8001536 <stbiw__encode_png_line+0x5a>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	617b      	str	r3, [r7, #20]

   if (type==0) {
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d109      	bne.n	8001552 <stbiw__encode_png_line+0x76>
      memcpy(line_buffer, z, width*n);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	461a      	mov	r2, r3
 8001548:	69b9      	ldr	r1, [r7, #24]
 800154a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800154c:	f009 f84c 	bl	800a5e8 <memcpy>
      return;
 8001550:	e17f      	b.n	8001852 <stbiw__encode_png_line+0x376>
   }

   // first loop isn't optimized since it's just one pixel
   for (i = 0; i < n; ++i) {
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
 8001556:	e075      	b.n	8001644 <stbiw__encode_png_line+0x168>
      switch (type) {
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	3b01      	subs	r3, #1
 800155c:	2b05      	cmp	r3, #5
 800155e:	d86e      	bhi.n	800163e <stbiw__encode_png_line+0x162>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <stbiw__encode_png_line+0x8c>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	08001581 	.word	0x08001581
 800156c:	08001595 	.word	0x08001595
 8001570:	080015bb 	.word	0x080015bb
 8001574:	080015e5 	.word	0x080015e5
 8001578:	08001617 	.word	0x08001617
 800157c:	0800162b 	.word	0x0800162b
         case 1: line_buffer[i] = z[i]; break;
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4413      	add	r3, r2
 8001586:	7819      	ldrb	r1, [r3, #0]
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800158c:	4413      	add	r3, r2
 800158e:	b24a      	sxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
 8001592:	e054      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 2: line_buffer[i] = z[i] - z[i-signed_stride]; break;
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4413      	add	r3, r2
 800159a:	781a      	ldrb	r2, [r3, #0]
 800159c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	1acb      	subs	r3, r1, r3
 80015a2:	4619      	mov	r1, r3
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	440b      	add	r3, r1
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b2d9      	uxtb	r1, r3
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015b2:	4413      	add	r3, r2
 80015b4:	b24a      	sxtb	r2, r1
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e041      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 3: line_buffer[i] = z[i] - (z[i-signed_stride]>>1); break;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4413      	add	r3, r2
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	1acb      	subs	r3, r1, r3
 80015c8:	4619      	mov	r1, r3
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	440b      	add	r3, r1
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	b2d9      	uxtb	r1, r3
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015dc:	4413      	add	r3, r2
 80015de:	b24a      	sxtb	r2, r1
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e02c      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 4: line_buffer[i] = (signed char) (z[i] - stbiw__paeth(0,z[i-signed_stride],0)); break;
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4413      	add	r3, r2
 80015ea:	781c      	ldrb	r4, [r3, #0]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	4619      	mov	r1, r3
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff ff30 	bl	8001464 <stbiw__paeth>
 8001604:	4603      	mov	r3, r0
 8001606:	1ae3      	subs	r3, r4, r3
 8001608:	b2d9      	uxtb	r1, r3
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800160e:	4413      	add	r3, r2
 8001610:	b24a      	sxtb	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e013      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 5: line_buffer[i] = z[i]; break;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4413      	add	r3, r2
 800161c:	7819      	ldrb	r1, [r3, #0]
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001622:	4413      	add	r3, r2
 8001624:	b24a      	sxtb	r2, r1
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e009      	b.n	800163e <stbiw__encode_png_line+0x162>
         case 6: line_buffer[i] = z[i]; break;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4413      	add	r3, r2
 8001630:	7819      	ldrb	r1, [r3, #0]
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001636:	4413      	add	r3, r2
 8001638:	b24a      	sxtb	r2, r1
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	bf00      	nop
   for (i = 0; i < n; ++i) {
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3301      	adds	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001648:	429a      	cmp	r2, r3
 800164a:	db85      	blt.n	8001558 <stbiw__encode_png_line+0x7c>
      }
   }
   switch (type) {
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	3b01      	subs	r3, #1
 8001650:	2b05      	cmp	r3, #5
 8001652:	f200 80fe 	bhi.w	8001852 <stbiw__encode_png_line+0x376>
 8001656:	a201      	add	r2, pc, #4	; (adr r2, 800165c <stbiw__encode_png_line+0x180>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	08001675 	.word	0x08001675
 8001660:	080016b5 	.word	0x080016b5
 8001664:	080016f5 	.word	0x080016f5
 8001668:	0800174b 	.word	0x0800174b
 800166c:	080017c3 	.word	0x080017c3
 8001670:	08001807 	.word	0x08001807
      case 1: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - z[i-n]; break;
 8001674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
 8001678:	e014      	b.n	80016a4 <stbiw__encode_png_line+0x1c8>
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4413      	add	r3, r2
 8001680:	781a      	ldrb	r2, [r3, #0]
 8001682:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001686:	1acb      	subs	r3, r1, r3
 8001688:	4619      	mov	r1, r3
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	440b      	add	r3, r1
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b2d9      	uxtb	r1, r3
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001698:	4413      	add	r3, r2
 800169a:	b24a      	sxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	3301      	adds	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ae:	429a      	cmp	r2, r3
 80016b0:	dbe3      	blt.n	800167a <stbiw__encode_png_line+0x19e>
 80016b2:	e0ce      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 2: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - z[i-signed_stride]; break;
 80016b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
 80016b8:	e014      	b.n	80016e4 <stbiw__encode_png_line+0x208>
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4413      	add	r3, r2
 80016c0:	781a      	ldrb	r2, [r3, #0]
 80016c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	1acb      	subs	r3, r1, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	440b      	add	r3, r1
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	b2d9      	uxtb	r1, r3
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016d8:	4413      	add	r3, r2
 80016da:	b24a      	sxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	3301      	adds	r3, #1
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ee:	429a      	cmp	r2, r3
 80016f0:	dbe3      	blt.n	80016ba <stbiw__encode_png_line+0x1de>
 80016f2:	e0ae      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 3: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - ((z[i-n] + z[i-signed_stride])>>1); break;
 80016f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e01f      	b.n	800173a <stbiw__encode_png_line+0x25e>
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4413      	add	r3, r2
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001706:	1acb      	subs	r3, r1, r3
 8001708:	4619      	mov	r1, r3
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	440b      	add	r3, r1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	1acb      	subs	r3, r1, r3
 8001718:	4619      	mov	r1, r3
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	440b      	add	r3, r1
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4403      	add	r3, r0
 8001722:	105b      	asrs	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	b2d9      	uxtb	r1, r3
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800172e:	4413      	add	r3, r2
 8001730:	b24a      	sxtb	r2, r1
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	3301      	adds	r3, #1
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	429a      	cmp	r2, r3
 8001746:	dbd8      	blt.n	80016fa <stbiw__encode_png_line+0x21e>
 8001748:	e083      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 4: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - stbiw__paeth(z[i-n], z[i-signed_stride], z[i-signed_stride-n]); break;
 800174a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
 800174e:	e030      	b.n	80017b2 <stbiw__encode_png_line+0x2d6>
 8001750:	240004c4 	.word	0x240004c4
 8001754:	240004d8 	.word	0x240004d8
 8001758:	2400063c 	.word	0x2400063c
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4413      	add	r3, r2
 8001762:	781c      	ldrb	r4, [r3, #0]
 8001764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	461a      	mov	r2, r3
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	461a      	mov	r2, r3
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	4413      	add	r3, r2
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4619      	mov	r1, r3
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	1ad2      	subs	r2, r2, r3
 800178a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	461a      	mov	r2, r3
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	f7ff fe64 	bl	8001464 <stbiw__paeth>
 800179c:	4603      	mov	r3, r0
 800179e:	1ae3      	subs	r3, r4, r3
 80017a0:	b2d9      	uxtb	r1, r3
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017a6:	4413      	add	r3, r2
 80017a8:	b24a      	sxtb	r2, r1
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	3301      	adds	r3, #1
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbcd      	blt.n	800175c <stbiw__encode_png_line+0x280>
 80017c0:	e047      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 5: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - (z[i-n]>>1); break;
 80017c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
 80017c6:	e016      	b.n	80017f6 <stbiw__encode_png_line+0x31a>
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4413      	add	r3, r2
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d4:	1acb      	subs	r3, r1, r3
 80017d6:	4619      	mov	r1, r3
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	440b      	add	r3, r1
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	b2d9      	uxtb	r1, r3
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017ea:	4413      	add	r3, r2
 80017ec:	b24a      	sxtb	r2, r1
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	3301      	adds	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	429a      	cmp	r2, r3
 8001802:	dbe1      	blt.n	80017c8 <stbiw__encode_png_line+0x2ec>
 8001804:	e025      	b.n	8001852 <stbiw__encode_png_line+0x376>
      case 6: for (i=n; i < width*n; ++i) line_buffer[i] = z[i] - stbiw__paeth(z[i-n], 0,0); break;
 8001806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	e01a      	b.n	8001842 <stbiw__encode_png_line+0x366>
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4413      	add	r3, r2
 8001812:	781c      	ldrb	r4, [r3, #0]
 8001814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	461a      	mov	r2, r3
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fe1c 	bl	8001464 <stbiw__paeth>
 800182c:	4603      	mov	r3, r0
 800182e:	1ae3      	subs	r3, r4, r3
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001836:	4413      	add	r3, r2
 8001838:	b24a      	sxtb	r2, r1
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	3301      	adds	r3, #1
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184c:	429a      	cmp	r2, r3
 800184e:	dbdd      	blt.n	800180c <stbiw__encode_png_line+0x330>
 8001850:	bf00      	nop
   }
}
 8001852:	372c      	adds	r7, #44	; 0x2c
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}

08001858 <stbi_write_png_to_mem>:

STBIWDEF unsigned char *stbi_write_png_to_mem(const unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b09c      	sub	sp, #112	; 0x70
 800185c:	af04      	add	r7, sp, #16
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
   int force_filter = stbi_write_force_png_filter;
 8001866:	4b7f      	ldr	r3, [pc, #508]	; (8001a64 <stbi_write_png_to_mem+0x20c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	65fb      	str	r3, [r7, #92]	; 0x5c
   int ctype[5] = { -1, 0, 4, 2, 6 };
 800186c:	4b7e      	ldr	r3, [pc, #504]	; (8001a68 <stbi_write_png_to_mem+0x210>)
 800186e:	f107 0420 	add.w	r4, r7, #32
 8001872:	461d      	mov	r5, r3
 8001874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	6023      	str	r3, [r4, #0]
   unsigned char sig[8] = { 137,80,78,71,13,10,26,10 };
 800187c:	4a7b      	ldr	r2, [pc, #492]	; (8001a6c <stbi_write_png_to_mem+0x214>)
 800187e:	f107 0318 	add.w	r3, r7, #24
 8001882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001886:	e883 0003 	stmia.w	r3, {r0, r1}
   unsigned char *out,*o, *filt, *zlib;
   signed char *line_buffer;
   int j,zlen;

   if (stride_bytes == 0)
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <stbi_write_png_to_mem+0x42>
      stride_bytes = x * n;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001894:	fb02 f303 	mul.w	r3, r2, r3
 8001898:	60bb      	str	r3, [r7, #8]

   if (force_filter >= 5) {
 800189a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189c:	2b04      	cmp	r3, #4
 800189e:	dd02      	ble.n	80018a6 <stbi_write_png_to_mem+0x4e>
      force_filter = -1;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   }

   filt = (unsigned char *) STBIW_MALLOC((x*n+1) * y); if (!filt) return 0;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f008 fe86 	bl	800a5c8 <malloc>
 80018bc:	4603      	mov	r3, r0
 80018be:	643b      	str	r3, [r7, #64]	; 0x40
 80018c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <stbi_write_png_to_mem+0x72>
 80018c6:	2300      	movs	r3, #0
 80018c8:	e1d9      	b.n	8001c7e <stbi_write_png_to_mem+0x426>
   line_buffer = (signed char *) STBIW_MALLOC(x * n); if (!line_buffer) { STBIW_FREE(filt); return 0; }
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f008 fe78 	bl	800a5c8 <malloc>
 80018d8:	4603      	mov	r3, r0
 80018da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <stbi_write_png_to_mem+0x94>
 80018e2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80018e4:	f008 fe78 	bl	800a5d8 <free>
 80018e8:	2300      	movs	r3, #0
 80018ea:	e1c8      	b.n	8001c7e <stbi_write_png_to_mem+0x426>
   for (j=0; j < y; ++j) {
 80018ec:	2300      	movs	r3, #0
 80018ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80018f0:	e08b      	b.n	8001a0a <stbi_write_png_to_mem+0x1b2>
      int filter_type;
      if (force_filter > -1) {
 80018f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db10      	blt.n	800191a <stbi_write_png_to_mem+0xc2>
         filter_type = force_filter;
 80018f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018fa:	657b      	str	r3, [r7, #84]	; 0x54
         stbiw__encode_png_line((unsigned char*)(pixels), stride_bytes, x, y, j, n, force_filter, line_buffer);
 80018fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fe:	9303      	str	r3, [sp, #12]
 8001900:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7ff fde2 	bl	80014dc <stbiw__encode_png_line>
 8001918:	e053      	b.n	80019c2 <stbi_write_png_to_mem+0x16a>
      } else { // Estimate the best filter by running through all of them:
         int best_filter = 0, best_filter_val = 0x7fffffff, est, i;
 800191a:	2300      	movs	r3, #0
 800191c:	653b      	str	r3, [r7, #80]	; 0x50
 800191e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
         for (filter_type = 0; filter_type < 5; filter_type++) {
 8001924:	2300      	movs	r3, #0
 8001926:	657b      	str	r3, [r7, #84]	; 0x54
 8001928:	e034      	b.n	8001994 <stbi_write_png_to_mem+0x13c>
            stbiw__encode_png_line((unsigned char*)(pixels), stride_bytes, x, y, j, n, filter_type, line_buffer);
 800192a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192c:	9303      	str	r3, [sp, #12]
 800192e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff fdcb 	bl	80014dc <stbiw__encode_png_line>

            // Estimate the entropy of the line using this filter; the less, the better.
            est = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
            for (i = 0; i < x*n; ++i) {
 800194a:	2300      	movs	r3, #0
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
 800194e:	e00f      	b.n	8001970 <stbi_write_png_to_mem+0x118>
               est += abs((signed char) line_buffer[i]);
 8001950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001952:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001954:	4413      	add	r3, r2
 8001956:	f993 3000 	ldrsb.w	r3, [r3]
 800195a:	2b00      	cmp	r3, #0
 800195c:	bfb8      	it	lt
 800195e:	425b      	neglt	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001966:	4413      	add	r3, r2
 8001968:	64bb      	str	r3, [r7, #72]	; 0x48
            for (i = 0; i < x*n; ++i) {
 800196a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196c:	3301      	adds	r3, #1
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001974:	fb02 f303 	mul.w	r3, r2, r3
 8001978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800197a:	429a      	cmp	r2, r3
 800197c:	dbe8      	blt.n	8001950 <stbi_write_png_to_mem+0xf8>
            }
            if (est < best_filter_val) {
 800197e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001982:	429a      	cmp	r2, r3
 8001984:	da03      	bge.n	800198e <stbi_write_png_to_mem+0x136>
               best_filter_val = est;
 8001986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001988:	64fb      	str	r3, [r7, #76]	; 0x4c
               best_filter = filter_type;
 800198a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198c:	653b      	str	r3, [r7, #80]	; 0x50
         for (filter_type = 0; filter_type < 5; filter_type++) {
 800198e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001990:	3301      	adds	r3, #1
 8001992:	657b      	str	r3, [r7, #84]	; 0x54
 8001994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001996:	2b04      	cmp	r3, #4
 8001998:	ddc7      	ble.n	800192a <stbi_write_png_to_mem+0xd2>
            }
         }
         if (filter_type != best_filter) {  // If the last iteration already got us the best filter, don't redo it
 800199a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800199c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800199e:	429a      	cmp	r2, r3
 80019a0:	d00f      	beq.n	80019c2 <stbi_write_png_to_mem+0x16a>
            stbiw__encode_png_line((unsigned char*)(pixels), stride_bytes, x, y, j, n, best_filter, line_buffer);
 80019a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a4:	9303      	str	r3, [sp, #12]
 80019a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f7ff fd8f 	bl	80014dc <stbiw__encode_png_line>
            filter_type = best_filter;
 80019be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019c0:	657b      	str	r3, [r7, #84]	; 0x54
         }
      }
      // when we get here, filter_type contains the filter type, and line_buffer contains the data
      filt[j*(x*n+1)] = (unsigned char) filter_type;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019c6:	fb02 f303 	mul.w	r3, r2, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019d6:	4413      	add	r3, r2
 80019d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]
      STBIW_MEMMOVE(filt+j*(x*n+1)+1, line_buffer, x*n);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019f2:	18d0      	adds	r0, r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a00:	f008 fe00 	bl	800a604 <memmove>
   for (j=0; j < y; ++j) {
 8001a04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a06:	3301      	adds	r3, #1
 8001a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	f6ff af6f 	blt.w	80018f2 <stbi_write_png_to_mem+0x9a>
   }
   STBIW_FREE(line_buffer);
 8001a14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a16:	f008 fddf 	bl	800a5d8 <free>
   zlib = stbi_zlib_compress(filt, y*( x*n+1), &zlen, stbi_write_png_compression_level);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	3301      	adds	r3, #1
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	fb02 f103 	mul.w	r1, r2, r3
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <stbi_write_png_to_mem+0x218>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f107 0210 	add.w	r2, r7, #16
 8001a32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001a34:	f7fe ff32 	bl	800089c <stbi_zlib_compress>
 8001a38:	63b8      	str	r0, [r7, #56]	; 0x38
   STBIW_FREE(filt);
 8001a3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001a3c:	f008 fdcc 	bl	800a5d8 <free>
   if (!zlib) return 0;
 8001a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <stbi_write_png_to_mem+0x1f2>
 8001a46:	2300      	movs	r3, #0
 8001a48:	e119      	b.n	8001c7e <stbi_write_png_to_mem+0x426>

   // each tag requires 12 bytes of overhead
   out = (unsigned char *) STBIW_MALLOC(8 + 12+13 + 12+zlen + 12);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	3339      	adds	r3, #57	; 0x39
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f008 fdba 	bl	800a5c8 <malloc>
 8001a54:	4603      	mov	r3, r0
 8001a56:	637b      	str	r3, [r7, #52]	; 0x34
   if (!out) return 0;
 8001a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10a      	bne.n	8001a74 <stbi_write_png_to_mem+0x21c>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e10d      	b.n	8001c7e <stbi_write_png_to_mem+0x426>
 8001a62:	bf00      	nop
 8001a64:	24000004 	.word	0x24000004
 8001a68:	0800be78 	.word	0x0800be78
 8001a6c:	0800be8c 	.word	0x0800be8c
 8001a70:	24000000 	.word	0x24000000
   *out_len = 8 + 12+13 + 12+zlen + 12;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	f103 0239 	add.w	r2, r3, #57	; 0x39
 8001a7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a7c:	601a      	str	r2, [r3, #0]

   o=out;
 8001a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a80:	617b      	str	r3, [r7, #20]
   STBIW_MEMMOVE(o,sig,8); o+= 8;
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f107 0118 	add.w	r1, r7, #24
 8001a88:	2208      	movs	r2, #8
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f008 fdba 	bl	800a604 <memmove>
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3308      	adds	r3, #8
 8001a94:	617b      	str	r3, [r7, #20]
   stbiw__wp32(o, 13); // header length
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	220d      	movs	r2, #13
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	617b      	str	r3, [r7, #20]
   stbiw__wptag(o, "IHDR");
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2249      	movs	r2, #73	; 0x49
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	2248      	movs	r2, #72	; 0x48
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3302      	adds	r3, #2
 8001acc:	2244      	movs	r2, #68	; 0x44
 8001ace:	701a      	strb	r2, [r3, #0]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3303      	adds	r3, #3
 8001ad4:	2252      	movs	r2, #82	; 0x52
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3304      	adds	r3, #4
 8001adc:	617b      	str	r3, [r7, #20]
   stbiw__wp32(o, x);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	161a      	asrs	r2, r3, #24
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	141a      	asrs	r2, r3, #16
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3301      	adds	r3, #1
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	121a      	asrs	r2, r3, #8
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3302      	adds	r3, #2
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	3303      	adds	r3, #3
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	617b      	str	r3, [r7, #20]
   stbiw__wp32(o, y);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	161a      	asrs	r2, r3, #24
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	141a      	asrs	r2, r3, #16
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	121a      	asrs	r2, r3, #8
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3303      	adds	r3, #3
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3304      	adds	r3, #4
 8001b40:	617b      	str	r3, [r7, #20]
   *o++ = 8;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	617a      	str	r2, [r7, #20]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	701a      	strb	r2, [r3, #0]
   *o++ = STBIW_UCHAR(ctype[n]);
 8001b4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	3360      	adds	r3, #96	; 0x60
 8001b52:	443b      	add	r3, r7
 8001b54:	f853 1c40 	ldr.w	r1, [r3, #-64]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	617a      	str	r2, [r7, #20]
 8001b5e:	b2ca      	uxtb	r2, r1
 8001b60:	701a      	strb	r2, [r3, #0]
   *o++ = 0;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	1c5a      	adds	r2, r3, #1
 8001b66:	617a      	str	r2, [r7, #20]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
   *o++ = 0;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	617a      	str	r2, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
   *o++ = 0;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	617a      	str	r2, [r7, #20]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
   stbiw__wpcrc(&o,13);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	210d      	movs	r1, #13
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fc36 	bl	80013f8 <stbiw__wpcrc>

   stbiw__wp32(o, zlen);
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	161a      	asrs	r2, r3, #24
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	141a      	asrs	r2, r3, #16
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	121a      	asrs	r2, r3, #8
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3302      	adds	r3, #2
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3304      	adds	r3, #4
 8001bbc:	617b      	str	r3, [r7, #20]
   stbiw__wptag(o, "IDAT");
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2249      	movs	r2, #73	; 0x49
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	2244      	movs	r2, #68	; 0x44
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	3302      	adds	r3, #2
 8001bd0:	2241      	movs	r2, #65	; 0x41
 8001bd2:	701a      	strb	r2, [r3, #0]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3303      	adds	r3, #3
 8001bd8:	2254      	movs	r2, #84	; 0x54
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3304      	adds	r3, #4
 8001be0:	617b      	str	r3, [r7, #20]
   STBIW_MEMMOVE(o, zlib, zlen);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001be8:	4618      	mov	r0, r3
 8001bea:	f008 fd0b 	bl	800a604 <memmove>
   o += zlen;
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
   STBIW_FREE(zlib);
 8001bf6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001bf8:	f008 fcee 	bl	800a5d8 <free>
   stbiw__wpcrc(&o, zlen);
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	f107 0314 	add.w	r3, r7, #20
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fbf7 	bl	80013f8 <stbiw__wpcrc>

   stbiw__wp32(o,0);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	3301      	adds	r3, #1
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3303      	adds	r3, #3
 8001c24:	2200      	movs	r2, #0
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	3304      	adds	r3, #4
 8001c2c:	617b      	str	r3, [r7, #20]
   stbiw__wptag(o, "IEND");
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2249      	movs	r2, #73	; 0x49
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	2245      	movs	r2, #69	; 0x45
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3302      	adds	r3, #2
 8001c40:	224e      	movs	r2, #78	; 0x4e
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3303      	adds	r3, #3
 8001c48:	2244      	movs	r2, #68	; 0x44
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	617b      	str	r3, [r7, #20]
   stbiw__wpcrc(&o,0);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fbcd 	bl	80013f8 <stbiw__wpcrc>

   STBIW_ASSERT(o == out + *out_len);
 8001c5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c66:	441a      	add	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d006      	beq.n	8001c7c <stbi_write_png_to_mem+0x424>
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <stbi_write_png_to_mem+0x430>)
 8001c70:	4a06      	ldr	r2, [pc, #24]	; (8001c8c <stbi_write_png_to_mem+0x434>)
 8001c72:	f240 41b9 	movw	r1, #1209	; 0x4b9
 8001c76:	4806      	ldr	r0, [pc, #24]	; (8001c90 <stbi_write_png_to_mem+0x438>)
 8001c78:	f008 f9a2 	bl	8009fc0 <__assert_func>

   return out;
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3760      	adds	r7, #96	; 0x60
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bdb0      	pop	{r4, r5, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	0800be64 	.word	0x0800be64
 8001c8c:	080185b0 	.word	0x080185b0
 8001c90:	0800bd2c 	.word	0x0800bd2c

08001c94 <follow_edges>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void follow_edges(unsigned char *edgemapptr, short *edgemagptr, short lowval,
    int cols)
{
 8001c94:	b5b0      	push	{r4, r5, r7, lr}
 8001c96:	b098      	sub	sp, #96	; 0x60
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	80fb      	strh	r3, [r7, #6]
    short *tempmagptr;
    unsigned char *tempmapptr;
    int i;
    //float thethresh;
    int x[8] = { 1, 1, 0, -1, -1, -1, 0, 1 },
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <follow_edges+0xd0>)
 8001ca6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001caa:	461d      	mov	r5, r3
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        y[8] = { 0, 1, 1, 1, 0, -1, -1, -1 };
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <follow_edges+0xd4>)
 8001cba:	f107 0414 	add.w	r4, r7, #20
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    for (i = 0; i<8; i++){
 8001ccc:	2300      	movs	r3, #0
 8001cce:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cd0:	e040      	b.n	8001d54 <follow_edges+0xc0>
        tempmapptr = edgemapptr - y[i] * cols + x[i];
 8001cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	3360      	adds	r3, #96	; 0x60
 8001cd8:	443b      	add	r3, r7
 8001cda:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	3360      	adds	r3, #96	; 0x60
 8001ce6:	443b      	add	r3, r7
 8001ce8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	1acb      	subs	r3, r1, r3
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	65bb      	str	r3, [r7, #88]	; 0x58
        tempmagptr = edgemagptr - y[i] * cols + x[i];
 8001cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	3360      	adds	r3, #96	; 0x60
 8001d00:	443b      	add	r3, r7
 8001d02:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d06:	4619      	mov	r1, r3
 8001d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	3360      	adds	r3, #96	; 0x60
 8001d0e:	443b      	add	r3, r7
 8001d10:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	fb02 f303 	mul.w	r3, r2, r3
 8001d1a:	1acb      	subs	r3, r1, r3
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	4413      	add	r3, r2
 8001d22:	657b      	str	r3, [r7, #84]	; 0x54

        if ((*tempmapptr == POSSIBLE_EDGE) && (*tempmagptr > lowval)){
 8001d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b80      	cmp	r3, #128	; 0x80
 8001d2a:	d110      	bne.n	8001d4e <follow_edges+0xba>
 8001d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d32:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	da09      	bge.n	8001d4e <follow_edges+0xba>
            *tempmapptr = (unsigned char)EDGE;
 8001d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
            follow_edges(tempmapptr, tempmagptr, lowval, cols);
 8001d40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d48:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001d4a:	f7ff ffa3 	bl	8001c94 <follow_edges>
    for (i = 0; i<8; i++){
 8001d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d50:	3301      	adds	r3, #1
 8001d52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	ddbb      	ble.n	8001cd2 <follow_edges+0x3e>
        }
    }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	3760      	adds	r7, #96	; 0x60
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bdb0      	pop	{r4, r5, r7, pc}
 8001d64:	0800bf18 	.word	0x0800bf18
 8001d68:	0800bf38 	.word	0x0800bf38

08001d6c <apply_hysteresis>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void apply_hysteresis(short int *mag, unsigned char *nms, int rows, int cols,
    float tlow, float thigh, unsigned char *edge)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	f5ad 3d00 	sub.w	sp, sp, #131072	; 0x20000
 8001d72:	b08f      	sub	sp, #60	; 0x3c
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001d7a:	f844 0c24 	str.w	r0, [r4, #-36]
 8001d7e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001d82:	f840 1c28 	str.w	r1, [r0, #-40]
 8001d86:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d8a:	f841 2c2c 	str.w	r2, [r1, #-44]
 8001d8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d92:	f842 3c30 	str.w	r3, [r2, #-48]
 8001d96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d9a:	ed03 0a0d 	vstr	s0, [r3, #-52]	; 0xffffffcc
 8001d9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001da2:	ed43 0a0e 	vstr	s1, [r3, #-56]	; 0xffffffc8
    * suppression suggested there could be an edge except for the border. At
    * the border we say there can not be an edge because it makes the
    * follow_edges algorithm more efficient to not worry about tracking an
    * edge off the side of the image.
    ****************************************************************************/
    for (r = 0, pos = 0; r<rows; r++){
 8001da6:	2300      	movs	r3, #0
 8001da8:	4a7a      	ldr	r2, [pc, #488]	; (8001f94 <apply_hysteresis+0x228>)
 8001daa:	443a      	add	r2, r7
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	4a79      	ldr	r2, [pc, #484]	; (8001f98 <apply_hysteresis+0x22c>)
 8001db2:	443a      	add	r2, r7
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e040      	b.n	8001e3a <apply_hysteresis+0xce>
        for (c = 0; c<cols; c++, pos++){
 8001db8:	2300      	movs	r3, #0
 8001dba:	4a78      	ldr	r2, [pc, #480]	; (8001f9c <apply_hysteresis+0x230>)
 8001dbc:	443a      	add	r2, r7
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e02b      	b.n	8001e1a <apply_hysteresis+0xae>
            if (nms[pos] == POSSIBLE_EDGE) edge[pos] = POSSIBLE_EDGE;
 8001dc2:	4b75      	ldr	r3, [pc, #468]	; (8001f98 <apply_hysteresis+0x22c>)
 8001dc4:	443b      	add	r3, r7
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001dcc:	f852 2c28 	ldr.w	r2, [r2, #-40]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d109      	bne.n	8001dec <apply_hysteresis+0x80>
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <apply_hysteresis+0x22c>)
 8001dda:	443b      	add	r3, r7
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a70      	ldr	r2, [pc, #448]	; (8001fa0 <apply_hysteresis+0x234>)
 8001de0:	443a      	add	r2, r7
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	4413      	add	r3, r2
 8001de6:	2280      	movs	r2, #128	; 0x80
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e008      	b.n	8001dfe <apply_hysteresis+0x92>
            else edge[pos] = NOEDGE;
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <apply_hysteresis+0x22c>)
 8001dee:	443b      	add	r3, r7
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a6b      	ldr	r2, [pc, #428]	; (8001fa0 <apply_hysteresis+0x234>)
 8001df4:	443a      	add	r2, r7
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	4413      	add	r3, r2
 8001dfa:	22ff      	movs	r2, #255	; 0xff
 8001dfc:	701a      	strb	r2, [r3, #0]
        for (c = 0; c<cols; c++, pos++){
 8001dfe:	4b67      	ldr	r3, [pc, #412]	; (8001f9c <apply_hysteresis+0x230>)
 8001e00:	443b      	add	r3, r7
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <apply_hysteresis+0x230>)
 8001e08:	443a      	add	r2, r7
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b62      	ldr	r3, [pc, #392]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e0e:	443b      	add	r3, r7
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	3301      	adds	r3, #1
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e16:	443a      	add	r2, r7
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e1e:	4a5f      	ldr	r2, [pc, #380]	; (8001f9c <apply_hysteresis+0x230>)
 8001e20:	443a      	add	r2, r7
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbca      	blt.n	8001dc2 <apply_hysteresis+0x56>
    for (r = 0, pos = 0; r<rows; r++){
 8001e2c:	4b59      	ldr	r3, [pc, #356]	; (8001f94 <apply_hysteresis+0x228>)
 8001e2e:	443b      	add	r3, r7
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <apply_hysteresis+0x228>)
 8001e36:	443a      	add	r2, r7
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e3e:	4a55      	ldr	r2, [pc, #340]	; (8001f94 <apply_hysteresis+0x228>)
 8001e40:	443a      	add	r2, r7
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbb5      	blt.n	8001db8 <apply_hysteresis+0x4c>
        }
    }

    for (r = 0, pos = 0; r<rows; r++, pos += cols){
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	4a51      	ldr	r2, [pc, #324]	; (8001f94 <apply_hysteresis+0x228>)
 8001e50:	443a      	add	r2, r7
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	2300      	movs	r3, #0
 8001e56:	4a50      	ldr	r2, [pc, #320]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e58:	443a      	add	r2, r7
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	e029      	b.n	8001eb2 <apply_hysteresis+0x146>
        edge[pos] = NOEDGE;
 8001e5e:	4b4e      	ldr	r3, [pc, #312]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e60:	443b      	add	r3, r7
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a4e      	ldr	r2, [pc, #312]	; (8001fa0 <apply_hysteresis+0x234>)
 8001e66:	443a      	add	r2, r7
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	22ff      	movs	r2, #255	; 0xff
 8001e6e:	701a      	strb	r2, [r3, #0]
        edge[pos + cols - 1] = NOEDGE;
 8001e70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e74:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <apply_hysteresis+0x22c>)
 8001e76:	443a      	add	r2, r7
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b01      	subs	r3, #1
 8001e82:	4a47      	ldr	r2, [pc, #284]	; (8001fa0 <apply_hysteresis+0x234>)
 8001e84:	443a      	add	r2, r7
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	4413      	add	r3, r2
 8001e8a:	22ff      	movs	r2, #255	; 0xff
 8001e8c:	701a      	strb	r2, [r3, #0]
    for (r = 0, pos = 0; r<rows; r++, pos += cols){
 8001e8e:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <apply_hysteresis+0x228>)
 8001e90:	443b      	add	r3, r7
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	3301      	adds	r3, #1
 8001e96:	4a3f      	ldr	r2, [pc, #252]	; (8001f94 <apply_hysteresis+0x228>)
 8001e98:	443a      	add	r2, r7
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea0:	4a3d      	ldr	r2, [pc, #244]	; (8001f98 <apply_hysteresis+0x22c>)
 8001ea2:	443a      	add	r2, r7
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a3a      	ldr	r2, [pc, #232]	; (8001f98 <apply_hysteresis+0x22c>)
 8001eae:	443a      	add	r2, r7
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001eb6:	4a37      	ldr	r2, [pc, #220]	; (8001f94 <apply_hysteresis+0x228>)
 8001eb8:	443a      	add	r2, r7
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbcc      	blt.n	8001e5e <apply_hysteresis+0xf2>
    }
    pos = (rows - 1) * cols;
 8001ec4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ec8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ed2:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	4a2f      	ldr	r2, [pc, #188]	; (8001f98 <apply_hysteresis+0x22c>)
 8001edc:	443a      	add	r2, r7
 8001ede:	6013      	str	r3, [r2, #0]
    for (c = 0; c<cols; c++, pos++){
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <apply_hysteresis+0x230>)
 8001ee4:	443a      	add	r2, r7
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e01f      	b.n	8001f2a <apply_hysteresis+0x1be>
        edge[c] = NOEDGE;
 8001eea:	4b2c      	ldr	r3, [pc, #176]	; (8001f9c <apply_hysteresis+0x230>)
 8001eec:	443b      	add	r3, r7
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a2b      	ldr	r2, [pc, #172]	; (8001fa0 <apply_hysteresis+0x234>)
 8001ef2:	443a      	add	r2, r7
 8001ef4:	6812      	ldr	r2, [r2, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	22ff      	movs	r2, #255	; 0xff
 8001efa:	701a      	strb	r2, [r3, #0]
        edge[pos] = NOEDGE;
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <apply_hysteresis+0x22c>)
 8001efe:	443b      	add	r3, r7
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <apply_hysteresis+0x234>)
 8001f04:	443a      	add	r2, r7
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	4413      	add	r3, r2
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	701a      	strb	r2, [r3, #0]
    for (c = 0; c<cols; c++, pos++){
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <apply_hysteresis+0x230>)
 8001f10:	443b      	add	r3, r7
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <apply_hysteresis+0x230>)
 8001f18:	443a      	add	r2, r7
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <apply_hysteresis+0x22c>)
 8001f1e:	443b      	add	r3, r7
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	3301      	adds	r3, #1
 8001f24:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <apply_hysteresis+0x22c>)
 8001f26:	443a      	add	r2, r7
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f2e:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <apply_hysteresis+0x230>)
 8001f30:	443a      	add	r2, r7
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dbd6      	blt.n	8001eea <apply_hysteresis+0x17e>

    /****************************************************************************
    * Compute the histogram of the magnitude image. Then use the histogram to
    * compute hysteresis thresholds.
    ****************************************************************************/
    for (r = 0; r<32768; r++) hist[r] = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <apply_hysteresis+0x228>)
 8001f40:	443a      	add	r2, r7
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e011      	b.n	8001f6a <apply_hysteresis+0x1fe>
 8001f46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <apply_hysteresis+0x228>)
 8001f4e:	443b      	add	r3, r7
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	2200      	movs	r2, #0
 8001f58:	f843 2c20 	str.w	r2, [r3, #-32]
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <apply_hysteresis+0x228>)
 8001f5e:	443b      	add	r3, r7
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3301      	adds	r3, #1
 8001f64:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <apply_hysteresis+0x228>)
 8001f66:	443a      	add	r2, r7
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <apply_hysteresis+0x228>)
 8001f6c:	443b      	add	r3, r7
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f74:	dbe7      	blt.n	8001f46 <apply_hysteresis+0x1da>

//    struct timespec start;
    //clock_gettime(CLOCK_MONOTONIC, &start);

    for (r = 0, pos = 0; r<rows; r++){
 8001f76:	2300      	movs	r3, #0
 8001f78:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <apply_hysteresis+0x228>)
 8001f7a:	443a      	add	r2, r7
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <apply_hysteresis+0x22c>)
 8001f82:	443a      	add	r2, r7
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e050      	b.n	800202a <apply_hysteresis+0x2be>
        for (c = 0; c<cols; c++, pos++){
 8001f88:	2300      	movs	r3, #0
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <apply_hysteresis+0x230>)
 8001f8c:	443a      	add	r2, r7
 8001f8e:	6013      	str	r3, [r2, #0]
 8001f90:	e03b      	b.n	800200a <apply_hysteresis+0x29e>
 8001f92:	bf00      	nop
 8001f94:	00020034 	.word	0x00020034
 8001f98:	0002002c 	.word	0x0002002c
 8001f9c:	00020030 	.word	0x00020030
 8001fa0:	00020048 	.word	0x00020048
            if (edge[pos] == POSSIBLE_EDGE) hist[mag[pos]]++;
 8001fa4:	4b81      	ldr	r3, [pc, #516]	; (80021ac <apply_hysteresis+0x440>)
 8001fa6:	443b      	add	r3, r7
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a81      	ldr	r2, [pc, #516]	; (80021b0 <apply_hysteresis+0x444>)
 8001fac:	443a      	add	r2, r7
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	d11a      	bne.n	8001fee <apply_hysteresis+0x282>
 8001fb8:	4b7c      	ldr	r3, [pc, #496]	; (80021ac <apply_hysteresis+0x440>)
 8001fba:	443b      	add	r3, r7
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fc4:	f852 2c24 	ldr.w	r2, [r2, #-36]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	0093      	lsls	r3, r2, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001fde:	1c59      	adds	r1, r3, #1
 8001fe0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	0093      	lsls	r3, r2, #2
 8001fe8:	4403      	add	r3, r0
 8001fea:	f843 1c20 	str.w	r1, [r3, #-32]
        for (c = 0; c<cols; c++, pos++){
 8001fee:	4b71      	ldr	r3, [pc, #452]	; (80021b4 <apply_hysteresis+0x448>)
 8001ff0:	443b      	add	r3, r7
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	4a6f      	ldr	r2, [pc, #444]	; (80021b4 <apply_hysteresis+0x448>)
 8001ff8:	443a      	add	r2, r7
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	; (80021ac <apply_hysteresis+0x440>)
 8001ffe:	443b      	add	r3, r7
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a69      	ldr	r2, [pc, #420]	; (80021ac <apply_hysteresis+0x440>)
 8002006:	443a      	add	r2, r7
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800200e:	4a69      	ldr	r2, [pc, #420]	; (80021b4 <apply_hysteresis+0x448>)
 8002010:	443a      	add	r2, r7
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbc3      	blt.n	8001fa4 <apply_hysteresis+0x238>
    for (r = 0, pos = 0; r<rows; r++){
 800201c:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <apply_hysteresis+0x44c>)
 800201e:	443b      	add	r3, r7
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a64      	ldr	r2, [pc, #400]	; (80021b8 <apply_hysteresis+0x44c>)
 8002026:	443a      	add	r2, r7
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800202e:	4a62      	ldr	r2, [pc, #392]	; (80021b8 <apply_hysteresis+0x44c>)
 8002030:	443a      	add	r2, r7
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002038:	429a      	cmp	r2, r3
 800203a:	dba5      	blt.n	8001f88 <apply_hysteresis+0x21c>
    //printf("Hist loop in function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

    /****************************************************************************
    * Compute the number of pixels that passed the nonmaximal suppression.
    ****************************************************************************/
    for (r = 1, numedges = 0; r<32768; r++){
 800203c:	2301      	movs	r3, #1
 800203e:	4a5e      	ldr	r2, [pc, #376]	; (80021b8 <apply_hysteresis+0x44c>)
 8002040:	443a      	add	r2, r7
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	4a5d      	ldr	r2, [pc, #372]	; (80021bc <apply_hysteresis+0x450>)
 8002048:	443a      	add	r2, r7
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	e029      	b.n	80020a2 <apply_hysteresis+0x336>
        if (hist[r] != 0) maximum_mag = r;
 800204e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002052:	461a      	mov	r2, r3
 8002054:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <apply_hysteresis+0x44c>)
 8002056:	443b      	add	r3, r7
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <apply_hysteresis+0x306>
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <apply_hysteresis+0x44c>)
 8002068:	443b      	add	r3, r7
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a54      	ldr	r2, [pc, #336]	; (80021c0 <apply_hysteresis+0x454>)
 800206e:	443a      	add	r2, r7
 8002070:	8013      	strh	r3, [r2, #0]
        numedges += hist[r];
 8002072:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002076:	461a      	mov	r2, r3
 8002078:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <apply_hysteresis+0x44c>)
 800207a:	443b      	add	r3, r7
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002086:	4a4d      	ldr	r2, [pc, #308]	; (80021bc <apply_hysteresis+0x450>)
 8002088:	443a      	add	r2, r7
 800208a:	6812      	ldr	r2, [r2, #0]
 800208c:	4413      	add	r3, r2
 800208e:	4a4b      	ldr	r2, [pc, #300]	; (80021bc <apply_hysteresis+0x450>)
 8002090:	443a      	add	r2, r7
 8002092:	6013      	str	r3, [r2, #0]
    for (r = 1, numedges = 0; r<32768; r++){
 8002094:	4b48      	ldr	r3, [pc, #288]	; (80021b8 <apply_hysteresis+0x44c>)
 8002096:	443b      	add	r3, r7
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	3301      	adds	r3, #1
 800209c:	4a46      	ldr	r2, [pc, #280]	; (80021b8 <apply_hysteresis+0x44c>)
 800209e:	443a      	add	r2, r7
 80020a0:	6013      	str	r3, [r2, #0]
 80020a2:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <apply_hysteresis+0x44c>)
 80020a4:	443b      	add	r3, r7
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ac:	dbcf      	blt.n	800204e <apply_hysteresis+0x2e2>
    }

    highcount = (int)(numedges * thigh + 0.5);
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <apply_hysteresis+0x450>)
 80020b0:	443b      	add	r3, r7
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020c0:	ed53 7a0e 	vldr	s15, [r3, #-56]	; 0xffffffc8
 80020c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020cc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80020d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80020d8:	ee17 3a90 	vmov	r3, s15
 80020dc:	4a39      	ldr	r2, [pc, #228]	; (80021c4 <apply_hysteresis+0x458>)
 80020de:	443a      	add	r2, r7
 80020e0:	6013      	str	r3, [r2, #0]
    * "A Computational Approach to Edge Detection" that "The ratio of the
    * high to low threshold in the implementation is in the range two or three
    * to one." That means that in terms of this implementation, we should
    * choose tlow ~= 0.5 or 0.33333.
    ****************************************************************************/
    r = 1;
 80020e2:	2301      	movs	r3, #1
 80020e4:	4a34      	ldr	r2, [pc, #208]	; (80021b8 <apply_hysteresis+0x44c>)
 80020e6:	443a      	add	r2, r7
 80020e8:	6013      	str	r3, [r2, #0]
    numedges = hist[1];
 80020ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020ee:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80020f2:	4a32      	ldr	r2, [pc, #200]	; (80021bc <apply_hysteresis+0x450>)
 80020f4:	443a      	add	r2, r7
 80020f6:	6013      	str	r3, [r2, #0]
    while ((r<(maximum_mag - 1)) && (numedges < highcount)){
 80020f8:	e017      	b.n	800212a <apply_hysteresis+0x3be>
        r++;
 80020fa:	4b2f      	ldr	r3, [pc, #188]	; (80021b8 <apply_hysteresis+0x44c>)
 80020fc:	443b      	add	r3, r7
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	4a2d      	ldr	r2, [pc, #180]	; (80021b8 <apply_hysteresis+0x44c>)
 8002104:	443a      	add	r2, r7
 8002106:	6013      	str	r3, [r2, #0]
        numedges += hist[r];
 8002108:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800210c:	461a      	mov	r2, r3
 800210e:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <apply_hysteresis+0x44c>)
 8002110:	443b      	add	r3, r7
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800211c:	4a27      	ldr	r2, [pc, #156]	; (80021bc <apply_hysteresis+0x450>)
 800211e:	443a      	add	r2, r7
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	4413      	add	r3, r2
 8002124:	4a25      	ldr	r2, [pc, #148]	; (80021bc <apply_hysteresis+0x450>)
 8002126:	443a      	add	r2, r7
 8002128:	6013      	str	r3, [r2, #0]
    while ((r<(maximum_mag - 1)) && (numedges < highcount)){
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <apply_hysteresis+0x454>)
 800212c:	443b      	add	r3, r7
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	3b01      	subs	r3, #1
 8002134:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <apply_hysteresis+0x44c>)
 8002136:	443a      	add	r2, r7
 8002138:	6812      	ldr	r2, [r2, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	da07      	bge.n	800214e <apply_hysteresis+0x3e2>
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <apply_hysteresis+0x450>)
 8002140:	443b      	add	r3, r7
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <apply_hysteresis+0x458>)
 8002146:	443b      	add	r3, r7
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	dbd5      	blt.n	80020fa <apply_hysteresis+0x38e>
    }
    highthreshold = r;
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <apply_hysteresis+0x44c>)
 8002150:	443b      	add	r3, r7
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <apply_hysteresis+0x45c>)
 8002156:	443a      	add	r2, r7
 8002158:	6013      	str	r3, [r2, #0]
    lowthreshold = (int)(highthreshold * tlow + 0.5);
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <apply_hysteresis+0x45c>)
 800215c:	443b      	add	r3, r7
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002168:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800216c:	ed53 7a0d 	vldr	s15, [r3, #-52]	; 0xffffffcc
 8002170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002174:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002178:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800217c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002180:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002184:	ee17 3a90 	vmov	r3, s15
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <apply_hysteresis+0x460>)
 800218a:	443a      	add	r2, r7
 800218c:	6013      	str	r3, [r2, #0]

    /****************************************************************************
    * This loop looks for pixels above the highthreshold to locate edges and
    * then calls follow_edges to continue the edge.
    ****************************************************************************/
    for (r = 0, pos = 0; r<rows; r++){
 800218e:	2300      	movs	r3, #0
 8002190:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <apply_hysteresis+0x44c>)
 8002192:	443a      	add	r2, r7
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	2300      	movs	r3, #0
 8002198:	4a04      	ldr	r2, [pc, #16]	; (80021ac <apply_hysteresis+0x440>)
 800219a:	443a      	add	r2, r7
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e073      	b.n	8002288 <apply_hysteresis+0x51c>
        for (c = 0; c<cols; c++, pos++){
 80021a0:	2300      	movs	r3, #0
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <apply_hysteresis+0x448>)
 80021a4:	443a      	add	r2, r7
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	e05e      	b.n	8002268 <apply_hysteresis+0x4fc>
 80021aa:	bf00      	nop
 80021ac:	0002002c 	.word	0x0002002c
 80021b0:	00020048 	.word	0x00020048
 80021b4:	00020030 	.word	0x00020030
 80021b8:	00020034 	.word	0x00020034
 80021bc:	00020028 	.word	0x00020028
 80021c0:	00020026 	.word	0x00020026
 80021c4:	00020020 	.word	0x00020020
 80021c8:	0002001c 	.word	0x0002001c
 80021cc:	00020018 	.word	0x00020018
            if ((edge[pos] == POSSIBLE_EDGE) && (mag[pos] >= highthreshold)){
 80021d0:	4b59      	ldr	r3, [pc, #356]	; (8002338 <apply_hysteresis+0x5cc>)
 80021d2:	443b      	add	r3, r7
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a59      	ldr	r2, [pc, #356]	; (800233c <apply_hysteresis+0x5d0>)
 80021d8:	443a      	add	r2, r7
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	4413      	add	r3, r2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d133      	bne.n	800224c <apply_hysteresis+0x4e0>
 80021e4:	4b54      	ldr	r3, [pc, #336]	; (8002338 <apply_hysteresis+0x5cc>)
 80021e6:	443b      	add	r3, r7
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80021f0:	f852 2c24 	ldr.w	r2, [r2, #-36]
 80021f4:	4413      	add	r3, r2
 80021f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fa:	461a      	mov	r2, r3
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <apply_hysteresis+0x5d4>)
 80021fe:	443b      	add	r3, r7
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4293      	cmp	r3, r2
 8002204:	dc22      	bgt.n	800224c <apply_hysteresis+0x4e0>
                edge[pos] = EDGE;
 8002206:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <apply_hysteresis+0x5cc>)
 8002208:	443b      	add	r3, r7
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a4b      	ldr	r2, [pc, #300]	; (800233c <apply_hysteresis+0x5d0>)
 800220e:	443a      	add	r2, r7
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4413      	add	r3, r2
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
                follow_edges((edge + pos), (mag + pos), lowthreshold, cols);
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <apply_hysteresis+0x5cc>)
 800221a:	443b      	add	r3, r7
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a47      	ldr	r2, [pc, #284]	; (800233c <apply_hysteresis+0x5d0>)
 8002220:	443a      	add	r2, r7
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	18d0      	adds	r0, r2, r3
 8002226:	4b44      	ldr	r3, [pc, #272]	; (8002338 <apply_hysteresis+0x5cc>)
 8002228:	443b      	add	r3, r7
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002232:	f852 2c24 	ldr.w	r2, [r2, #-36]
 8002236:	18d1      	adds	r1, r2, r3
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <apply_hysteresis+0x5d8>)
 800223a:	443b      	add	r3, r7
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b21a      	sxth	r2, r3
 8002240:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002244:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002248:	f7ff fd24 	bl	8001c94 <follow_edges>
        for (c = 0; c<cols; c++, pos++){
 800224c:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <apply_hysteresis+0x5dc>)
 800224e:	443b      	add	r3, r7
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3301      	adds	r3, #1
 8002254:	4a3c      	ldr	r2, [pc, #240]	; (8002348 <apply_hysteresis+0x5dc>)
 8002256:	443a      	add	r2, r7
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <apply_hysteresis+0x5cc>)
 800225c:	443b      	add	r3, r7
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	4a35      	ldr	r2, [pc, #212]	; (8002338 <apply_hysteresis+0x5cc>)
 8002264:	443a      	add	r2, r7
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800226c:	4a36      	ldr	r2, [pc, #216]	; (8002348 <apply_hysteresis+0x5dc>)
 800226e:	443a      	add	r2, r7
 8002270:	6812      	ldr	r2, [r2, #0]
 8002272:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002276:	429a      	cmp	r2, r3
 8002278:	dbaa      	blt.n	80021d0 <apply_hysteresis+0x464>
    for (r = 0, pos = 0; r<rows; r++){
 800227a:	4b34      	ldr	r3, [pc, #208]	; (800234c <apply_hysteresis+0x5e0>)
 800227c:	443b      	add	r3, r7
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a32      	ldr	r2, [pc, #200]	; (800234c <apply_hysteresis+0x5e0>)
 8002284:	443a      	add	r2, r7
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800228c:	4a2f      	ldr	r2, [pc, #188]	; (800234c <apply_hysteresis+0x5e0>)
 800228e:	443a      	add	r2, r7
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002296:	429a      	cmp	r2, r3
 8002298:	db82      	blt.n	80021a0 <apply_hysteresis+0x434>
    }

    /****************************************************************************
    * Set all the remaining possible edges to non-edges.
    ****************************************************************************/
    for (r = 0, pos = 0; r<rows; r++){
 800229a:	2300      	movs	r3, #0
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <apply_hysteresis+0x5e0>)
 800229e:	443a      	add	r2, r7
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <apply_hysteresis+0x5cc>)
 80022a6:	443a      	add	r2, r7
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e035      	b.n	8002318 <apply_hysteresis+0x5ac>
        for (c = 0; c<cols; c++, pos++) if (edge[pos] != EDGE) edge[pos] = NOEDGE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	4a26      	ldr	r2, [pc, #152]	; (8002348 <apply_hysteresis+0x5dc>)
 80022b0:	443a      	add	r2, r7
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	e020      	b.n	80022f8 <apply_hysteresis+0x58c>
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <apply_hysteresis+0x5cc>)
 80022b8:	443b      	add	r3, r7
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1f      	ldr	r2, [pc, #124]	; (800233c <apply_hysteresis+0x5d0>)
 80022be:	443a      	add	r2, r7
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <apply_hysteresis+0x570>
 80022ca:	4b1b      	ldr	r3, [pc, #108]	; (8002338 <apply_hysteresis+0x5cc>)
 80022cc:	443b      	add	r3, r7
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1a      	ldr	r2, [pc, #104]	; (800233c <apply_hysteresis+0x5d0>)
 80022d2:	443a      	add	r2, r7
 80022d4:	6812      	ldr	r2, [r2, #0]
 80022d6:	4413      	add	r3, r2
 80022d8:	22ff      	movs	r2, #255	; 0xff
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <apply_hysteresis+0x5dc>)
 80022de:	443b      	add	r3, r7
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4a18      	ldr	r2, [pc, #96]	; (8002348 <apply_hysteresis+0x5dc>)
 80022e6:	443a      	add	r2, r7
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <apply_hysteresis+0x5cc>)
 80022ec:	443b      	add	r3, r7
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	4a11      	ldr	r2, [pc, #68]	; (8002338 <apply_hysteresis+0x5cc>)
 80022f4:	443a      	add	r2, r7
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022fc:	4a12      	ldr	r2, [pc, #72]	; (8002348 <apply_hysteresis+0x5dc>)
 80022fe:	443a      	add	r2, r7
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002306:	429a      	cmp	r2, r3
 8002308:	dbd5      	blt.n	80022b6 <apply_hysteresis+0x54a>
    for (r = 0, pos = 0; r<rows; r++){
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <apply_hysteresis+0x5e0>)
 800230c:	443b      	add	r3, r7
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <apply_hysteresis+0x5e0>)
 8002314:	443a      	add	r2, r7
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800231c:	4a0b      	ldr	r2, [pc, #44]	; (800234c <apply_hysteresis+0x5e0>)
 800231e:	443a      	add	r2, r7
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002326:	429a      	cmp	r2, r3
 8002328:	dbc0      	blt.n	80022ac <apply_hysteresis+0x540>
    }
}
 800232a:	bf00      	nop
 800232c:	bf00      	nop
 800232e:	f507 3700 	add.w	r7, r7, #131072	; 0x20000
 8002332:	373c      	adds	r7, #60	; 0x3c
 8002334:	46bd      	mov	sp, r7
 8002336:	bd90      	pop	{r4, r7, pc}
 8002338:	0002002c 	.word	0x0002002c
 800233c:	00020048 	.word	0x00020048
 8002340:	0002001c 	.word	0x0002001c
 8002344:	00020018 	.word	0x00020018
 8002348:	00020030 	.word	0x00020030
 800234c:	00020034 	.word	0x00020034

08002350 <non_max_supp>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void non_max_supp(short *mag, short *gradx, short *grady, int nrows, int ncols,
    unsigned char *result)
{
 8002350:	b480      	push	{r7}
 8002352:	b097      	sub	sp, #92	; 0x5c
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
 800235c:	603b      	str	r3, [r7, #0]


    /****************************************************************************
    * Zero the edges of the result image.
    ****************************************************************************/
    for (count = 0, resultrowptr = result, resultptr = result + ncols*(nrows - 1);
 800235e:	2300      	movs	r3, #0
 8002360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	3b01      	subs	r3, #1
 800236a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	461a      	mov	r2, r3
 8002372:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002374:	4413      	add	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	e00f      	b.n	800239a <non_max_supp+0x4a>
        count<ncols; resultptr++, resultrowptr++, count++){
        *resultrowptr = *resultptr = (unsigned char)0;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	701a      	strb	r2, [r3, #0]
        count<ncols; resultptr++, resultrowptr++, count++){
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	3301      	adds	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002396:	3301      	adds	r3, #1
 8002398:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (count = 0, resultrowptr = result, resultptr = result + ncols*(nrows - 1);
 800239a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800239c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800239e:	429a      	cmp	r2, r3
 80023a0:	dbeb      	blt.n	800237a <non_max_supp+0x2a>
    }

    for (count = 0, resultptr = result, resultrowptr = result + ncols - 1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023a8:	61bb      	str	r3, [r7, #24]
 80023aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023ac:	3b01      	subs	r3, #1
 80023ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80023b0:	4413      	add	r3, r2
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	e011      	b.n	80023da <non_max_supp+0x8a>
        count<nrows; count++, resultptr += ncols, resultrowptr += ncols){
        *resultptr = *resultrowptr = (unsigned char)0;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	701a      	strb	r2, [r3, #0]
        count<nrows; count++, resultptr += ncols, resultrowptr += ncols){
 80023c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c6:	3301      	adds	r3, #1
 80023c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4413      	add	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	4413      	add	r3, r2
 80023d8:	61fb      	str	r3, [r7, #28]
    for (count = 0, resultptr = result, resultrowptr = result + ncols - 1;
 80023da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	dbe9      	blt.n	80023b6 <non_max_supp+0x66>
  clock_gettime(CLOCK_MONOTONIC, &start);
*/
    /****************************************************************************
    * Suppress non-maximum points.
    ****************************************************************************/
    for (rowcount = 1, magrowptr = mag + ncols + 1, gxrowptr = gradx + ncols + 1,
 80023e2:	2301      	movs	r3, #1
 80023e4:	657b      	str	r3, [r7, #84]	; 0x54
 80023e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023e8:	3301      	adds	r3, #1
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f4:	3301      	adds	r3, #1
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4413      	add	r3, r2
 80023fc:	643b      	str	r3, [r7, #64]	; 0x40
        gyrowptr = grady + ncols + 1, resultrowptr = result + ncols + 1;
 80023fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002400:	3301      	adds	r3, #1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	63bb      	str	r3, [r7, #56]	; 0x38
 800240a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800240c:	3301      	adds	r3, #1
 800240e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002410:	4413      	add	r3, r2
 8002412:	61fb      	str	r3, [r7, #28]
    for (rowcount = 1, magrowptr = mag + ncols + 1, gxrowptr = gradx + ncols + 1,
 8002414:	e36e      	b.n	8002af4 <non_max_supp+0x7a4>
        rowcount<nrows - 2;
    rowcount++, magrowptr += ncols, gyrowptr += ncols, gxrowptr += ncols,
        resultrowptr += ncols){
        for (colcount = 1, magptr = magrowptr, gxptr = gxrowptr, gyptr = gyrowptr,
 8002416:	2301      	movs	r3, #1
 8002418:	653b      	str	r3, [r7, #80]	; 0x50
 800241a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241c:	647b      	str	r3, [r7, #68]	; 0x44
 800241e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
            resultptr = resultrowptr; colcount<ncols - 2;
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	61bb      	str	r3, [r7, #24]
        for (colcount = 1, magptr = magrowptr, gxptr = gxrowptr, gyptr = gyrowptr,
 800242a:	e347      	b.n	8002abc <non_max_supp+0x76c>
            colcount++, magptr++, gxptr++, gyptr++, resultptr++){
            m00 = *magptr;
 800242c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	82fb      	strh	r3, [r7, #22]
            if (m00 == 0){
 8002432:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <non_max_supp+0xf2>
                *resultptr = (unsigned char)NOEDGE;
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	22ff      	movs	r2, #255	; 0xff
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	e026      	b.n	8002490 <non_max_supp+0x140>
            }
            else{
                xperp = -(gx = *gxptr) / ((float)m00);
 8002442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	867b      	strh	r3, [r7, #50]	; 0x32
 8002448:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800244c:	425b      	negs	r3, r3
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002456:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002466:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                yperp = (gy = *gyptr) / ((float)m00);
 800246a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	863b      	strh	r3, [r7, #48]	; 0x30
 8002470:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800247c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002480:	ee07 3a90 	vmov	s15, r3
 8002484:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248c:	edc7 7a08 	vstr	s15, [r7, #32]
            }

            if (gx >= 0){
 8002490:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8002494:	2b00      	cmp	r3, #0
 8002496:	f2c0 8170 	blt.w	800277a <non_max_supp+0x42a>
                if (gy >= 0){
 800249a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f2c0 80b4 	blt.w	800260c <non_max_supp+0x2bc>
                    if (gx >= gy)
 80024a4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80024a8:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80024ac:	429a      	cmp	r2, r3
 80024ae:	db53      	blt.n	8002558 <non_max_supp+0x208>
                    {
                        /* 111 */
                        /* Left point */
                        z1 = *(magptr - 1);
 80024b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b2:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80024b6:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols - 1);
 80024b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024c4:	4413      	add	r3, r2
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	827b      	strh	r3, [r7, #18]

                        mag1 = (m00 - z1)*xperp + (z2 - z1)*yperp;
 80024ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80024ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80024e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	ee07 3a90 	vmov	s15, r3
 80024f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80024fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002502:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr + 1);
 8002506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002508:	885b      	ldrh	r3, [r3, #2]
 800250a:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols + 1);
 800250c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800250e:	3301      	adds	r3, #1
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002514:	4413      	add	r3, r2
 8002516:	881b      	ldrh	r3, [r3, #0]
 8002518:	827b      	strh	r3, [r7, #18]

                        mag2 = (m00 - z1)*xperp + (z2 - z1)*yperp;
 800251a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800251e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800252c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002530:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002534:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002538:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002546:	edd7 7a08 	vldr	s15, [r7, #32]
 800254a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800254e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002552:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8002556:	e282      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                    else
                    {
                        /* 110 */
                        /* Left point */
                        z1 = *(magptr - ncols);
 8002558:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	425b      	negs	r3, r3
 800255e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002560:	4413      	add	r3, r2
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols - 1);
 8002566:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002568:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002572:	4413      	add	r3, r2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	827b      	strh	r3, [r7, #18]

                        mag1 = (z1 - z2)*xperp + (z1 - m00)*yperp;
 8002578:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800257c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800258e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002592:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002596:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80025a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr + ncols);
 80025b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ba:	4413      	add	r3, r2
 80025bc:	881b      	ldrh	r3, [r3, #0]
 80025be:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols + 1);
 80025c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025c2:	3301      	adds	r3, #1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025c8:	4413      	add	r3, r2
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	827b      	strh	r3, [r7, #18]

                        mag2 = (z1 - z2)*xperp + (z1 - m00)*yperp;
 80025ce:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80025d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80025ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80025fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80025fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002606:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800260a:	e228      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                }
                else
                {
                    if (gx >= -gy)
 800260c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002610:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002614:	425b      	negs	r3, r3
 8002616:	429a      	cmp	r2, r3
 8002618:	db54      	blt.n	80026c4 <non_max_supp+0x374>
                    {
                        /* 101 */
                        /* Left point */
                        z1 = *(magptr - 1);
 800261a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8002620:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols - 1);
 8002622:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002624:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002628:	4413      	add	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800262e:	4413      	add	r3, r2
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	827b      	strh	r3, [r7, #18]

                        mag1 = (m00 - z1)*xperp + (z1 - z2)*yperp;
 8002634:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002638:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002646:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800264a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800264e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002652:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002660:	edd7 7a08 	vldr	s15, [r7, #32]
 8002664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr + 1);
 8002670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002672:	885b      	ldrh	r3, [r3, #2]
 8002674:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols + 1);
 8002676:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002678:	f1c3 0301 	rsb	r3, r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002680:	4413      	add	r3, r2
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	827b      	strh	r3, [r7, #18]

                        mag2 = (m00 - z1)*xperp + (z1 - z2)*yperp;
 8002686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800268a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	ee07 3a90 	vmov	s15, r3
 8002694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002698:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800269c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	ee07 3a90 	vmov	s15, r3
 80026ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80026b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80026c2:	e1cc      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                    else
                    {
                        /* 100 */
                        /* Left point */
                        z1 = *(magptr + ncols);
 80026c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026ca:	4413      	add	r3, r2
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols - 1);
 80026d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80026d6:	4413      	add	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026dc:	4413      	add	r3, r2
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	827b      	strh	r3, [r7, #18]

                        mag1 = (z1 - z2)*xperp + (m00 - z1)*yperp;
 80026e2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80026e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	ee07 3a90 	vmov	s15, r3
 80026f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002700:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800270e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr - ncols);
 800271e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	425b      	negs	r3, r3
 8002724:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002726:	4413      	add	r3, r2
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols + 1);
 800272c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800272e:	f1c3 0301 	rsb	r3, r3, #1
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002736:	4413      	add	r3, r2
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	827b      	strh	r3, [r7, #18]

                        mag2 = (z1 - z2)*xperp + (m00 - z1)*yperp;
 800273c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	ee07 3a90 	vmov	s15, r3
 800274a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800274e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002756:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800275a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002768:	edd7 7a08 	vldr	s15, [r7, #32]
 800276c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8002778:	e171      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                }
            }
            else
            {
                if ((gy = *gyptr) >= 0)
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	863b      	strh	r3, [r7, #48]	; 0x30
 8002780:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002784:	2b00      	cmp	r3, #0
 8002786:	f2c0 80b7 	blt.w	80028f8 <non_max_supp+0x5a8>
                {
                    if (-gx >= gy)
 800278a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800278e:	425a      	negs	r2, r3
 8002790:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002794:	429a      	cmp	r2, r3
 8002796:	db54      	blt.n	8002842 <non_max_supp+0x4f2>
                    {
                        /* 011 */
                        /* Left point */
                        z1 = *(magptr + 1);
 8002798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800279a:	885b      	ldrh	r3, [r3, #2]
 800279c:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols + 1);
 800279e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a0:	f1c3 0301 	rsb	r3, r3, #1
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027a8:	4413      	add	r3, r2
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	827b      	strh	r3, [r7, #18]

                        mag1 = (z1 - m00)*xperp + (z2 - z1)*yperp;
 80027ae:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80027b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027da:	edd7 7a08 	vldr	s15, [r7, #32]
 80027de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr - 1);
 80027ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ec:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80027f0:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols - 1);
 80027f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80027f8:	4413      	add	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	827b      	strh	r3, [r7, #18]

                        mag2 = (z1 - m00)*xperp + (z2 - z1)*yperp;
 8002804:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002808:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002816:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800281a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800281e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002822:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	ee07 3a90 	vmov	s15, r3
 800282c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002830:	edd7 7a08 	vldr	s15, [r7, #32]
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 8002840:	e10d      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                    else
                    {
                        /* 010 */
                        /* Left point */
                        z1 = *(magptr - ncols);
 8002842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	425b      	negs	r3, r3
 8002848:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols + 1);
 8002850:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002852:	f1c3 0301 	rsb	r3, r3, #1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800285a:	4413      	add	r3, r2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	827b      	strh	r3, [r7, #18]

                        mag1 = (z2 - z1)*xperp + (z1 - m00)*yperp;
 8002860:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002864:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002872:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800287a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800287e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	ee07 3a90 	vmov	s15, r3
 8002888:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800288c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr + ncols);
 800289c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028a2:	4413      	add	r3, r2
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols - 1);
 80028a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80028ae:	4413      	add	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028b4:	4413      	add	r3, r2
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	827b      	strh	r3, [r7, #18]

                        mag2 = (z2 - z1)*xperp + (z1 - m00)*yperp;
 80028ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80028be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	ee07 3a90 	vmov	s15, r3
 80028c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80028d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80028ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80028f6:	e0b2      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                }
                else
                {
                    if (-gx > -gy)
 80028f8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80028fc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002900:	429a      	cmp	r2, r3
 8002902:	da53      	bge.n	80029ac <non_max_supp+0x65c>
                    {
                        /* 001 */
                        /* Left point */
                        z1 = *(magptr + 1);
 8002904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002906:	885b      	ldrh	r3, [r3, #2]
 8002908:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols + 1);
 800290a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800290c:	3301      	adds	r3, #1
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002912:	4413      	add	r3, r2
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	827b      	strh	r3, [r7, #18]

                        mag1 = (z1 - m00)*xperp + (z1 - z2)*yperp;
 8002918:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800291c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800292e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002932:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002936:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	ee07 3a90 	vmov	s15, r3
 8002940:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002944:	edd7 7a08 	vldr	s15, [r7, #32]
 8002948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr - 1);
 8002954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002956:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 800295a:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols - 1);
 800295c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800295e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002962:	1a9b      	subs	r3, r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002968:	4413      	add	r3, r2
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	827b      	strh	r3, [r7, #18]

                        mag2 = (z1 - m00)*xperp + (z1 - z2)*yperp;
 800296e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002972:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	ee07 3a90 	vmov	s15, r3
 800297c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002980:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002988:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800298c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800299a:	edd7 7a08 	vldr	s15, [r7, #32]
 800299e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 80029aa:	e058      	b.n	8002a5e <non_max_supp+0x70e>
                    }
                    else
                    {
                        /* 000 */
                        /* Left point */
                        z1 = *(magptr + ncols);
 80029ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b2:	4413      	add	r3, r2
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr + ncols + 1);
 80029b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029ba:	3301      	adds	r3, #1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029c0:	4413      	add	r3, r2
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	827b      	strh	r3, [r7, #18]

                        mag1 = (z2 - z1)*xperp + (m00 - z1)*yperp;
 80029c6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80029ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80029e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80029f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

                        /* Right point */
                        z1 = *(magptr - ncols);
 8002a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	425b      	negs	r3, r3
 8002a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a0a:	4413      	add	r3, r2
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	82bb      	strh	r3, [r7, #20]
                        z2 = *(magptr - ncols - 1);
 8002a10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a12:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a1c:	4413      	add	r3, r2
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	827b      	strh	r3, [r7, #18]

                        mag2 = (z2 - z1)*xperp + (m00 - z1)*yperp;
 8002a22:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002a26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	ee07 3a90 	vmov	s15, r3
 8002a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002a40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a4e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
                }
            }

            /* Now determine if the current point is a maximum point */

            if ((mag1 > 0.0) || (mag2 > 0.0))
 8002a5e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	dc06      	bgt.n	8002a7a <non_max_supp+0x72a>
 8002a6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a78:	dd03      	ble.n	8002a82 <non_max_supp+0x732>
            {
                *resultptr = (unsigned char)NOEDGE;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e00d      	b.n	8002a9e <non_max_supp+0x74e>
            }
            else
            {
                if (mag2 == 0.0)
 8002a82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a86:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8e:	d103      	bne.n	8002a98 <non_max_supp+0x748>
                    *resultptr = (unsigned char)NOEDGE;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	22ff      	movs	r2, #255	; 0xff
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e002      	b.n	8002a9e <non_max_supp+0x74e>
                else
                    *resultptr = (unsigned char)POSSIBLE_EDGE;
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	701a      	strb	r2, [r3, #0]
            colcount++, magptr++, gxptr++, gyptr++, resultptr++){
 8002a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	653b      	str	r3, [r7, #80]	; 0x50
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8002aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aac:	3302      	adds	r3, #2
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	61bb      	str	r3, [r7, #24]
            resultptr = resultrowptr; colcount<ncols - 2;
 8002abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002abe:	3b02      	subs	r3, #2
        for (colcount = 1, magptr = magrowptr, gxptr = gxrowptr, gyptr = gyrowptr,
 8002ac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	f6ff acb2 	blt.w	800242c <non_max_supp+0xdc>
    rowcount++, magrowptr += ncols, gyrowptr += ncols, gxrowptr += ncols,
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aca:	3301      	adds	r3, #1
 8002acc:	657b      	str	r3, [r7, #84]	; 0x54
 8002ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ad4:	4413      	add	r3, r2
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ade:	4413      	add	r3, r2
 8002ae0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ae8:	4413      	add	r3, r2
 8002aea:	643b      	str	r3, [r7, #64]	; 0x40
        resultrowptr += ncols){
 8002aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	61fb      	str	r3, [r7, #28]
        rowcount<nrows - 2;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	3b02      	subs	r3, #2
    for (rowcount = 1, magrowptr = mag + ncols + 1, gxrowptr = gradx + ncols + 1,
 8002af8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002afa:	429a      	cmp	r2, r3
 8002afc:	f6ff ac8b 	blt.w	8002416 <non_max_supp+0xc6>
        }
    }

  //  printf("Function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	375c      	adds	r7, #92	; 0x5c
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <canny>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void canny(unsigned char *image, int rows, int cols, float sigma,
    float tlow, float thigh, unsigned char **edge, char *fname)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b090      	sub	sp, #64	; 0x40
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	61f8      	str	r0, [r7, #28]
 8002b18:	61b9      	str	r1, [r7, #24]
 8002b1a:	617a      	str	r2, [r7, #20]
 8002b1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002b20:	edc7 0a03 	vstr	s1, [r7, #12]
 8002b24:	ed87 1a02 	vstr	s2, [r7, #8]
 8002b28:	607b      	str	r3, [r7, #4]
    * Perform gaussian smoothing on the image using the input standard
    * deviation.
    ****************************************************************************/
    if (CANNY_LIB_VERBOSE) printf("Smoothing the image using a gaussian kernel.\n");

    gaussian_smooth(image, rows, cols, sigma, &smoothedim);
 8002b2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002b2e:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	69b9      	ldr	r1, [r7, #24]
 8002b36:	69f8      	ldr	r0, [r7, #28]
 8002b38:	f000 fa36 	bl	8002fa8 <gaussian_smooth>

    /****************************************************************************
    * Compute the first derivative in the x and y directions.
    ****************************************************************************/
    if (CANNY_LIB_VERBOSE) printf("Computing the X and Y first derivatives.\n");
    derrivative_x_y(smoothedim, rows, cols, &delta_x, &delta_y);
 8002b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b3e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	69b9      	ldr	r1, [r7, #24]
 8002b4e:	f000 f8f9 	bl	8002d44 <derrivative_x_y>

    free(smoothedim);
 8002b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b54:	4618      	mov	r0, r3
 8002b56:	f007 fd3f 	bl	800a5d8 <free>
    /****************************************************************************
    * Compute the magnitude of the gradient.
    ****************************************************************************/
    if (CANNY_LIB_VERBOSE) printf("Computing the magnitude of the gradient.\n");

    magnitude_x_y(delta_x, delta_y, rows, cols, &magnitude);
 8002b5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	f000 f864 	bl	8002c34 <magnitude_x_y>
    /****************************************************************************
    * Perform non-maximal suppression.
    ****************************************************************************/
    if (CANNY_LIB_VERBOSE) printf("Doing the non-maximal suppression.\n");

    if ((nms = (unsigned char *)calloc(rows*cols, sizeof(unsigned char))) == NULL){
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	2101      	movs	r1, #1
 8002b76:	4618      	mov	r0, r3
 8002b78:	f007 fa40 	bl	8009ffc <calloc>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <canny+0x8c>
        fprintf(stderr, "Error allocating the nms image.\n");
 8002b86:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <canny+0x118>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4826      	ldr	r0, [pc, #152]	; (8002c2c <canny+0x11c>)
 8002b92:	f007 fc7f 	bl	800a494 <fwrite>
        exit(1);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f007 fa3e 	bl	800a018 <exit>
    }

    non_max_supp(magnitude, delta_x, delta_y, rows, cols, nms);
 8002b9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f7ff fbd0 	bl	8002350 <non_max_supp>

    free(delta_x);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f007 fd10 	bl	800a5d8 <free>
    free(delta_y);
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f007 fd0c 	bl	800a5d8 <free>
    /****************************************************************************
    * Use hysteresis to mark the edge pixels.
    ****************************************************************************/
    if (CANNY_LIB_VERBOSE) printf("Doing hysteresis thresholding.\n");

    if ((*edge = (unsigned char *)calloc(rows*cols, sizeof(unsigned char))) == NULL){
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f007 fa16 	bl	8009ffc <calloc>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <canny+0xe6>
        fprintf(stderr, "Error allocating the edge image.\n");
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <canny+0x118>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2221      	movs	r2, #33	; 0x21
 8002be8:	2101      	movs	r1, #1
 8002bea:	4811      	ldr	r0, [pc, #68]	; (8002c30 <canny+0x120>)
 8002bec:	f007 fc52 	bl	800a494 <fwrite>
        exit(1);
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f007 fa11 	bl	800a018 <exit>
    }

    apply_hysteresis(magnitude, nms, rows, cols, tlow, thigh, *edge);
 8002bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c02:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002c0c:	f7ff f8ae 	bl	8001d6c <apply_hysteresis>
    /****************************************************************************
    * Free all of the memory that we allocated except for the edge image that
    * is still being used to store out result.
    ****************************************************************************/

    free(magnitude);
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f007 fce0 	bl	800a5d8 <free>
    free(nms);
 8002c18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c1a:	f007 fcdd 	bl	800a5d8 <free>
}
 8002c1e:	bf00      	nop
 8002c20:	3738      	adds	r7, #56	; 0x38
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	240004fc 	.word	0x240004fc
 8002c2c:	0800bf58 	.word	0x0800bf58
 8002c30:	0800bf7c 	.word	0x0800bf7c

08002c34 <magnitude_x_y>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void magnitude_x_y(short int *delta_x, short int *delta_y, int rows, int cols,
    short int **magnitude)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
    int r, c, pos, sq1, sq2;

    /****************************************************************************
    * Allocate an image to store the magnitude of the gradient.
    ****************************************************************************/
    if ((*magnitude = (short *)calloc(rows*cols, sizeof(short))) == NULL){
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f007 f9d5 	bl	8009ffc <calloc>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <magnitude_x_y+0x44>
        fprintf(stderr, "Error allocating the magnitude image.\n");
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <magnitude_x_y+0x108>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2226      	movs	r2, #38	; 0x26
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4834      	ldr	r0, [pc, #208]	; (8002d40 <magnitude_x_y+0x10c>)
 8002c6e:	f007 fc11 	bl	800a494 <fwrite>
        exit(1);
 8002c72:	2001      	movs	r0, #1
 8002c74:	f007 f9d0 	bl	800a018 <exit>
    }

    //struct timespec start;
    //clock_gettime(CLOCK_MONOTONIC, &start);

    for (r = 0, pos = 0; r<rows; r++){
 8002c78:	2300      	movs	r3, #0
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	e052      	b.n	8002d28 <magnitude_x_y+0xf4>
        for (c = 0; c<cols; c++, pos++){
 8002c82:	2300      	movs	r3, #0
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	e048      	b.n	8002d1a <magnitude_x_y+0xe6>
            sq1 = (int)delta_x[pos] * (int)delta_x[pos];
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c94:	4619      	mov	r1, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	61bb      	str	r3, [r7, #24]
            sq2 = (int)delta_y[pos] * (int)delta_y[pos];
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc2:	fb01 f303 	mul.w	r3, r1, r3
 8002cc6:	617b      	str	r3, [r7, #20]
            (*magnitude)[pos] = (short)(0.5 + sqrt((float)sq1 + (float)sq2));
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	ee07 3a90 	vmov	s15, r3
 8002cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ce4:	eeb0 0b47 	vmov.f64	d0, d7
 8002ce8:	f007 f8d6 	bl	8009e98 <sqrt>
 8002cec:	eeb0 7b40 	vmov.f64	d7, d0
 8002cf0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8002cf4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002d06:	ee17 2a90 	vmov	r2, s15
 8002d0a:	b212      	sxth	r2, r2
 8002d0c:	801a      	strh	r2, [r3, #0]
        for (c = 0; c<cols; c++, pos++){
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	3301      	adds	r3, #1
 8002d12:	623b      	str	r3, [r7, #32]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	3301      	adds	r3, #1
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	dbb2      	blt.n	8002c88 <magnitude_x_y+0x54>
    for (r = 0, pos = 0; r<rows; r++){
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	3301      	adds	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	dba8      	blt.n	8002c82 <magnitude_x_y+0x4e>
        }
    }

    //printf("Loop in function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3728      	adds	r7, #40	; 0x28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	240004fc 	.word	0x240004fc
 8002d40:	0800bfd0 	.word	0x0800bfd0

08002d44 <derrivative_x_y>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void derrivative_x_y(short int *smoothedim, int rows, int cols,
    short int **delta_x, short int **delta_y)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
    int r, c, pos;

    /****************************************************************************
    * Allocate images to store the derivatives.
    ****************************************************************************/
    if (((*delta_x) = (short *)calloc(rows*cols, sizeof(short))) == NULL){
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	fb02 f303 	mul.w	r3, r2, r3
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f007 f94d 	bl	8009ffc <calloc>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10a      	bne.n	8002d88 <derrivative_x_y+0x44>
        fprintf(stderr, "Error allocating the delta_x image.\n");
 8002d72:	4b8a      	ldr	r3, [pc, #552]	; (8002f9c <derrivative_x_y+0x258>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	2224      	movs	r2, #36	; 0x24
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4888      	ldr	r0, [pc, #544]	; (8002fa0 <derrivative_x_y+0x25c>)
 8002d7e:	f007 fb89 	bl	800a494 <fwrite>
        exit(1);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f007 f948 	bl	800a018 <exit>
    }
    if (((*delta_y) = (short *)calloc(rows*cols, sizeof(short))) == NULL){
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	2102      	movs	r1, #2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f007 f932 	bl	8009ffc <calloc>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <derrivative_x_y+0x7a>
        fprintf(stderr, "Error allocating the delta_x image.\n");
 8002da8:	4b7c      	ldr	r3, [pc, #496]	; (8002f9c <derrivative_x_y+0x258>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	2101      	movs	r1, #1
 8002db2:	487b      	ldr	r0, [pc, #492]	; (8002fa0 <derrivative_x_y+0x25c>)
 8002db4:	f007 fb6e 	bl	800a494 <fwrite>
        exit(1);
 8002db8:	2001      	movs	r0, #1
 8002dba:	f007 f92d 	bl	800a018 <exit>
    if (CANNY_LIB_VERBOSE) printf("   Computing the X-direction derivative.\n");

    //struct timespec start;
    //clock_gettime(CLOCK_MONOTONIC, &start);

    for (r = 0; r<rows; r++){
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	e065      	b.n	8002e90 <derrivative_x_y+0x14c>
        pos = r * cols;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
        (*delta_x)[pos] = smoothedim[pos + 1] - smoothedim[pos];
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	440b      	add	r3, r1
 8002de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	b299      	uxth	r1, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	b20a      	sxth	r2, r1
 8002dfc:	801a      	strh	r2, [r3, #0]
        pos++;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	3301      	adds	r3, #1
 8002e02:	617b      	str	r3, [r7, #20]
        for (c = 1; c<(cols - 1); c++, pos++){
 8002e04:	2301      	movs	r3, #1
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	e020      	b.n	8002e4c <derrivative_x_y+0x108>
            (*delta_x)[pos] = smoothedim[pos + 1] - smoothedim[pos - 1];
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4413      	add	r3, r2
 8002e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	6979      	ldr	r1, [r7, #20]
 8002e1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002e20:	440b      	add	r3, r1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	440b      	add	r3, r1
 8002e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	b299      	uxth	r1, r3
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b20a      	sxth	r2, r1
 8002e3e:	801a      	strh	r2, [r3, #0]
        for (c = 1; c<(cols - 1); c++, pos++){
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dbd9      	blt.n	8002e0a <derrivative_x_y+0xc6>
        }
        (*delta_x)[pos] = smoothedim[pos] - smoothedim[pos - 1];
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	6979      	ldr	r1, [r7, #20]
 8002e66:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8002e6a:	440b      	add	r3, r1
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	68f9      	ldr	r1, [r7, #12]
 8002e70:	440b      	add	r3, r1
 8002e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	b299      	uxth	r1, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	b20a      	sxth	r2, r1
 8002e88:	801a      	strh	r2, [r3, #0]
    for (r = 0; r<rows; r++){
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	db95      	blt.n	8002dc4 <derrivative_x_y+0x80>
    /****************************************************************************
    * Compute the y-derivative. Adjust the derivative at the borders to avoid
    * losing pixels.
    ****************************************************************************/
    if (CANNY_LIB_VERBOSE) printf("   Computing the Y-direction derivative.\n");
    for (c = 0; c < cols; c++) {
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	e03e      	b.n	8002f1c <derrivative_x_y+0x1d8>
        pos = c;
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	617b      	str	r3, [r7, #20]
        (*delta_y)[pos] = smoothedim[pos + cols] - smoothedim[pos];
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	440b      	add	r3, r1
 8002ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	b299      	uxth	r1, r3
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	b20a      	sxth	r2, r1
 8002ed2:	801a      	strh	r2, [r3, #0]
        pos = rows * (rows - 1) + c;
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
        (*delta_y)[pos] = smoothedim[pos] - smoothedim[pos - cols];
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	6979      	ldr	r1, [r7, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	1acb      	subs	r3, r1, r3
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	440b      	add	r3, r1
 8002efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	b299      	uxth	r1, r3
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	b20a      	sxth	r2, r1
 8002f14:	801a      	strh	r2, [r3, #0]
    for (c = 0; c < cols; c++) {
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbbc      	blt.n	8002e9e <derrivative_x_y+0x15a>
    }
    for (r = 1; r < (rows - 1); r++) {
 8002f24:	2301      	movs	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	e02e      	b.n	8002f88 <derrivative_x_y+0x244>
        for (c = 0; c < cols; c++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e024      	b.n	8002f7a <derrivative_x_y+0x236>
            pos = r * cols + c;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	617b      	str	r3, [r7, #20]
            (*delta_y)[pos] = smoothedim[pos + cols] - smoothedim[pos - cols];
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6979      	ldr	r1, [r7, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	1acb      	subs	r3, r1, r3
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b299      	uxth	r1, r3
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	b20a      	sxth	r2, r1
 8002f72:	801a      	strh	r2, [r3, #0]
        for (c = 0; c < cols; c++) {
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	3301      	adds	r3, #1
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	dbd6      	blt.n	8002f30 <derrivative_x_y+0x1ec>
    for (r = 1; r < (rows - 1); r++) {
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	dbcb      	blt.n	8002f2a <derrivative_x_y+0x1e6>
        }
    }

    //printf("Loop in function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	240004fc 	.word	0x240004fc
 8002fa0:	0800bff8 	.word	0x0800bff8
 8002fa4:	00000000 	.word	0x00000000

08002fa8 <gaussian_smooth>:
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void gaussian_smooth(unsigned char *image, int rows, int cols, float sigma,
    short int **smoothedim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b092      	sub	sp, #72	; 0x48
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6178      	str	r0, [r7, #20]
 8002fb0:	6139      	str	r1, [r7, #16]
 8002fb2:	60fa      	str	r2, [r7, #12]
 8002fb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fb8:	607b      	str	r3, [r7, #4]
    int r, c, rr, cc,     /* Counter variables. */
        windowsize,        /* Dimension of the gaussian kernel. */
        center;            /* Half of the windowsize. */
    float *tempim,        /* Buffer for separable filter gaussian smoothing. */
        *kernel = NULL;        /* A one dimensional gaussian kernel. */
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34

    /****************************************************************************
    * Create a 1-dimensional gaussian smoothing kernel.
    ****************************************************************************/

    float *ktmp = kernel;
 8002fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc0:	61fb      	str	r3, [r7, #28]
    if (CANNY_LIB_VERBOSE) printf("   Computing the gaussian smoothing kernel.\n");

    make_gaussian_kernel(sigma, &ktmp, &windowsize);
 8002fc2:	f107 0220 	add.w	r2, r7, #32
 8002fc6:	f107 031c 	add.w	r3, r7, #28
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	ed97 0a02 	vldr	s0, [r7, #8]
 8002fd2:	f000 f9a9 	bl	8003328 <make_gaussian_kernel>
    kernel = ktmp;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
    center = windowsize / 2;
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	da00      	bge.n	8002fe2 <gaussian_smooth+0x3a>
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	105b      	asrs	r3, r3, #1
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30

    /****************************************************************************
    * Allocate a temporary buffer image and the smoothed image.
    ****************************************************************************/
    if ((tempim = (float *)calloc(rows*cols, sizeof(float))) == NULL){
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	fb02 f303 	mul.w	r3, r2, r3
 8002fee:	2104      	movs	r1, #4
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f007 f803 	bl	8009ffc <calloc>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <gaussian_smooth+0x6e>
        fprintf(stderr, "Error allocating the buffer image.\n");
 8003000:	4b9f      	ldr	r3, [pc, #636]	; (8003280 <gaussian_smooth+0x2d8>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2223      	movs	r2, #35	; 0x23
 8003008:	2101      	movs	r1, #1
 800300a:	489e      	ldr	r0, [pc, #632]	; (8003284 <gaussian_smooth+0x2dc>)
 800300c:	f007 fa42 	bl	800a494 <fwrite>
        exit(1);
 8003010:	2001      	movs	r0, #1
 8003012:	f007 f801 	bl	800a018 <exit>
    }
    if (((*smoothedim) = (short int *)calloc(rows*cols,
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	2102      	movs	r1, #2
 8003020:	4618      	mov	r0, r3
 8003022:	f006 ffeb 	bl	8009ffc <calloc>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <gaussian_smooth+0xa4>
        sizeof(short int))) == NULL){
        fprintf(stderr, "Error allocating the smoothed image.\n");
 8003036:	4b92      	ldr	r3, [pc, #584]	; (8003280 <gaussian_smooth+0x2d8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2225      	movs	r2, #37	; 0x25
 800303e:	2101      	movs	r1, #1
 8003040:	4891      	ldr	r0, [pc, #580]	; (8003288 <gaussian_smooth+0x2e0>)
 8003042:	f007 fa27 	bl	800a494 <fwrite>
        exit(1);
 8003046:	2001      	movs	r0, #1
 8003048:	f006 ffe6 	bl	800a018 <exit>
    if (CANNY_LIB_VERBOSE) printf("   Bluring the image in the X-direction.\n");

    //struct timespec start;
    //clock_gettime(CLOCK_MONOTONIC, &start);

    float* dot_arr = calloc(cols, sizeof(float));
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2104      	movs	r1, #4
 8003050:	4618      	mov	r0, r3
 8003052:	f006 ffd3 	bl	8009ffc <calloc>
 8003056:	4603      	mov	r3, r0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
    float* sum_arr = calloc(cols, sizeof(float));
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2104      	movs	r1, #4
 800305e:	4618      	mov	r0, r3
 8003060:	f006 ffcc 	bl	8009ffc <calloc>
 8003064:	4603      	mov	r3, r0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24

    for (r = 0; r < rows; r++) {
 8003068:	2300      	movs	r3, #0
 800306a:	647b      	str	r3, [r7, #68]	; 0x44
 800306c:	e093      	b.n	8003196 <gaussian_smooth+0x1ee>
        memset(dot_arr, 0, cols * sizeof(float));
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	461a      	mov	r2, r3
 8003074:	2100      	movs	r1, #0
 8003076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003078:	f007 fade 	bl	800a638 <memset>
        memset(sum_arr, 0, cols * sizeof(float));
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	2100      	movs	r1, #0
 8003084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003086:	f007 fad7 	bl	800a638 <memset>
        for (cc = (-center); cc <= center; cc++) {
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	425b      	negs	r3, r3
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003090:	e057      	b.n	8003142 <gaussian_smooth+0x19a>
            for (c = MAX(0, -cc); c < MIN(cols, cols - cc); c++) {
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	2b00      	cmp	r3, #0
 8003096:	dc02      	bgt.n	800309e <gaussian_smooth+0xf6>
 8003098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309a:	425b      	negs	r3, r3
 800309c:	e000      	b.n	80030a0 <gaussian_smooth+0xf8>
 800309e:	2300      	movs	r3, #0
 80030a0:	643b      	str	r3, [r7, #64]	; 0x40
 80030a2:	e040      	b.n	8003126 <gaussian_smooth+0x17e>
                dot_arr[c] +=
 80030a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030aa:	4413      	add	r3, r2
 80030ac:	ed93 7a00 	vldr	s14, [r3]
                    (float)image[r * cols + (c + cc)] * kernel[center + cc];
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	fb03 f202 	mul.w	r2, r3, r2
 80030b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	440b      	add	r3, r1
 80030be:	4413      	add	r3, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030da:	4413      	add	r3, r2
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
                dot_arr[c] +=
 80030e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ea:	4413      	add	r3, r2
 80030ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f0:	edc3 7a00 	vstr	s15, [r3]
                sum_arr[c] += kernel[center + cc];
 80030f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fa:	4413      	add	r3, r2
 80030fc:	ed93 7a00 	vldr	s14, [r3]
 8003100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800310a:	4413      	add	r3, r2
 800310c:	edd3 7a00 	vldr	s15, [r3]
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	4413      	add	r3, r2
 8003118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311c:	edc3 7a00 	vstr	s15, [r3]
            for (c = MAX(0, -cc); c < MIN(cols, cols - cc); c++) {
 8003120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003122:	3301      	adds	r3, #1
 8003124:	643b      	str	r3, [r7, #64]	; 0x40
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	2b00      	cmp	r3, #0
 800312a:	db03      	blt.n	8003134 <gaussian_smooth+0x18c>
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	e000      	b.n	8003136 <gaussian_smooth+0x18e>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003138:	4293      	cmp	r3, r2
 800313a:	dcb3      	bgt.n	80030a4 <gaussian_smooth+0xfc>
        for (cc = (-center); cc <= center; cc++) {
 800313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800313e:	3301      	adds	r3, #1
 8003140:	63bb      	str	r3, [r7, #56]	; 0x38
 8003142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	429a      	cmp	r2, r3
 8003148:	dda3      	ble.n	8003092 <gaussian_smooth+0xea>
            }
        }

        for (c = 0; c < cols; c++) {
 800314a:	2300      	movs	r3, #0
 800314c:	643b      	str	r3, [r7, #64]	; 0x40
 800314e:	e01b      	b.n	8003188 <gaussian_smooth+0x1e0>
            tempim[r * cols + c] = dot_arr[c] / sum_arr[c];
 8003150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003156:	4413      	add	r3, r2
 8003158:	edd3 6a00 	vldr	s13, [r3]
 800315c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	4413      	add	r3, r2
 8003164:	ed93 7a00 	vldr	s14, [r3]
 8003168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	fb03 f202 	mul.w	r2, r3, r2
 8003170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003178:	4413      	add	r3, r2
 800317a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800317e:	edc3 7a00 	vstr	s15, [r3]
        for (c = 0; c < cols; c++) {
 8003182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003184:	3301      	adds	r3, #1
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
 8003188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	dbdf      	blt.n	8003150 <gaussian_smooth+0x1a8>
    for (r = 0; r < rows; r++) {
 8003190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003192:	3301      	adds	r3, #1
 8003194:	647b      	str	r3, [r7, #68]	; 0x44
 8003196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	429a      	cmp	r2, r3
 800319c:	f6ff af67 	blt.w	800306e <gaussian_smooth+0xc6>

    /****************************************************************************
    * Blur in the y - direction.
    ****************************************************************************/
    if (CANNY_LIB_VERBOSE) printf("   Bluring the image in the Y-direction.\n");
    for (r = 0; r < rows; r++) {
 80031a0:	2300      	movs	r3, #0
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
 80031a4:	e0a6      	b.n	80032f4 <gaussian_smooth+0x34c>
        memset(dot_arr, 0, cols * sizeof(float));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	461a      	mov	r2, r3
 80031ac:	2100      	movs	r1, #0
 80031ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031b0:	f007 fa42 	bl	800a638 <memset>
        memset(sum_arr, 0, cols * sizeof(float));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	461a      	mov	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031be:	f007 fa3b 	bl	800a638 <memset>
        for (rr = (-center); rr <= center; rr++) {
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	425b      	negs	r3, r3
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031c8:	e052      	b.n	8003270 <gaussian_smooth+0x2c8>
            if (((r + rr) >= 0) && ((r + rr) < rows)) {
 80031ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ce:	4413      	add	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	db4a      	blt.n	800326a <gaussian_smooth+0x2c2>
 80031d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d8:	4413      	add	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	dd44      	ble.n	800326a <gaussian_smooth+0x2c2>
                for (c = 0; c < cols; c++) {
 80031e0:	2300      	movs	r3, #0
 80031e2:	643b      	str	r3, [r7, #64]	; 0x40
 80031e4:	e03d      	b.n	8003262 <gaussian_smooth+0x2ba>
                    dot_arr[c] +=
 80031e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ec:	4413      	add	r3, r2
 80031ee:	ed93 7a00 	vldr	s14, [r3]
                        tempim[(r + rr) * cols + c] * kernel[center + rr];
 80031f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	4413      	add	r3, r2
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	fb03 f202 	mul.w	r2, r3, r2
 80031fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003206:	4413      	add	r3, r2
 8003208:	edd3 6a00 	vldr	s13, [r3]
 800320c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003216:	4413      	add	r3, r2
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	ee66 7aa7 	vmul.f32	s15, s13, s15
                    dot_arr[c] +=
 8003220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003226:	4413      	add	r3, r2
 8003228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322c:	edc3 7a00 	vstr	s15, [r3]
                    sum_arr[c] += kernel[center + rr];
 8003230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003236:	4413      	add	r3, r2
 8003238:	ed93 7a00 	vldr	s14, [r3]
 800323c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003246:	4413      	add	r3, r2
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003252:	4413      	add	r3, r2
 8003254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003258:	edc3 7a00 	vstr	s15, [r3]
                for (c = 0; c < cols; c++) {
 800325c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800325e:	3301      	adds	r3, #1
 8003260:	643b      	str	r3, [r7, #64]	; 0x40
 8003262:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	429a      	cmp	r2, r3
 8003268:	dbbd      	blt.n	80031e6 <gaussian_smooth+0x23e>
        for (rr = (-center); rr <= center; rr++) {
 800326a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326c:	3301      	adds	r3, #1
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003274:	429a      	cmp	r2, r3
 8003276:	dda8      	ble.n	80031ca <gaussian_smooth+0x222>
                }
            }
        }
        for (c = 0; c < cols; c++) {
 8003278:	2300      	movs	r3, #0
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
 800327c:	e033      	b.n	80032e6 <gaussian_smooth+0x33e>
 800327e:	bf00      	nop
 8003280:	240004fc 	.word	0x240004fc
 8003284:	0800c020 	.word	0x0800c020
 8003288:	0800c044 	.word	0x0800c044
            (*smoothedim)[r * cols + c] =
                (short int)(dot_arr[c] * BOOSTBLURFACTOR / sum_arr[c] + 0.5);
 800328c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003292:	4413      	add	r3, r2
 8003294:	edd3 7a00 	vldr	s15, [r3]
 8003298:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800329c:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8003320 <gaussian_smooth+0x378>
 80032a0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80032a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	4413      	add	r3, r2
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80032b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80032b8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80032bc:	ee37 7b06 	vadd.f64	d7, d7, d6
            (*smoothedim)[r * cols + c] =
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	68f9      	ldr	r1, [r7, #12]
 80032c8:	fb03 f101 	mul.w	r1, r3, r1
 80032cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ce:	440b      	add	r3, r1
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
                (short int)(dot_arr[c] * BOOSTBLURFACTOR / sum_arr[c] + 0.5);
 80032d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80032d8:	ee17 2a90 	vmov	r2, s15
 80032dc:	b212      	sxth	r2, r2
            (*smoothedim)[r * cols + c] =
 80032de:	801a      	strh	r2, [r3, #0]
        for (c = 0; c < cols; c++) {
 80032e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e2:	3301      	adds	r3, #1
 80032e4:	643b      	str	r3, [r7, #64]	; 0x40
 80032e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	dbce      	blt.n	800328c <gaussian_smooth+0x2e4>
    for (r = 0; r < rows; r++) {
 80032ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f0:	3301      	adds	r3, #1
 80032f2:	647b      	str	r3, [r7, #68]	; 0x44
 80032f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f6ff af54 	blt.w	80031a6 <gaussian_smooth+0x1fe>
        }
    }
    free(dot_arr);
 80032fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003300:	f007 f96a 	bl	800a5d8 <free>
    free(sum_arr);
 8003304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003306:	f007 f967 	bl	800a5d8 <free>

    //printf("Loops in function %s runtime: %.3f\n", __FUNCTION__, get_runtime(start));

    free(tempim);
 800330a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800330c:	f007 f964 	bl	800a5d8 <free>
    free(kernel);
 8003310:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003312:	f007 f961 	bl	800a5d8 <free>
}
 8003316:	bf00      	nop
 8003318:	3748      	adds	r7, #72	; 0x48
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	00000000 	.word	0x00000000
 8003324:	40568000 	.word	0x40568000

08003328 <make_gaussian_kernel>:
* PURPOSE: Create a one dimensional gaussian kernel.
* NAME: Mike Heath
* DATE: 2/15/96
*******************************************************************************/
void make_gaussian_kernel(float sigma, float **kernel, int *windowsize)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af00      	add	r7, sp, #0
 800332e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003332:	60b8      	str	r0, [r7, #8]
 8003334:	6079      	str	r1, [r7, #4]
    int i, center;
    float x, fx, sum = 0.0;
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	623b      	str	r3, [r7, #32]

    *windowsize = 1 + 2 * ceil(2.5 * sigma);
 800333c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003340:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003344:	eeb0 6b04 	vmov.f64	d6, #4	; 0x40200000  2.5
 8003348:	ee27 7b06 	vmul.f64	d7, d7, d6
 800334c:	eeb0 0b47 	vmov.f64	d0, d7
 8003350:	f006 fd2a 	bl	8009da8 <ceil>
 8003354:	eeb0 7b40 	vmov.f64	d7, d0
 8003358:	ee37 7b07 	vadd.f64	d7, d7, d7
 800335c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003360:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003364:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003368:	ee17 2a90 	vmov	r2, s15
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
    center = (*windowsize) / 2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	da00      	bge.n	800337a <make_gaussian_kernel+0x52>
 8003378:	3301      	adds	r3, #1
 800337a:	105b      	asrs	r3, r3, #1
 800337c:	61fb      	str	r3, [r7, #28]

    if (CANNY_LIB_VERBOSE) printf("      The kernel has %d elements.\n", *windowsize);
    if ((*kernel = (float *)calloc((*windowsize), sizeof(float))) == NULL){
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2104      	movs	r1, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f006 fe39 	bl	8009ffc <calloc>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <make_gaussian_kernel+0x88>
        fprintf(stderr, "Error callocing the gaussian kernel array.\n");
 800339a:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <make_gaussian_kernel+0x180>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	222b      	movs	r2, #43	; 0x2b
 80033a2:	2101      	movs	r1, #1
 80033a4:	4841      	ldr	r0, [pc, #260]	; (80034ac <make_gaussian_kernel+0x184>)
 80033a6:	f007 f875 	bl	800a494 <fwrite>
        exit(1);
 80033aa:	2001      	movs	r0, #1
 80033ac:	f006 fe34 	bl	800a018 <exit>
    }

    for (i = 0; i<(*windowsize); i++){
 80033b0:	2300      	movs	r3, #0
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	e046      	b.n	8003444 <make_gaussian_kernel+0x11c>
        x = (float)(i - center);
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033c4:	edc7 7a06 	vstr	s15, [r7, #24]
        fx = pow(2.71828, -0.5*x*x / (sigma*sigma)) / (sigma * sqrt(6.2831853));
 80033c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80033cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033d0:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 80033d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80033d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80033dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80033e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80033e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80033ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033f0:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80033f4:	eeb0 1b45 	vmov.f64	d1, d5
 80033f8:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8003498 <make_gaussian_kernel+0x170>
 80033fc:	f006 fa80 	bl	8009900 <pow>
 8003400:	eeb0 5b40 	vmov.f64	d5, d0
 8003404:	edd7 7a03 	vldr	s15, [r7, #12]
 8003408:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800340c:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80034a0 <make_gaussian_kernel+0x178>
 8003410:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003414:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003418:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800341c:	edc7 7a05 	vstr	s15, [r7, #20]
        (*kernel)[i] = fx;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	601a      	str	r2, [r3, #0]
        sum += fx;
 800342e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003432:	edd7 7a05 	vldr	s15, [r7, #20]
 8003436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800343a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (i = 0; i<(*windowsize); i++){
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	3301      	adds	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	429a      	cmp	r2, r3
 800344c:	dbb3      	blt.n	80033b6 <make_gaussian_kernel+0x8e>
    }

    for (i = 0; i<(*windowsize); i++) (*kernel)[i] /= sum;
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	e014      	b.n	800347e <make_gaussian_kernel+0x156>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	edd3 6a00 	vldr	s13, [r3]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003474:	edc3 7a00 	vstr	s15, [r3]
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	3301      	adds	r3, #1
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003484:	429a      	cmp	r2, r3
 8003486:	dbe5      	blt.n	8003454 <make_gaussian_kernel+0x12c>
        for (i = 0; i<(*windowsize); i++)
        	printf("eye");
            //printf("kernel[%d] = %d\n", i, (*kernel)[i]);
    }

}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3728      	adds	r7, #40	; 0x28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	f3af 8000 	nop.w
 8003498:	95aaf790 	.word	0x95aaf790
 800349c:	4005bf09 	.word	0x4005bf09
 80034a0:	1fc4f1f6 	.word	0x1fc4f1f6
 80034a4:	40040d93 	.word	0x40040d93
 80034a8:	240004fc 	.word	0x240004fc
 80034ac:	0800c06c 	.word	0x0800c06c

080034b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b0a4      	sub	sp, #144	; 0x90
 80034b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034b6:	f000 fe19 	bl	80040ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034ba:	f000 f87b 	bl	80035b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034be:	f000 f9c3 	bl	8003848 <MX_GPIO_Init>
  MX_ETH_Init();
 80034c2:	f000 f8f7 	bl	80036b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80034c6:	f000 f941 	bl	800374c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80034ca:	f000 f98b 	bl	80037e4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */


  	  //char *infilename = "road2.jpg";  /* Name of the input image */
      char *dirfilename = NULL; /* Name of the output gradient direction image */
 80034ce:	2300      	movs	r3, #0
 80034d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      //char outfilename[128];    /* Name of the output "edge" image */
      //char composedfname[128];  /* Name of the output "direction" image */
      //uint8_t *image = (uint8_t*) malloc(104800 * sizeof(uint8_t));     /* The input image */
      uint8_t *edge;      /* The output edge image */
      //int rows = 0, cols =0, channels = 0;           /* The dimensions of the image. */
      float   sigma =0.7,              /* Standard deviation of the gaussian kernel. */
 80034d4:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <main+0xe4>)
 80034d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
              tlow = 0.6,                 /* Fraction of the high threshold in hysteresis. */
 80034da:	4b2f      	ldr	r3, [pc, #188]	; (8003598 <main+0xe8>)
 80034dc:	67fb      	str	r3, [r7, #124]	; 0x7c
              thigh =0.9;
 80034de:	4b2f      	ldr	r3, [pc, #188]	; (800359c <main+0xec>)
 80034e0:	67bb      	str	r3, [r7, #120]	; 0x78
      //clock_gettime(CLOCK_MONOTONIC, &start);

      ///------------
              //rows = 549;cols =976;
      //--- For read by file.h
      canny((uint8_t*)road2, ROAD_HEIGHT, ROAD_WIDTH, sigma, tlow, thigh, &edge, dirfilename);
 80034e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80034e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	4613      	mov	r3, r2
 80034ee:	ed97 1a1e 	vldr	s2, [r7, #120]	; 0x78
 80034f2:	edd7 0a1f 	vldr	s1, [r7, #124]	; 0x7c
 80034f6:	ed97 0a20 	vldr	s0, [r7, #128]	; 0x80
 80034fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034fe:	21a8      	movs	r1, #168	; 0xa8
 8003500:	4827      	ldr	r0, [pc, #156]	; (80035a0 <main+0xf0>)
 8003502:	f7ff fb05 	bl	8002b10 <canny>
    	  }
      }
		*/


      int len = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	66fb      	str	r3, [r7, #108]	; 0x6c
      uint8_t* result = stbi_write_png_to_mem(edge,ROAD_WIDTH,ROAD_WIDTH,ROAD_HEIGHT,1,&len);
 800350a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800350c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003510:	9301      	str	r3, [sp, #4]
 8003512:	2301      	movs	r3, #1
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	23a8      	movs	r3, #168	; 0xa8
 8003518:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800351c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003520:	f7fe f99a 	bl	8001858 <stbi_write_png_to_mem>
 8003524:	6778      	str	r0, [r7, #116]	; 0x74
      HAL_UART_Transmit(&huart3, result, len, 100000);
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b1e      	ldr	r3, [pc, #120]	; (80035a4 <main+0xf4>)
 800352c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800352e:	481e      	ldr	r0, [pc, #120]	; (80035a8 <main+0xf8>)
 8003530:	f004 fd92 	bl	8008058 <HAL_UART_Transmit>
      uint8_t str = '\r';
 8003534:	230d      	movs	r3, #13
 8003536:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
      HAL_UART_Transmit(&huart3, &str, 1, 100000);
 800353a:	f107 016b 	add.w	r1, r7, #107	; 0x6b
 800353e:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <main+0xf4>)
 8003540:	2201      	movs	r2, #1
 8003542:	4819      	ldr	r0, [pc, #100]	; (80035a8 <main+0xf8>)
 8003544:	f004 fd88 	bl	8008058 <HAL_UART_Transmit>



      uint8_t str2[100] = "";
 8003548:	2300      	movs	r3, #0
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	f107 0308 	add.w	r3, r7, #8
 8003550:	2260      	movs	r2, #96	; 0x60
 8003552:	2100      	movs	r1, #0
 8003554:	4618      	mov	r0, r3
 8003556:	f007 f86f 	bl	800a638 <memset>
      HAL_UART_Transmit(&huart3, str2, sprintf(str2,"\n----H: %d, L: %d\n",ROAD_HEIGHT,ROAD_WIDTH), 100000);
 800355a:	1d38      	adds	r0, r7, #4
 800355c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003560:	22a8      	movs	r2, #168	; 0xa8
 8003562:	4912      	ldr	r1, [pc, #72]	; (80035ac <main+0xfc>)
 8003564:	f007 fc6c 	bl	800ae40 <siprintf>
 8003568:	4603      	mov	r3, r0
 800356a:	b29a      	uxth	r2, r3
 800356c:	1d39      	adds	r1, r7, #4
 800356e:	4b0d      	ldr	r3, [pc, #52]	; (80035a4 <main+0xf4>)
 8003570:	480d      	ldr	r0, [pc, #52]	; (80035a8 <main+0xf8>)
 8003572:	f004 fd71 	bl	8008058 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 8003576:	2201      	movs	r2, #1
 8003578:	2101      	movs	r1, #1
 800357a:	480d      	ldr	r0, [pc, #52]	; (80035b0 <main+0x100>)
 800357c:	f001 fd44 	bl	8005008 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003580:	2101      	movs	r1, #1
 8003582:	480b      	ldr	r0, [pc, #44]	; (80035b0 <main+0x100>)
 8003584:	f001 fd59 	bl	800503a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8003588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800358c:	f000 fe40 	bl	8004210 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8003590:	e7f6      	b.n	8003580 <main+0xd0>
 8003592:	bf00      	nop
 8003594:	3f333333 	.word	0x3f333333
 8003598:	3f19999a 	.word	0x3f19999a
 800359c:	3f666666 	.word	0x3f666666
 80035a0:	0800c0ac 	.word	0x0800c0ac
 80035a4:	000186a0 	.word	0x000186a0
 80035a8:	24000728 	.word	0x24000728
 80035ac:	0800c098 	.word	0x0800c098
 80035b0:	58020400 	.word	0x58020400

080035b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b09c      	sub	sp, #112	; 0x70
 80035b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035be:	224c      	movs	r2, #76	; 0x4c
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f007 f838 	bl	800a638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	2220      	movs	r2, #32
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f007 f832 	bl	800a638 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80035d4:	2002      	movs	r0, #2
 80035d6:	f001 fe93 	bl	8005300 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80035da:	2300      	movs	r3, #0
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	4b33      	ldr	r3, [pc, #204]	; (80036ac <SystemClock_Config+0xf8>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	4a32      	ldr	r2, [pc, #200]	; (80036ac <SystemClock_Config+0xf8>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80035ea:	4b30      	ldr	r3, [pc, #192]	; (80036ac <SystemClock_Config+0xf8>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <SystemClock_Config+0xfc>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80035fc:	4a2c      	ldr	r2, [pc, #176]	; (80036b0 <SystemClock_Config+0xfc>)
 80035fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003602:	6193      	str	r3, [r2, #24]
 8003604:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <SystemClock_Config+0xfc>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003610:	bf00      	nop
 8003612:	4b27      	ldr	r3, [pc, #156]	; (80036b0 <SystemClock_Config+0xfc>)
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800361a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361e:	d1f8      	bne.n	8003612 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003620:	2303      	movs	r3, #3
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800362a:	2301      	movs	r3, #1
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800362e:	2340      	movs	r3, #64	; 0x40
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003632:	2302      	movs	r3, #2
 8003634:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003636:	2302      	movs	r3, #2
 8003638:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800363a:	2301      	movs	r3, #1
 800363c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800363e:	2318      	movs	r3, #24
 8003640:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003642:	2302      	movs	r3, #2
 8003644:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003646:	2304      	movs	r3, #4
 8003648:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800364a:	2302      	movs	r3, #2
 800364c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800364e:	230c      	movs	r3, #12
 8003650:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003652:	2300      	movs	r3, #0
 8003654:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800365a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800365e:	4618      	mov	r0, r3
 8003660:	f001 fe98 	bl	8005394 <HAL_RCC_OscConfig>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800366a:	f000 f9c9 	bl	8003a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800366e:	233f      	movs	r3, #63	; 0x3f
 8003670:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800368a:	2300      	movs	r3, #0
 800368c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2101      	movs	r1, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f002 fad8 	bl	8005c48 <HAL_RCC_ClockConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800369e:	f000 f9af 	bl	8003a00 <Error_Handler>
  }
}
 80036a2:	bf00      	nop
 80036a4:	3770      	adds	r7, #112	; 0x70
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	58000400 	.word	0x58000400
 80036b0:	58024800 	.word	0x58024800

080036b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80036b8:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <MX_ETH_Init+0x80>)
 80036ba:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <MX_ETH_Init+0x84>)
 80036bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80036be:	4b1f      	ldr	r3, [pc, #124]	; (800373c <MX_ETH_Init+0x88>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <MX_ETH_Init+0x88>)
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80036ca:	4b1c      	ldr	r3, [pc, #112]	; (800373c <MX_ETH_Init+0x88>)
 80036cc:	22e1      	movs	r2, #225	; 0xe1
 80036ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <MX_ETH_Init+0x88>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <MX_ETH_Init+0x88>)
 80036d8:	2200      	movs	r2, #0
 80036da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <MX_ETH_Init+0x88>)
 80036de:	2200      	movs	r2, #0
 80036e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <MX_ETH_Init+0x80>)
 80036e4:	4a15      	ldr	r2, [pc, #84]	; (800373c <MX_ETH_Init+0x88>)
 80036e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <MX_ETH_Init+0x80>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <MX_ETH_Init+0x80>)
 80036f0:	4a13      	ldr	r2, [pc, #76]	; (8003740 <MX_ETH_Init+0x8c>)
 80036f2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <MX_ETH_Init+0x80>)
 80036f6:	4a13      	ldr	r2, [pc, #76]	; (8003744 <MX_ETH_Init+0x90>)
 80036f8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <MX_ETH_Init+0x80>)
 80036fc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003700:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8003702:	480c      	ldr	r0, [pc, #48]	; (8003734 <MX_ETH_Init+0x80>)
 8003704:	f000 feac 	bl	8004460 <HAL_ETH_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800370e:	f000 f977 	bl	8003a00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003712:	2238      	movs	r2, #56	; 0x38
 8003714:	2100      	movs	r1, #0
 8003716:	480c      	ldr	r0, [pc, #48]	; (8003748 <MX_ETH_Init+0x94>)
 8003718:	f006 ff8e 	bl	800a638 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <MX_ETH_Init+0x94>)
 800371e:	2221      	movs	r2, #33	; 0x21
 8003720:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <MX_ETH_Init+0x94>)
 8003724:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003728:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <MX_ETH_Init+0x94>)
 800372c:	2200      	movs	r2, #0
 800372e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}
 8003734:	24000678 	.word	0x24000678
 8003738:	40028000 	.word	0x40028000
 800373c:	24000cc8 	.word	0x24000cc8
 8003740:	240005c0 	.word	0x240005c0
 8003744:	24000560 	.word	0x24000560
 8003748:	24000640 	.word	0x24000640

0800374c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003750:	4b22      	ldr	r3, [pc, #136]	; (80037dc <MX_USART3_UART_Init+0x90>)
 8003752:	4a23      	ldr	r2, [pc, #140]	; (80037e0 <MX_USART3_UART_Init+0x94>)
 8003754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003756:	4b21      	ldr	r3, [pc, #132]	; (80037dc <MX_USART3_UART_Init+0x90>)
 8003758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800375c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800375e:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <MX_USART3_UART_Init+0x90>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <MX_USART3_UART_Init+0x90>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <MX_USART3_UART_Init+0x90>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <MX_USART3_UART_Init+0x90>)
 8003772:	220c      	movs	r2, #12
 8003774:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003776:	4b19      	ldr	r3, [pc, #100]	; (80037dc <MX_USART3_UART_Init+0x90>)
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <MX_USART3_UART_Init+0x90>)
 800377e:	2200      	movs	r2, #0
 8003780:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <MX_USART3_UART_Init+0x90>)
 8003784:	2200      	movs	r2, #0
 8003786:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <MX_USART3_UART_Init+0x90>)
 800378a:	2200      	movs	r2, #0
 800378c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <MX_USART3_UART_Init+0x90>)
 8003790:	2200      	movs	r2, #0
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003794:	4811      	ldr	r0, [pc, #68]	; (80037dc <MX_USART3_UART_Init+0x90>)
 8003796:	f004 fc0f 	bl	8007fb8 <HAL_UART_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80037a0:	f000 f92e 	bl	8003a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037a4:	2100      	movs	r1, #0
 80037a6:	480d      	ldr	r0, [pc, #52]	; (80037dc <MX_USART3_UART_Init+0x90>)
 80037a8:	f005 fc9f 	bl	80090ea <HAL_UARTEx_SetTxFifoThreshold>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80037b2:	f000 f925 	bl	8003a00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037b6:	2100      	movs	r1, #0
 80037b8:	4808      	ldr	r0, [pc, #32]	; (80037dc <MX_USART3_UART_Init+0x90>)
 80037ba:	f005 fcd4 	bl	8009166 <HAL_UARTEx_SetRxFifoThreshold>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80037c4:	f000 f91c 	bl	8003a00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80037c8:	4804      	ldr	r0, [pc, #16]	; (80037dc <MX_USART3_UART_Init+0x90>)
 80037ca:	f005 fc55 	bl	8009078 <HAL_UARTEx_DisableFifoMode>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80037d4:	f000 f914 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	24000728 	.word	0x24000728
 80037e0:	40004800 	.word	0x40004800

080037e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80037e8:	4b15      	ldr	r3, [pc, #84]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80037ea:	4a16      	ldr	r2, [pc, #88]	; (8003844 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80037ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80037ee:	4b14      	ldr	r3, [pc, #80]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80037f0:	2209      	movs	r2, #9
 80037f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80037f6:	2202      	movs	r2, #2
 80037f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003802:	2202      	movs	r2, #2
 8003804:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003806:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003808:	2201      	movs	r2, #1
 800380a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800380c:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800380e:	2200      	movs	r2, #0
 8003810:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003812:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003814:	2200      	movs	r2, #0
 8003816:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800381a:	2201      	movs	r2, #1
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800381e:	4b08      	ldr	r3, [pc, #32]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003820:	2201      	movs	r2, #1
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8003826:	2200      	movs	r2, #0
 8003828:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800382a:	4805      	ldr	r0, [pc, #20]	; (8003840 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800382c:	f001 fc1f 	bl	800506e <HAL_PCD_Init>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8003836:	f000 f8e3 	bl	8003a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	240007bc 	.word	0x240007bc
 8003844:	40080000 	.word	0x40080000

08003848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08c      	sub	sp, #48	; 0x30
 800384c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800384e:	f107 031c 	add.w	r3, r7, #28
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	60da      	str	r2, [r3, #12]
 800385c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800385e:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 8003860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003864:	4a60      	ldr	r2, [pc, #384]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800386e:	4b5e      	ldr	r3, [pc, #376]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 8003870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	61bb      	str	r3, [r7, #24]
 800387a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800387c:	4b5a      	ldr	r3, [pc, #360]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 800387e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003882:	4a59      	ldr	r2, [pc, #356]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 8003884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003888:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800388c:	4b56      	ldr	r3, [pc, #344]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 800388e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800389a:	4b53      	ldr	r3, [pc, #332]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 800389c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038a0:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038aa:	4b4f      	ldr	r3, [pc, #316]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038b8:	4b4b      	ldr	r3, [pc, #300]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038be:	4a4a      	ldr	r2, [pc, #296]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038c0:	f043 0302 	orr.w	r3, r3, #2
 80038c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038c8:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038d6:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038dc:	4a42      	ldr	r2, [pc, #264]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038de:	f043 0308 	orr.w	r3, r3, #8
 80038e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038e6:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038f4:	4b3c      	ldr	r3, [pc, #240]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038fa:	4a3b      	ldr	r2, [pc, #236]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 80038fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003904:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 8003906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800390a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390e:	607b      	str	r3, [r7, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003912:	4b35      	ldr	r3, [pc, #212]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 8003914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003918:	4a33      	ldr	r2, [pc, #204]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 800391a:	f043 0310 	orr.w	r3, r3, #16
 800391e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003922:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <MX_GPIO_Init+0x1a0>)
 8003924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8003930:	2200      	movs	r2, #0
 8003932:	f244 0101 	movw	r1, #16385	; 0x4001
 8003936:	482d      	ldr	r0, [pc, #180]	; (80039ec <MX_GPIO_Init+0x1a4>)
 8003938:	f001 fb66 	bl	8005008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800393c:	2200      	movs	r2, #0
 800393e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003942:	482b      	ldr	r0, [pc, #172]	; (80039f0 <MX_GPIO_Init+0x1a8>)
 8003944:	f001 fb60 	bl	8005008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003948:	2200      	movs	r2, #0
 800394a:	2102      	movs	r1, #2
 800394c:	4829      	ldr	r0, [pc, #164]	; (80039f4 <MX_GPIO_Init+0x1ac>)
 800394e:	f001 fb5b 	bl	8005008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003958:	2300      	movs	r3, #0
 800395a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003960:	f107 031c 	add.w	r3, r7, #28
 8003964:	4619      	mov	r1, r3
 8003966:	4824      	ldr	r0, [pc, #144]	; (80039f8 <MX_GPIO_Init+0x1b0>)
 8003968:	f001 f99e 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800396c:	f244 0301 	movw	r3, #16385	; 0x4001
 8003970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003972:	2301      	movs	r3, #1
 8003974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800397a:	2300      	movs	r3, #0
 800397c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397e:	f107 031c 	add.w	r3, r7, #28
 8003982:	4619      	mov	r1, r3
 8003984:	4819      	ldr	r0, [pc, #100]	; (80039ec <MX_GPIO_Init+0x1a4>)
 8003986:	f001 f98f 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800398a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003990:	2301      	movs	r3, #1
 8003992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003998:	2300      	movs	r3, #0
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800399c:	f107 031c 	add.w	r3, r7, #28
 80039a0:	4619      	mov	r1, r3
 80039a2:	4813      	ldr	r0, [pc, #76]	; (80039f0 <MX_GPIO_Init+0x1a8>)
 80039a4:	f001 f980 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80039b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80039b6:	f107 031c 	add.w	r3, r7, #28
 80039ba:	4619      	mov	r1, r3
 80039bc:	480f      	ldr	r0, [pc, #60]	; (80039fc <MX_GPIO_Init+0x1b4>)
 80039be:	f001 f973 	bl	8004ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80039c2:	2302      	movs	r3, #2
 80039c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c6:	2301      	movs	r3, #1
 80039c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ce:	2300      	movs	r3, #0
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80039d2:	f107 031c 	add.w	r3, r7, #28
 80039d6:	4619      	mov	r1, r3
 80039d8:	4806      	ldr	r0, [pc, #24]	; (80039f4 <MX_GPIO_Init+0x1ac>)
 80039da:	f001 f965 	bl	8004ca8 <HAL_GPIO_Init>

}
 80039de:	bf00      	nop
 80039e0:	3730      	adds	r7, #48	; 0x30
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	58024400 	.word	0x58024400
 80039ec:	58020400 	.word	0x58020400
 80039f0:	58020c00 	.word	0x58020c00
 80039f4:	58021000 	.word	0x58021000
 80039f8:	58020800 	.word	0x58020800
 80039fc:	58021800 	.word	0x58021800

08003a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a04:	b672      	cpsid	i
}
 8003a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a08:	e7fe      	b.n	8003a08 <Error_Handler+0x8>
	...

08003a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a12:	4b0a      	ldr	r3, [pc, #40]	; (8003a3c <HAL_MspInit+0x30>)
 8003a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a18:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <HAL_MspInit+0x30>)
 8003a1a:	f043 0302 	orr.w	r3, r3, #2
 8003a1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_MspInit+0x30>)
 8003a24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	58024400 	.word	0x58024400

08003a40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b08e      	sub	sp, #56	; 0x38
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	60da      	str	r2, [r3, #12]
 8003a56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a59      	ldr	r2, [pc, #356]	; (8003bc4 <HAL_ETH_MspInit+0x184>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	f040 80ab 	bne.w	8003bba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003a64:	4b58      	ldr	r3, [pc, #352]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a6a:	4a57      	ldr	r2, [pc, #348]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003a6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003a74:	4b54      	ldr	r3, [pc, #336]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003a82:	4b51      	ldr	r3, [pc, #324]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003a84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a88:	4a4f      	ldr	r2, [pc, #316]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003a92:	4b4d      	ldr	r3, [pc, #308]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003aa0:	4b49      	ldr	r3, [pc, #292]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003aa6:	4a48      	ldr	r2, [pc, #288]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ab0:	4b45      	ldr	r3, [pc, #276]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003abe:	4b42      	ldr	r3, [pc, #264]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac4:	4a40      	ldr	r2, [pc, #256]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003ac6:	f043 0304 	orr.w	r3, r3, #4
 8003aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ace:	4b3e      	ldr	r3, [pc, #248]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003adc:	4b3a      	ldr	r3, [pc, #232]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae2:	4a39      	ldr	r2, [pc, #228]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003aec:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003afa:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b00:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003b02:	f043 0302 	orr.w	r3, r3, #2
 8003b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b18:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b1e:	4a2a      	ldr	r2, [pc, #168]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_ETH_MspInit+0x188>)
 8003b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003b36:	2332      	movs	r3, #50	; 0x32
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b42:	2300      	movs	r3, #0
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b46:	230b      	movs	r3, #11
 8003b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b4e:	4619      	mov	r1, r3
 8003b50:	481e      	ldr	r0, [pc, #120]	; (8003bcc <HAL_ETH_MspInit+0x18c>)
 8003b52:	f001 f8a9 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003b56:	2386      	movs	r3, #134	; 0x86
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b62:	2300      	movs	r3, #0
 8003b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b66:	230b      	movs	r3, #11
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4817      	ldr	r0, [pc, #92]	; (8003bd0 <HAL_ETH_MspInit+0x190>)
 8003b72:	f001 f899 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	2300      	movs	r3, #0
 8003b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b88:	230b      	movs	r3, #11
 8003b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b90:	4619      	mov	r1, r3
 8003b92:	4810      	ldr	r0, [pc, #64]	; (8003bd4 <HAL_ETH_MspInit+0x194>)
 8003b94:	f001 f888 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003b98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003baa:	230b      	movs	r3, #11
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4808      	ldr	r0, [pc, #32]	; (8003bd8 <HAL_ETH_MspInit+0x198>)
 8003bb6:	f001 f877 	bl	8004ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003bba:	bf00      	nop
 8003bbc:	3738      	adds	r7, #56	; 0x38
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40028000 	.word	0x40028000
 8003bc8:	58024400 	.word	0x58024400
 8003bcc:	58020800 	.word	0x58020800
 8003bd0:	58020000 	.word	0x58020000
 8003bd4:	58020400 	.word	0x58020400
 8003bd8:	58021800 	.word	0x58021800

08003bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b0ba      	sub	sp, #232	; 0xe8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bf4:	f107 0310 	add.w	r3, r7, #16
 8003bf8:	22c0      	movs	r2, #192	; 0xc0
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f006 fd1b 	bl	800a638 <memset>
  if(huart->Instance==USART3)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a27      	ldr	r2, [pc, #156]	; (8003ca4 <HAL_UART_MspInit+0xc8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d146      	bne.n	8003c9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c0c:	f04f 0202 	mov.w	r2, #2
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c1e:	f107 0310 	add.w	r3, r7, #16
 8003c22:	4618      	mov	r0, r3
 8003c24:	f002 fb9c 	bl	8006360 <HAL_RCCEx_PeriphCLKConfig>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003c2e:	f7ff fee7 	bl	8003a00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c32:	4b1d      	ldr	r3, [pc, #116]	; (8003ca8 <HAL_UART_MspInit+0xcc>)
 8003c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_UART_MspInit+0xcc>)
 8003c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c42:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_UART_MspInit+0xcc>)
 8003c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c50:	4b15      	ldr	r3, [pc, #84]	; (8003ca8 <HAL_UART_MspInit+0xcc>)
 8003c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c56:	4a14      	ldr	r2, [pc, #80]	; (8003ca8 <HAL_UART_MspInit+0xcc>)
 8003c58:	f043 0308 	orr.w	r3, r3, #8
 8003c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c60:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <HAL_UART_MspInit+0xcc>)
 8003c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c76:	2302      	movs	r3, #2
 8003c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c88:	2307      	movs	r3, #7
 8003c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c92:	4619      	mov	r1, r3
 8003c94:	4805      	ldr	r0, [pc, #20]	; (8003cac <HAL_UART_MspInit+0xd0>)
 8003c96:	f001 f807 	bl	8004ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c9a:	bf00      	nop
 8003c9c:	37e8      	adds	r7, #232	; 0xe8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40004800 	.word	0x40004800
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	58020c00 	.word	0x58020c00

08003cb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b0ba      	sub	sp, #232	; 0xe8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	22c0      	movs	r2, #192	; 0xc0
 8003cce:	2100      	movs	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f006 fcb1 	bl	800a638 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a30      	ldr	r2, [pc, #192]	; (8003d9c <HAL_PCD_MspInit+0xec>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d159      	bne.n	8003d94 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003ce0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8003cec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003cf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cf4:	f107 0310 	add.w	r3, r7, #16
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f002 fb31 	bl	8006360 <HAL_RCCEx_PeriphCLKConfig>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8003d04:	f7ff fe7c 	bl	8003a00 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003d08:	f001 fb34 	bl	8005374 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d0c:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_PCD_MspInit+0xf0>)
 8003d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d12:	4a23      	ldr	r2, [pc, #140]	; (8003da0 <HAL_PCD_MspInit+0xf0>)
 8003d14:	f043 0301 	orr.w	r3, r3, #1
 8003d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_PCD_MspInit+0xf0>)
 8003d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003d2a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d32:	2302      	movs	r3, #2
 8003d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003d44:	230a      	movs	r3, #10
 8003d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4814      	ldr	r0, [pc, #80]	; (8003da4 <HAL_PCD_MspInit+0xf4>)
 8003d52:	f000 ffa9 	bl	8004ca8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	480c      	ldr	r0, [pc, #48]	; (8003da4 <HAL_PCD_MspInit+0xf4>)
 8003d72:	f000 ff99 	bl	8004ca8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003d76:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <HAL_PCD_MspInit+0xf0>)
 8003d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d7c:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <HAL_PCD_MspInit+0xf0>)
 8003d7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_PCD_MspInit+0xf0>)
 8003d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003d94:	bf00      	nop
 8003d96:	37e8      	adds	r7, #232	; 0xe8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40080000 	.word	0x40080000
 8003da0:	58024400 	.word	0x58024400
 8003da4:	58020000 	.word	0x58020000

08003da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dac:	e7fe      	b.n	8003dac <NMI_Handler+0x4>

08003dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003db2:	e7fe      	b.n	8003db2 <HardFault_Handler+0x4>

08003db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003db8:	e7fe      	b.n	8003db8 <MemManage_Handler+0x4>

08003dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dbe:	e7fe      	b.n	8003dbe <BusFault_Handler+0x4>

08003dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dc4:	e7fe      	b.n	8003dc4 <UsageFault_Handler+0x4>

08003dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dd8:	bf00      	nop
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003de2:	b480      	push	{r7}
 8003de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003df4:	f000 f9ec 	bl	80041d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	return 1;
 8003e00:	2301      	movs	r3, #1
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <_kill>:

int _kill(int pid, int sig)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e16:	f006 f8f9 	bl	800a00c <__errno>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2216      	movs	r2, #22
 8003e1e:	601a      	str	r2, [r3, #0]
	return -1;
 8003e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <_exit>:

void _exit (int status)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e34:	f04f 31ff 	mov.w	r1, #4294967295
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ffe7 	bl	8003e0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e3e:	e7fe      	b.n	8003e3e <_exit+0x12>

08003e40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	e00a      	b.n	8003e68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e52:	f3af 8000 	nop.w
 8003e56:	4601      	mov	r1, r0
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	60ba      	str	r2, [r7, #8]
 8003e5e:	b2ca      	uxtb	r2, r1
 8003e60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	3301      	adds	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	dbf0      	blt.n	8003e52 <_read+0x12>
	}

return len;
 8003e70:	687b      	ldr	r3, [r7, #4]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b086      	sub	sp, #24
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e86:	2300      	movs	r3, #0
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	e009      	b.n	8003ea0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	60ba      	str	r2, [r7, #8]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	dbf1      	blt.n	8003e8c <_write+0x12>
	}
	return len;
 8003ea8:	687b      	ldr	r3, [r7, #4]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <_close>:

int _close(int file)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8003eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003eda:	605a      	str	r2, [r3, #4]
	return 0;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <_isatty>:

int _isatty(int file)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ef2:	2301      	movs	r3, #1
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <_sbrk+0x5c>)
 8003f26:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <_sbrk+0x60>)
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <_sbrk+0x64>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f38:	4b11      	ldr	r3, [pc, #68]	; (8003f80 <_sbrk+0x64>)
 8003f3a:	4a12      	ldr	r2, [pc, #72]	; (8003f84 <_sbrk+0x68>)
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f3e:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <_sbrk+0x64>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d207      	bcs.n	8003f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f4c:	f006 f85e 	bl	800a00c <__errno>
 8003f50:	4603      	mov	r3, r0
 8003f52:	220c      	movs	r2, #12
 8003f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	e009      	b.n	8003f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f5c:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <_sbrk+0x64>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f62:	4b07      	ldr	r3, [pc, #28]	; (8003f80 <_sbrk+0x64>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	4a05      	ldr	r2, [pc, #20]	; (8003f80 <_sbrk+0x64>)
 8003f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	24080000 	.word	0x24080000
 8003f7c:	00000400 	.word	0x00000400
 8003f80:	24000cd0 	.word	0x24000cd0
 8003f84:	24000ce8 	.word	0x24000ce8

08003f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f8c:	4b37      	ldr	r3, [pc, #220]	; (800406c <SystemInit+0xe4>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f92:	4a36      	ldr	r2, [pc, #216]	; (800406c <SystemInit+0xe4>)
 8003f94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f9c:	4b34      	ldr	r3, [pc, #208]	; (8004070 <SystemInit+0xe8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	2b06      	cmp	r3, #6
 8003fa6:	d807      	bhi.n	8003fb8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fa8:	4b31      	ldr	r3, [pc, #196]	; (8004070 <SystemInit+0xe8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 030f 	bic.w	r3, r3, #15
 8003fb0:	4a2f      	ldr	r2, [pc, #188]	; (8004070 <SystemInit+0xe8>)
 8003fb2:	f043 0307 	orr.w	r3, r3, #7
 8003fb6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fb8:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <SystemInit+0xec>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	; (8004074 <SystemInit+0xec>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <SystemInit+0xec>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fca:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <SystemInit+0xec>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4929      	ldr	r1, [pc, #164]	; (8004074 <SystemInit+0xec>)
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <SystemInit+0xf0>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fd6:	4b26      	ldr	r3, [pc, #152]	; (8004070 <SystemInit+0xe8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fe2:	4b23      	ldr	r3, [pc, #140]	; (8004070 <SystemInit+0xe8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 030f 	bic.w	r3, r3, #15
 8003fea:	4a21      	ldr	r2, [pc, #132]	; (8004070 <SystemInit+0xe8>)
 8003fec:	f043 0307 	orr.w	r3, r3, #7
 8003ff0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <SystemInit+0xec>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003ff8:	4b1e      	ldr	r3, [pc, #120]	; (8004074 <SystemInit+0xec>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <SystemInit+0xec>)
 8004000:	2200      	movs	r2, #0
 8004002:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004004:	4b1b      	ldr	r3, [pc, #108]	; (8004074 <SystemInit+0xec>)
 8004006:	4a1d      	ldr	r2, [pc, #116]	; (800407c <SystemInit+0xf4>)
 8004008:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800400a:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <SystemInit+0xec>)
 800400c:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <SystemInit+0xf8>)
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <SystemInit+0xec>)
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <SystemInit+0xfc>)
 8004014:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004016:	4b17      	ldr	r3, [pc, #92]	; (8004074 <SystemInit+0xec>)
 8004018:	2200      	movs	r2, #0
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800401c:	4b15      	ldr	r3, [pc, #84]	; (8004074 <SystemInit+0xec>)
 800401e:	4a19      	ldr	r2, [pc, #100]	; (8004084 <SystemInit+0xfc>)
 8004020:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004022:	4b14      	ldr	r3, [pc, #80]	; (8004074 <SystemInit+0xec>)
 8004024:	2200      	movs	r2, #0
 8004026:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004028:	4b12      	ldr	r3, [pc, #72]	; (8004074 <SystemInit+0xec>)
 800402a:	4a16      	ldr	r2, [pc, #88]	; (8004084 <SystemInit+0xfc>)
 800402c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <SystemInit+0xec>)
 8004030:	2200      	movs	r2, #0
 8004032:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004034:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <SystemInit+0xec>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <SystemInit+0xec>)
 800403a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800403e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <SystemInit+0xec>)
 8004042:	2200      	movs	r2, #0
 8004044:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <SystemInit+0x100>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <SystemInit+0x104>)
 800404c:	4013      	ands	r3, r2
 800404e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004052:	d202      	bcs.n	800405a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <SystemInit+0x108>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800405a:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <SystemInit+0x10c>)
 800405c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004060:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004062:	bf00      	nop
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00
 8004070:	52002000 	.word	0x52002000
 8004074:	58024400 	.word	0x58024400
 8004078:	eaf6ed7f 	.word	0xeaf6ed7f
 800407c:	02020200 	.word	0x02020200
 8004080:	01ff0000 	.word	0x01ff0000
 8004084:	01010280 	.word	0x01010280
 8004088:	5c001000 	.word	0x5c001000
 800408c:	ffff0000 	.word	0xffff0000
 8004090:	51008108 	.word	0x51008108
 8004094:	52004000 	.word	0x52004000

08004098 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004098:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800409c:	f7ff ff74 	bl	8003f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040a0:	480c      	ldr	r0, [pc, #48]	; (80040d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80040a2:	490d      	ldr	r1, [pc, #52]	; (80040d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80040a4:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80040a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040a8:	e002      	b.n	80040b0 <LoopCopyDataInit>

080040aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ae:	3304      	adds	r3, #4

080040b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b4:	d3f9      	bcc.n	80040aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b6:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80040b8:	4c0a      	ldr	r4, [pc, #40]	; (80040e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80040ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040bc:	e001      	b.n	80040c2 <LoopFillZerobss>

080040be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040c0:	3204      	adds	r2, #4

080040c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c4:	d3fb      	bcc.n	80040be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040c6:	f006 f9f3 	bl	800a4b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040ca:	f7ff f9f1 	bl	80034b0 <main>
  bx  lr
 80040ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80040d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80040d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80040d8:	24000560 	.word	0x24000560
  ldr r2, =_sidata
 80040dc:	08019f9c 	.word	0x08019f9c
  ldr r2, =_sbss
 80040e0:	24000620 	.word	0x24000620
  ldr r4, =_ebss
 80040e4:	24000ce8 	.word	0x24000ce8

080040e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040e8:	e7fe      	b.n	80040e8 <ADC3_IRQHandler>
	...

080040ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f2:	2003      	movs	r0, #3
 80040f4:	f000 f982 	bl	80043fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040f8:	f001 ff5c 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <HAL_Init+0x68>)
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	0a1b      	lsrs	r3, r3, #8
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	4913      	ldr	r1, [pc, #76]	; (8004158 <HAL_Init+0x6c>)
 800410a:	5ccb      	ldrb	r3, [r1, r3]
 800410c:	f003 031f 	and.w	r3, r3, #31
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004116:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <HAL_Init+0x68>)
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	4a0e      	ldr	r2, [pc, #56]	; (8004158 <HAL_Init+0x6c>)
 8004120:	5cd3      	ldrb	r3, [r2, r3]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
 800412c:	4a0b      	ldr	r2, [pc, #44]	; (800415c <HAL_Init+0x70>)
 800412e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004130:	4a0b      	ldr	r2, [pc, #44]	; (8004160 <HAL_Init+0x74>)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004136:	2000      	movs	r0, #0
 8004138:	f000 f814 	bl	8004164 <HAL_InitTick>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e002      	b.n	800414c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004146:	f7ff fc61 	bl	8003a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	58024400 	.word	0x58024400
 8004158:	080185c8 	.word	0x080185c8
 800415c:	240004f0 	.word	0x240004f0
 8004160:	240004ec 	.word	0x240004ec

08004164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800416c:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_InitTick+0x60>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e021      	b.n	80041bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004178:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <HAL_InitTick+0x64>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <HAL_InitTick+0x60>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	4619      	mov	r1, r3
 8004182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004186:	fbb3 f3f1 	udiv	r3, r3, r1
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	4618      	mov	r0, r3
 8004190:	f000 f959 	bl	8004446 <HAL_SYSTICK_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e00e      	b.n	80041bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b0f      	cmp	r3, #15
 80041a2:	d80a      	bhi.n	80041ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041a4:	2200      	movs	r2, #0
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	f000 f931 	bl	8004412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041b0:	4a06      	ldr	r2, [pc, #24]	; (80041cc <HAL_InitTick+0x68>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	240004f8 	.word	0x240004f8
 80041c8:	240004ec 	.word	0x240004ec
 80041cc:	240004f4 	.word	0x240004f4

080041d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d0:	b480      	push	{r7}
 80041d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <HAL_IncTick+0x20>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_IncTick+0x24>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4413      	add	r3, r2
 80041e0:	4a04      	ldr	r2, [pc, #16]	; (80041f4 <HAL_IncTick+0x24>)
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	240004f8 	.word	0x240004f8
 80041f4:	24000cd4 	.word	0x24000cd4

080041f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  return uwTick;
 80041fc:	4b03      	ldr	r3, [pc, #12]	; (800420c <HAL_GetTick+0x14>)
 80041fe:	681b      	ldr	r3, [r3, #0]
}
 8004200:	4618      	mov	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	24000cd4 	.word	0x24000cd4

08004210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004218:	f7ff ffee 	bl	80041f8 <HAL_GetTick>
 800421c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d005      	beq.n	8004236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_Delay+0x44>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004236:	bf00      	nop
 8004238:	f7ff ffde 	bl	80041f8 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d8f7      	bhi.n	8004238 <HAL_Delay+0x28>
  {
  }
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	240004f8 	.word	0x240004f8

08004258 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800425c:	4b03      	ldr	r3, [pc, #12]	; (800426c <HAL_GetREVID+0x14>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0c1b      	lsrs	r3, r3, #16
}
 8004262:	4618      	mov	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	5c001000 	.word	0x5c001000

08004270 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004280:	4904      	ldr	r1, [pc, #16]	; (8004294 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	58000400 	.word	0x58000400

08004298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <__NVIC_SetPriorityGrouping+0x40>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042b4:	4013      	ands	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <__NVIC_SetPriorityGrouping+0x44>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042c6:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <__NVIC_SetPriorityGrouping+0x40>)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	60d3      	str	r3, [r2, #12]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000ed00 	.word	0xe000ed00
 80042dc:	05fa0000 	.word	0x05fa0000

080042e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e4:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <__NVIC_GetPriorityGrouping+0x18>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 0307 	and.w	r3, r3, #7
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	6039      	str	r1, [r7, #0]
 8004306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	db0a      	blt.n	8004326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	490c      	ldr	r1, [pc, #48]	; (8004348 <__NVIC_SetPriority+0x4c>)
 8004316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800431a:	0112      	lsls	r2, r2, #4
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	440b      	add	r3, r1
 8004320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004324:	e00a      	b.n	800433c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	4908      	ldr	r1, [pc, #32]	; (800434c <__NVIC_SetPriority+0x50>)
 800432c:	88fb      	ldrh	r3, [r7, #6]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	3b04      	subs	r3, #4
 8004334:	0112      	lsls	r2, r2, #4
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	440b      	add	r3, r1
 800433a:	761a      	strb	r2, [r3, #24]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000e100 	.word	0xe000e100
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f1c3 0307 	rsb	r3, r3, #7
 800436a:	2b04      	cmp	r3, #4
 800436c:	bf28      	it	cs
 800436e:	2304      	movcs	r3, #4
 8004370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3304      	adds	r3, #4
 8004376:	2b06      	cmp	r3, #6
 8004378:	d902      	bls.n	8004380 <NVIC_EncodePriority+0x30>
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	3b03      	subs	r3, #3
 800437e:	e000      	b.n	8004382 <NVIC_EncodePriority+0x32>
 8004380:	2300      	movs	r3, #0
 8004382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004384:	f04f 32ff 	mov.w	r2, #4294967295
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43da      	mvns	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	401a      	ands	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004398:	f04f 31ff 	mov.w	r1, #4294967295
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fa01 f303 	lsl.w	r3, r1, r3
 80043a2:	43d9      	mvns	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a8:	4313      	orrs	r3, r2
         );
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3724      	adds	r7, #36	; 0x24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c8:	d301      	bcc.n	80043ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00f      	b.n	80043ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ce:	4a0a      	ldr	r2, [pc, #40]	; (80043f8 <SysTick_Config+0x40>)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043d6:	210f      	movs	r1, #15
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295
 80043dc:	f7ff ff8e 	bl	80042fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <SysTick_Config+0x40>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043e6:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <SysTick_Config+0x40>)
 80043e8:	2207      	movs	r2, #7
 80043ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	e000e010 	.word	0xe000e010

080043fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff47 	bl	8004298 <__NVIC_SetPriorityGrouping>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b086      	sub	sp, #24
 8004416:	af00      	add	r7, sp, #0
 8004418:	4603      	mov	r3, r0
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004420:	f7ff ff5e 	bl	80042e0 <__NVIC_GetPriorityGrouping>
 8004424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	6978      	ldr	r0, [r7, #20]
 800442c:	f7ff ff90 	bl	8004350 <NVIC_EncodePriority>
 8004430:	4602      	mov	r2, r0
 8004432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff ff5f 	bl	80042fc <__NVIC_SetPriority>
}
 800443e:	bf00      	nop
 8004440:	3718      	adds	r7, #24
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b082      	sub	sp, #8
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff ffb2 	bl	80043b8 <SysTick_Config>
 8004454:	4603      	mov	r3, r0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0cf      	b.n	8004612 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004478:	2b00      	cmp	r3, #0
 800447a:	d106      	bne.n	800448a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2223      	movs	r2, #35	; 0x23
 8004480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fadb 	bl	8003a40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800448a:	4b64      	ldr	r3, [pc, #400]	; (800461c <HAL_ETH_Init+0x1bc>)
 800448c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004490:	4a62      	ldr	r2, [pc, #392]	; (800461c <HAL_ETH_Init+0x1bc>)
 8004492:	f043 0302 	orr.w	r3, r3, #2
 8004496:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800449a:	4b60      	ldr	r3, [pc, #384]	; (800461c <HAL_ETH_Init+0x1bc>)
 800449c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	7a1b      	ldrb	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80044b0:	2000      	movs	r0, #0
 80044b2:	f7ff fedd 	bl	8004270 <HAL_SYSCFG_ETHInterfaceSelect>
 80044b6:	e003      	b.n	80044c0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80044b8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80044bc:	f7ff fed8 	bl	8004270 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80044c0:	4b57      	ldr	r3, [pc, #348]	; (8004620 <HAL_ETH_Init+0x1c0>)
 80044c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044dc:	f7ff fe8c 	bl	80041f8 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80044e2:	e011      	b.n	8004508 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80044e4:	f7ff fe88 	bl	80041f8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044f2:	d909      	bls.n	8004508 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2204      	movs	r2, #4
 80044f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	22e0      	movs	r2, #224	; 0xe0
 8004500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e084      	b.n	8004612 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1e4      	bne.n	80044e4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f886 	bl	800462c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004520:	f001 fec2 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 8004524:	4603      	mov	r3, r0
 8004526:	4a3f      	ldr	r2, [pc, #252]	; (8004624 <HAL_ETH_Init+0x1c4>)
 8004528:	fba2 2303 	umull	r2, r3, r2, r3
 800452c:	0c9a      	lsrs	r2, r3, #18
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3a01      	subs	r2, #1
 8004534:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa71 	bl	8004a20 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004546:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800454a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6812      	ldr	r2, [r2, #0]
 8004552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004556:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800455a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	22e0      	movs	r2, #224	; 0xe0
 8004576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e049      	b.n	8004612 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004586:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800458a:	4b27      	ldr	r3, [pc, #156]	; (8004628 <HAL_ETH_Init+0x1c8>)
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6952      	ldr	r2, [r2, #20]
 8004592:	0051      	lsls	r1, r2, #1
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	430b      	orrs	r3, r1
 800459a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800459e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fad9 	bl	8004b5a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fb1f 	bl	8004bec <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	3305      	adds	r3, #5
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	021a      	lsls	r2, r3, #8
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4619      	mov	r1, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	3303      	adds	r3, #3
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	061a      	lsls	r2, r3, #24
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	3302      	adds	r3, #2
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	041b      	lsls	r3, r3, #16
 80045e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	3301      	adds	r3, #1
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80045ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80045fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80045fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2210      	movs	r2, #16
 800460c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	58024400 	.word	0x58024400
 8004620:	58000400 	.word	0x58000400
 8004624:	431bde83 	.word	0x431bde83
 8004628:	ffff8001 	.word	0xffff8001

0800462c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800463c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004644:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004646:	f001 fe2f 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 800464a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4a1e      	ldr	r2, [pc, #120]	; (80046c8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d908      	bls.n	8004666 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d804      	bhi.n	8004666 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	e027      	b.n	80046b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d908      	bls.n	8004680 <HAL_ETH_SetMDIOClockRange+0x54>
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d204      	bcs.n	8004680 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	e01a      	b.n	80046b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4a13      	ldr	r2, [pc, #76]	; (80046d0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d303      	bcc.n	8004690 <HAL_ETH_SetMDIOClockRange+0x64>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d911      	bls.n	80046b4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4a10      	ldr	r2, [pc, #64]	; (80046d4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d908      	bls.n	80046aa <HAL_ETH_SetMDIOClockRange+0x7e>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d804      	bhi.n	80046aa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	e005      	b.n	80046b6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e000      	b.n	80046b6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80046b4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	01312cff 	.word	0x01312cff
 80046cc:	02160ebf 	.word	0x02160ebf
 80046d0:	03938700 	.word	0x03938700
 80046d4:	05f5e0ff 	.word	0x05f5e0ff
 80046d8:	08f0d17f 	.word	0x08f0d17f

080046dc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80046ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	791b      	ldrb	r3, [r3, #4]
 80046f4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80046f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	7b1b      	ldrb	r3, [r3, #12]
 80046fc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80046fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	7b5b      	ldrb	r3, [r3, #13]
 8004704:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004706:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	7b9b      	ldrb	r3, [r3, #14]
 800470c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800470e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	7bdb      	ldrb	r3, [r3, #15]
 8004714:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004716:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	7c12      	ldrb	r2, [r2, #16]
 800471c:	2a00      	cmp	r2, #0
 800471e:	d102      	bne.n	8004726 <ETH_SetMACConfig+0x4a>
 8004720:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004724:	e000      	b.n	8004728 <ETH_SetMACConfig+0x4c>
 8004726:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004728:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	7c52      	ldrb	r2, [r2, #17]
 800472e:	2a00      	cmp	r2, #0
 8004730:	d102      	bne.n	8004738 <ETH_SetMACConfig+0x5c>
 8004732:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004736:	e000      	b.n	800473a <ETH_SetMACConfig+0x5e>
 8004738:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800473a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	7c9b      	ldrb	r3, [r3, #18]
 8004740:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004742:	431a      	orrs	r2, r3
               macconf->Speed |
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004748:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800474e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	7f1b      	ldrb	r3, [r3, #28]
 8004754:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004756:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	7f5b      	ldrb	r3, [r3, #29]
 800475c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800475e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004760:	683a      	ldr	r2, [r7, #0]
 8004762:	7f92      	ldrb	r2, [r2, #30]
 8004764:	2a00      	cmp	r2, #0
 8004766:	d102      	bne.n	800476e <ETH_SetMACConfig+0x92>
 8004768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800476c:	e000      	b.n	8004770 <ETH_SetMACConfig+0x94>
 800476e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004770:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	7fdb      	ldrb	r3, [r3, #31]
 8004776:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004778:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004780:	2a00      	cmp	r2, #0
 8004782:	d102      	bne.n	800478a <ETH_SetMACConfig+0xae>
 8004784:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004788:	e000      	b.n	800478c <ETH_SetMACConfig+0xb0>
 800478a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800478c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004792:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800479c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	4b56      	ldr	r3, [pc, #344]	; (8004908 <ETH_SetMACConfig+0x22c>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	430b      	orrs	r3, r1
 80047b8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047be:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047c6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80047c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047d0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80047d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047da:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80047dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80047e4:	2a00      	cmp	r2, #0
 80047e6:	d102      	bne.n	80047ee <ETH_SetMACConfig+0x112>
 80047e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047ec:	e000      	b.n	80047f0 <ETH_SetMACConfig+0x114>
 80047ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80047f0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	4b42      	ldr	r3, [pc, #264]	; (800490c <ETH_SetMACConfig+0x230>)
 8004802:	4013      	ands	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	430b      	orrs	r3, r1
 800480c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004814:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	4b3a      	ldr	r3, [pc, #232]	; (8004910 <ETH_SetMACConfig+0x234>)
 8004826:	4013      	ands	r3, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	68f9      	ldr	r1, [r7, #12]
 800482e:	430b      	orrs	r3, r1
 8004830:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004838:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800483e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004846:	2a00      	cmp	r2, #0
 8004848:	d101      	bne.n	800484e <ETH_SetMACConfig+0x172>
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	e000      	b.n	8004850 <ETH_SetMACConfig+0x174>
 800484e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004850:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004856:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004862:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004866:	4013      	ands	r3, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	430b      	orrs	r3, r1
 8004870:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004878:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004880:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	f023 0103 	bic.w	r1, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	430a      	orrs	r2, r1
 800489a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80048a6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	d101      	bne.n	80048ca <ETH_SetMACConfig+0x1ee>
 80048c6:	2240      	movs	r2, #64	; 0x40
 80048c8:	e000      	b.n	80048cc <ETH_SetMACConfig+0x1f0>
 80048ca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80048cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80048d4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80048d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80048de:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80048e0:	4313      	orrs	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80048ec:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	00048083 	.word	0x00048083
 800490c:	c0f88000 	.word	0xc0f88000
 8004910:	fffffef0 	.word	0xfffffef0

08004914 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	4b38      	ldr	r3, [pc, #224]	; (8004a0c <ETH_SetDMAConfig+0xf8>)
 800492a:	4013      	ands	r3, r2
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	6811      	ldr	r1, [r2, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	430b      	orrs	r3, r1
 8004936:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800493a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	791b      	ldrb	r3, [r3, #4]
 8004940:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004946:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	7b1b      	ldrb	r3, [r3, #12]
 800494c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <ETH_SetDMAConfig+0xfc>)
 800495e:	4013      	ands	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	430b      	orrs	r3, r1
 8004968:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800496c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	7b5b      	ldrb	r3, [r3, #13]
 8004972:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004984:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004988:	4b22      	ldr	r3, [pc, #136]	; (8004a14 <ETH_SetDMAConfig+0x100>)
 800498a:	4013      	ands	r3, r2
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	68f9      	ldr	r1, [r7, #12]
 8004992:	430b      	orrs	r3, r1
 8004994:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004998:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	7d1b      	ldrb	r3, [r3, #20]
 80049a4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80049a6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	7f5b      	ldrb	r3, [r3, #29]
 80049ac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80049be:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <ETH_SetDMAConfig+0x104>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	430b      	orrs	r3, r1
 80049ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049ce:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	7f1b      	ldrb	r3, [r3, #28]
 80049d6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <ETH_SetDMAConfig+0x108>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	430b      	orrs	r3, r1
 80049f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049fc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	ffff87fd 	.word	0xffff87fd
 8004a10:	ffff2ffe 	.word	0xffff2ffe
 8004a14:	fffec000 	.word	0xfffec000
 8004a18:	ffc0efef 	.word	0xffc0efef
 8004a1c:	7fc0ffff 	.word	0x7fc0ffff

08004a20 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b0a4      	sub	sp, #144	; 0x90
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a60:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004a78:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004a7c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004a84:	2300      	movs	r3, #0
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004a94:	2300      	movs	r3, #0
 8004a96:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004ab8:	2320      	movs	r3, #32
 8004aba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004aca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004ad0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ad4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004adc:	2302      	movs	r3, #2
 8004ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004afa:	2300      	movs	r3, #0
 8004afc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b08:	4619      	mov	r1, r3
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fde6 	bl	80046dc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004b10:	2301      	movs	r3, #1
 8004b12:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004b14:	2301      	movs	r3, #1
 8004b16:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004b2a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b2e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004b34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b38:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004b40:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fee1 	bl	8004914 <ETH_SetDMAConfig>
}
 8004b52:	bf00      	nop
 8004b54:	3790      	adds	r7, #144	; 0x90
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e01d      	b.n	8004ba4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68d9      	ldr	r1, [r3, #12]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	440b      	add	r3, r1
 8004b78:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2200      	movs	r2, #0
 8004b84:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	3206      	adds	r2, #6
 8004b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d9de      	bls.n	8004b68 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2303      	movs	r3, #3
 8004bbc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68da      	ldr	r2, [r3, #12]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bcc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bdc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e023      	b.n	8004c42 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6919      	ldr	r1, [r3, #16]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4613      	mov	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2200      	movs	r2, #0
 8004c16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2200      	movs	r2, #0
 8004c22:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	2200      	movs	r2, #0
 8004c28:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	3212      	adds	r2, #18
 8004c38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d9d8      	bls.n	8004bfa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2303      	movs	r3, #3
 8004c72:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c82:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c96:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b089      	sub	sp, #36	; 0x24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004cb6:	4b89      	ldr	r3, [pc, #548]	; (8004edc <HAL_GPIO_Init+0x234>)
 8004cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cba:	e194      	b.n	8004fe6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	4013      	ands	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8186 	beq.w	8004fe0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d005      	beq.n	8004cec <HAL_GPIO_Init+0x44>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d130      	bne.n	8004d4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d22:	2201      	movs	r2, #1
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	091b      	lsrs	r3, r3, #4
 8004d38:	f003 0201 	and.w	r2, r3, #1
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d017      	beq.n	8004d8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	2203      	movs	r2, #3
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d123      	bne.n	8004dde <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	08da      	lsrs	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3208      	adds	r2, #8
 8004d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	220f      	movs	r2, #15
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	43db      	mvns	r3, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4013      	ands	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	08da      	lsrs	r2, r3, #3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3208      	adds	r2, #8
 8004dd8:	69b9      	ldr	r1, [r7, #24]
 8004dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	2203      	movs	r2, #3
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 0203 	and.w	r2, r3, #3
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 80e0 	beq.w	8004fe0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e20:	4b2f      	ldr	r3, [pc, #188]	; (8004ee0 <HAL_GPIO_Init+0x238>)
 8004e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e26:	4a2e      	ldr	r2, [pc, #184]	; (8004ee0 <HAL_GPIO_Init+0x238>)
 8004e28:	f043 0302 	orr.w	r3, r3, #2
 8004e2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e30:	4b2b      	ldr	r3, [pc, #172]	; (8004ee0 <HAL_GPIO_Init+0x238>)
 8004e32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e3e:	4a29      	ldr	r2, [pc, #164]	; (8004ee4 <HAL_GPIO_Init+0x23c>)
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	089b      	lsrs	r3, r3, #2
 8004e44:	3302      	adds	r3, #2
 8004e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	220f      	movs	r2, #15
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	43db      	mvns	r3, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a20      	ldr	r2, [pc, #128]	; (8004ee8 <HAL_GPIO_Init+0x240>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d052      	beq.n	8004f10 <HAL_GPIO_Init+0x268>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a1f      	ldr	r2, [pc, #124]	; (8004eec <HAL_GPIO_Init+0x244>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d031      	beq.n	8004ed6 <HAL_GPIO_Init+0x22e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1e      	ldr	r2, [pc, #120]	; (8004ef0 <HAL_GPIO_Init+0x248>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d02b      	beq.n	8004ed2 <HAL_GPIO_Init+0x22a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <HAL_GPIO_Init+0x24c>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d025      	beq.n	8004ece <HAL_GPIO_Init+0x226>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a1c      	ldr	r2, [pc, #112]	; (8004ef8 <HAL_GPIO_Init+0x250>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d01f      	beq.n	8004eca <HAL_GPIO_Init+0x222>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1b      	ldr	r2, [pc, #108]	; (8004efc <HAL_GPIO_Init+0x254>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d019      	beq.n	8004ec6 <HAL_GPIO_Init+0x21e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1a      	ldr	r2, [pc, #104]	; (8004f00 <HAL_GPIO_Init+0x258>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d013      	beq.n	8004ec2 <HAL_GPIO_Init+0x21a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a19      	ldr	r2, [pc, #100]	; (8004f04 <HAL_GPIO_Init+0x25c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d00d      	beq.n	8004ebe <HAL_GPIO_Init+0x216>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <HAL_GPIO_Init+0x260>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d007      	beq.n	8004eba <HAL_GPIO_Init+0x212>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <HAL_GPIO_Init+0x264>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d101      	bne.n	8004eb6 <HAL_GPIO_Init+0x20e>
 8004eb2:	2309      	movs	r3, #9
 8004eb4:	e02d      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004eb6:	230a      	movs	r3, #10
 8004eb8:	e02b      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	e029      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004ebe:	2307      	movs	r3, #7
 8004ec0:	e027      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004ec2:	2306      	movs	r3, #6
 8004ec4:	e025      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004ec6:	2305      	movs	r3, #5
 8004ec8:	e023      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004eca:	2304      	movs	r3, #4
 8004ecc:	e021      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e01f      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e01d      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e01b      	b.n	8004f12 <HAL_GPIO_Init+0x26a>
 8004eda:	bf00      	nop
 8004edc:	58000080 	.word	0x58000080
 8004ee0:	58024400 	.word	0x58024400
 8004ee4:	58000400 	.word	0x58000400
 8004ee8:	58020000 	.word	0x58020000
 8004eec:	58020400 	.word	0x58020400
 8004ef0:	58020800 	.word	0x58020800
 8004ef4:	58020c00 	.word	0x58020c00
 8004ef8:	58021000 	.word	0x58021000
 8004efc:	58021400 	.word	0x58021400
 8004f00:	58021800 	.word	0x58021800
 8004f04:	58021c00 	.word	0x58021c00
 8004f08:	58022000 	.word	0x58022000
 8004f0c:	58022400 	.word	0x58022400
 8004f10:	2300      	movs	r3, #0
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	f002 0203 	and.w	r2, r2, #3
 8004f18:	0092      	lsls	r2, r2, #2
 8004f1a:	4093      	lsls	r3, r2
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f22:	4938      	ldr	r1, [pc, #224]	; (8005004 <HAL_GPIO_Init+0x35c>)
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	089b      	lsrs	r3, r3, #2
 8004f28:	3302      	adds	r3, #2
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	43db      	mvns	r3, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f47f ae63 	bne.w	8004cbc <HAL_GPIO_Init+0x14>
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	3724      	adds	r7, #36	; 0x24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	58000400 	.word	0x58000400

08005008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	807b      	strh	r3, [r7, #2]
 8005014:	4613      	mov	r3, r2
 8005016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005018:	787b      	ldrb	r3, [r7, #1]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800501e:	887a      	ldrh	r2, [r7, #2]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005024:	e003      	b.n	800502e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005026:	887b      	ldrh	r3, [r7, #2]
 8005028:	041a      	lsls	r2, r3, #16
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	619a      	str	r2, [r3, #24]
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800504c:	887a      	ldrh	r2, [r7, #2]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4013      	ands	r3, r2
 8005052:	041a      	lsls	r2, r3, #16
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	43d9      	mvns	r1, r3
 8005058:	887b      	ldrh	r3, [r7, #2]
 800505a:	400b      	ands	r3, r1
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	619a      	str	r2, [r3, #24]
}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800506e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005070:	b08f      	sub	sp, #60	; 0x3c
 8005072:	af0a      	add	r7, sp, #40	; 0x28
 8005074:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e116      	b.n	80052ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fe fe08 	bl	8003cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2203      	movs	r2, #3
 80050a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d102      	bne.n	80050ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f004 f94c 	bl	800935c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	687e      	ldr	r6, [r7, #4]
 80050cc:	466d      	mov	r5, sp
 80050ce:	f106 0410 	add.w	r4, r6, #16
 80050d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050de:	e885 0003 	stmia.w	r5, {r0, r1}
 80050e2:	1d33      	adds	r3, r6, #4
 80050e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050e6:	6838      	ldr	r0, [r7, #0]
 80050e8:	f004 f8ca 	bl	8009280 <USB_CoreInit>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2202      	movs	r2, #2
 80050f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e0d7      	b.n	80052ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f004 f93a 	bl	800937e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
 800510e:	e04a      	b.n	80051a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005110:	7bfa      	ldrb	r2, [r7, #15]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	333d      	adds	r3, #61	; 0x3d
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	333c      	adds	r3, #60	; 0x3c
 8005134:	7bfa      	ldrb	r2, [r7, #15]
 8005136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005138:	7bfa      	ldrb	r2, [r7, #15]
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	b298      	uxth	r0, r3
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	3356      	adds	r3, #86	; 0x56
 800514c:	4602      	mov	r2, r0
 800514e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005150:	7bfa      	ldrb	r2, [r7, #15]
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	4613      	mov	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	3340      	adds	r3, #64	; 0x40
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	3344      	adds	r3, #68	; 0x44
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005178:	7bfa      	ldrb	r2, [r7, #15]
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4613      	mov	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	440b      	add	r3, r1
 8005186:	3348      	adds	r3, #72	; 0x48
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800518c:	7bfa      	ldrb	r2, [r7, #15]
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	334c      	adds	r3, #76	; 0x4c
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	3301      	adds	r3, #1
 80051a4:	73fb      	strb	r3, [r7, #15]
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d3af      	bcc.n	8005110 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b0:	2300      	movs	r3, #0
 80051b2:	73fb      	strb	r3, [r7, #15]
 80051b4:	e044      	b.n	8005240 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051b6:	7bfa      	ldrb	r2, [r7, #15]
 80051b8:	6879      	ldr	r1, [r7, #4]
 80051ba:	4613      	mov	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	6879      	ldr	r1, [r7, #4]
 80051d0:	4613      	mov	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	4413      	add	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	440b      	add	r3, r1
 80051da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051de:	7bfa      	ldrb	r2, [r7, #15]
 80051e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051e2:	7bfa      	ldrb	r2, [r7, #15]
 80051e4:	6879      	ldr	r1, [r7, #4]
 80051e6:	4613      	mov	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	440b      	add	r3, r1
 80051f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051f8:	7bfa      	ldrb	r2, [r7, #15]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4413      	add	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4413      	add	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	3301      	adds	r3, #1
 800523e:	73fb      	strb	r3, [r7, #15]
 8005240:	7bfa      	ldrb	r2, [r7, #15]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d3b5      	bcc.n	80051b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	687e      	ldr	r6, [r7, #4]
 8005252:	466d      	mov	r5, sp
 8005254:	f106 0410 	add.w	r4, r6, #16
 8005258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800525a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800525c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800525e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005260:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005264:	e885 0003 	stmia.w	r5, {r0, r1}
 8005268:	1d33      	adds	r3, r6, #4
 800526a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800526c:	6838      	ldr	r0, [r7, #0]
 800526e:	f004 f8d3 	bl	8009418 <USB_DevInit>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d005      	beq.n	8005284 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e014      	b.n	80052ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	2b01      	cmp	r3, #1
 800529a:	d102      	bne.n	80052a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f80b 	bl	80052b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f004 fa91 	bl	80097ce <USB_DevDisconnect>

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080052b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052e6:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_PCDEx_ActivateLPM+0x44>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	10000003 	.word	0x10000003

08005300 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005308:	4b19      	ldr	r3, [pc, #100]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b04      	cmp	r3, #4
 8005312:	d00a      	beq.n	800532a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005314:	4b16      	ldr	r3, [pc, #88]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	d001      	beq.n	8005326 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e01f      	b.n	8005366 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	e01d      	b.n	8005366 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800532a:	4b11      	ldr	r3, [pc, #68]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f023 0207 	bic.w	r2, r3, #7
 8005332:	490f      	ldr	r1, [pc, #60]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4313      	orrs	r3, r2
 8005338:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800533a:	f7fe ff5d 	bl	80041f8 <HAL_GetTick>
 800533e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005340:	e009      	b.n	8005356 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005342:	f7fe ff59 	bl	80041f8 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005350:	d901      	bls.n	8005356 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e007      	b.n	8005366 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_PWREx_ConfigSupply+0x70>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800535e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005362:	d1ee      	bne.n	8005342 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	58024800 	.word	0x58024800

08005374 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800537e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005382:	60d3      	str	r3, [r2, #12]
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	58024800 	.word	0x58024800

08005394 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	; 0x30
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d102      	bne.n	80053a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f000 bc48 	b.w	8005c38 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 8088 	beq.w	80054c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b6:	4b99      	ldr	r3, [pc, #612]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053c0:	4b96      	ldr	r3, [pc, #600]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	2b10      	cmp	r3, #16
 80053ca:	d007      	beq.n	80053dc <HAL_RCC_OscConfig+0x48>
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	2b18      	cmp	r3, #24
 80053d0:	d111      	bne.n	80053f6 <HAL_RCC_OscConfig+0x62>
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	f003 0303 	and.w	r3, r3, #3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d10c      	bne.n	80053f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053dc:	4b8f      	ldr	r3, [pc, #572]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d06d      	beq.n	80054c4 <HAL_RCC_OscConfig+0x130>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d169      	bne.n	80054c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f000 bc21 	b.w	8005c38 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fe:	d106      	bne.n	800540e <HAL_RCC_OscConfig+0x7a>
 8005400:	4b86      	ldr	r3, [pc, #536]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a85      	ldr	r2, [pc, #532]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	e02e      	b.n	800546c <HAL_RCC_OscConfig+0xd8>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10c      	bne.n	8005430 <HAL_RCC_OscConfig+0x9c>
 8005416:	4b81      	ldr	r3, [pc, #516]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a80      	ldr	r2, [pc, #512]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800541c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	4b7e      	ldr	r3, [pc, #504]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a7d      	ldr	r2, [pc, #500]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	e01d      	b.n	800546c <HAL_RCC_OscConfig+0xd8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005438:	d10c      	bne.n	8005454 <HAL_RCC_OscConfig+0xc0>
 800543a:	4b78      	ldr	r3, [pc, #480]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a77      	ldr	r2, [pc, #476]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b75      	ldr	r3, [pc, #468]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a74      	ldr	r2, [pc, #464]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e00b      	b.n	800546c <HAL_RCC_OscConfig+0xd8>
 8005454:	4b71      	ldr	r3, [pc, #452]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a70      	ldr	r2, [pc, #448]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800545a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	4b6e      	ldr	r3, [pc, #440]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a6d      	ldr	r2, [pc, #436]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800546a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d013      	beq.n	800549c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005474:	f7fe fec0 	bl	80041f8 <HAL_GetTick>
 8005478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547c:	f7fe febc 	bl	80041f8 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e3d4      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800548e:	4b63      	ldr	r3, [pc, #396]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0xe8>
 800549a:	e014      	b.n	80054c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fe feac 	bl	80041f8 <HAL_GetTick>
 80054a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054a4:	f7fe fea8 	bl	80041f8 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b64      	cmp	r3, #100	; 0x64
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e3c0      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80054b6:	4b59      	ldr	r3, [pc, #356]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x110>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 80ca 	beq.w	8005668 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054d4:	4b51      	ldr	r3, [pc, #324]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054de:	4b4f      	ldr	r3, [pc, #316]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d007      	beq.n	80054fa <HAL_RCC_OscConfig+0x166>
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	2b18      	cmp	r3, #24
 80054ee:	d156      	bne.n	800559e <HAL_RCC_OscConfig+0x20a>
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d151      	bne.n	800559e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054fa:	4b48      	ldr	r3, [pc, #288]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_RCC_OscConfig+0x17e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e392      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005512:	4b42      	ldr	r3, [pc, #264]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f023 0219 	bic.w	r2, r3, #25
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	493f      	ldr	r1, [pc, #252]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005520:	4313      	orrs	r3, r2
 8005522:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fe fe68 	bl	80041f8 <HAL_GetTick>
 8005528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552c:	f7fe fe64 	bl	80041f8 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e37c      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800553e:	4b37      	ldr	r3, [pc, #220]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554a:	f7fe fe85 	bl	8004258 <HAL_GetREVID>
 800554e:	4603      	mov	r3, r0
 8005550:	f241 0203 	movw	r2, #4099	; 0x1003
 8005554:	4293      	cmp	r3, r2
 8005556:	d817      	bhi.n	8005588 <HAL_RCC_OscConfig+0x1f4>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d108      	bne.n	8005572 <HAL_RCC_OscConfig+0x1de>
 8005560:	4b2e      	ldr	r3, [pc, #184]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005568:	4a2c      	ldr	r2, [pc, #176]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800556a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005570:	e07a      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005572:	4b2a      	ldr	r3, [pc, #168]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	031b      	lsls	r3, r3, #12
 8005580:	4926      	ldr	r1, [pc, #152]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005586:	e06f      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005588:	4b24      	ldr	r3, [pc, #144]	; (800561c <HAL_RCC_OscConfig+0x288>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	061b      	lsls	r3, r3, #24
 8005596:	4921      	ldr	r1, [pc, #132]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005598:	4313      	orrs	r3, r2
 800559a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800559c:	e064      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d047      	beq.n	8005636 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f023 0219 	bic.w	r2, r3, #25
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	491a      	ldr	r1, [pc, #104]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fe fe1e 	bl	80041f8 <HAL_GetTick>
 80055bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055c0:	f7fe fe1a 	bl	80041f8 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e332      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055de:	f7fe fe3b 	bl	8004258 <HAL_GetREVID>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d819      	bhi.n	8005620 <HAL_RCC_OscConfig+0x28c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d108      	bne.n	8005606 <HAL_RCC_OscConfig+0x272>
 80055f4:	4b09      	ldr	r3, [pc, #36]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055fc:	4a07      	ldr	r2, [pc, #28]	; (800561c <HAL_RCC_OscConfig+0x288>)
 80055fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005602:	6053      	str	r3, [r2, #4]
 8005604:	e030      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	031b      	lsls	r3, r3, #12
 8005614:	4901      	ldr	r1, [pc, #4]	; (800561c <HAL_RCC_OscConfig+0x288>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
 800561a:	e025      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
 800561c:	58024400 	.word	0x58024400
 8005620:	4b9a      	ldr	r3, [pc, #616]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	061b      	lsls	r3, r3, #24
 800562e:	4997      	ldr	r1, [pc, #604]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005630:	4313      	orrs	r3, r2
 8005632:	604b      	str	r3, [r1, #4]
 8005634:	e018      	b.n	8005668 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005636:	4b95      	ldr	r3, [pc, #596]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a94      	ldr	r2, [pc, #592]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005642:	f7fe fdd9 	bl	80041f8 <HAL_GetTick>
 8005646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800564a:	f7fe fdd5 	bl	80041f8 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e2ed      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800565c:	4b8b      	ldr	r3, [pc, #556]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80a9 	beq.w	80057c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005676:	4b85      	ldr	r3, [pc, #532]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005680:	4b82      	ldr	r3, [pc, #520]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d007      	beq.n	800569c <HAL_RCC_OscConfig+0x308>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b18      	cmp	r3, #24
 8005690:	d13a      	bne.n	8005708 <HAL_RCC_OscConfig+0x374>
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f003 0303 	and.w	r3, r3, #3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d135      	bne.n	8005708 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800569c:	4b7b      	ldr	r3, [pc, #492]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_RCC_OscConfig+0x320>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	2b80      	cmp	r3, #128	; 0x80
 80056ae:	d001      	beq.n	80056b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e2c1      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056b4:	f7fe fdd0 	bl	8004258 <HAL_GetREVID>
 80056b8:	4603      	mov	r3, r0
 80056ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80056be:	4293      	cmp	r3, r2
 80056c0:	d817      	bhi.n	80056f2 <HAL_RCC_OscConfig+0x35e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a1b      	ldr	r3, [r3, #32]
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d108      	bne.n	80056dc <HAL_RCC_OscConfig+0x348>
 80056ca:	4b70      	ldr	r3, [pc, #448]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056d2:	4a6e      	ldr	r2, [pc, #440]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056da:	e075      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056dc:	4b6b      	ldr	r3, [pc, #428]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	069b      	lsls	r3, r3, #26
 80056ea:	4968      	ldr	r1, [pc, #416]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056f0:	e06a      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056f2:	4b66      	ldr	r3, [pc, #408]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	061b      	lsls	r3, r3, #24
 8005700:	4962      	ldr	r1, [pc, #392]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005702:	4313      	orrs	r3, r2
 8005704:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005706:	e05f      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d042      	beq.n	8005796 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005710:	4b5e      	ldr	r3, [pc, #376]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a5d      	ldr	r2, [pc, #372]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800571a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fe fd6c 	bl	80041f8 <HAL_GetTick>
 8005720:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005724:	f7fe fd68 	bl	80041f8 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e280      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005736:	4b55      	ldr	r3, [pc, #340]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005742:	f7fe fd89 	bl	8004258 <HAL_GetREVID>
 8005746:	4603      	mov	r3, r0
 8005748:	f241 0203 	movw	r2, #4099	; 0x1003
 800574c:	4293      	cmp	r3, r2
 800574e:	d817      	bhi.n	8005780 <HAL_RCC_OscConfig+0x3ec>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	2b20      	cmp	r3, #32
 8005756:	d108      	bne.n	800576a <HAL_RCC_OscConfig+0x3d6>
 8005758:	4b4c      	ldr	r3, [pc, #304]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005760:	4a4a      	ldr	r2, [pc, #296]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005766:	6053      	str	r3, [r2, #4]
 8005768:	e02e      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
 800576a:	4b48      	ldr	r3, [pc, #288]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	069b      	lsls	r3, r3, #26
 8005778:	4944      	ldr	r1, [pc, #272]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	604b      	str	r3, [r1, #4]
 800577e:	e023      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
 8005780:	4b42      	ldr	r3, [pc, #264]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	493f      	ldr	r1, [pc, #252]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005790:	4313      	orrs	r3, r2
 8005792:	60cb      	str	r3, [r1, #12]
 8005794:	e018      	b.n	80057c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005796:	4b3d      	ldr	r3, [pc, #244]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a3c      	ldr	r2, [pc, #240]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800579c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a2:	f7fe fd29 	bl	80041f8 <HAL_GetTick>
 80057a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80057aa:	f7fe fd25 	bl	80041f8 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e23d      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057bc:	4b33      	ldr	r3, [pc, #204]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d036      	beq.n	8005842 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057dc:	4b2b      	ldr	r3, [pc, #172]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80057de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e0:	4a2a      	ldr	r2, [pc, #168]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fe fd06 	bl	80041f8 <HAL_GetTick>
 80057ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fe fd02 	bl	80041f8 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e21a      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005802:	4b22      	ldr	r3, [pc, #136]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x45c>
 800580e:	e018      	b.n	8005842 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005810:	4b1e      	ldr	r3, [pc, #120]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005814:	4a1d      	ldr	r2, [pc, #116]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fe fcec 	bl	80041f8 <HAL_GetTick>
 8005820:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005824:	f7fe fce8 	bl	80041f8 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e200      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005836:	4b15      	ldr	r3, [pc, #84]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d039      	beq.n	80058c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d01c      	beq.n	8005890 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005856:	4b0d      	ldr	r3, [pc, #52]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a0c      	ldr	r2, [pc, #48]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800585c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005860:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005862:	f7fe fcc9 	bl	80041f8 <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800586a:	f7fe fcc5 	bl	80041f8 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e1dd      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800587c:	4b03      	ldr	r3, [pc, #12]	; (800588c <HAL_RCC_OscConfig+0x4f8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x4d6>
 8005888:	e01b      	b.n	80058c2 <HAL_RCC_OscConfig+0x52e>
 800588a:	bf00      	nop
 800588c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005890:	4b9b      	ldr	r3, [pc, #620]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a9a      	ldr	r2, [pc, #616]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005896:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800589a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800589c:	f7fe fcac 	bl	80041f8 <HAL_GetTick>
 80058a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058a4:	f7fe fca8 	bl	80041f8 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e1c0      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058b6:	4b92      	ldr	r3, [pc, #584]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8081 	beq.w	80059d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058d0:	4b8c      	ldr	r3, [pc, #560]	; (8005b04 <HAL_RCC_OscConfig+0x770>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a8b      	ldr	r2, [pc, #556]	; (8005b04 <HAL_RCC_OscConfig+0x770>)
 80058d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058dc:	f7fe fc8c 	bl	80041f8 <HAL_GetTick>
 80058e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e4:	f7fe fc88 	bl	80041f8 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b64      	cmp	r3, #100	; 0x64
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e1a0      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058f6:	4b83      	ldr	r3, [pc, #524]	; (8005b04 <HAL_RCC_OscConfig+0x770>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d106      	bne.n	8005918 <HAL_RCC_OscConfig+0x584>
 800590a:	4b7d      	ldr	r3, [pc, #500]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	4a7c      	ldr	r2, [pc, #496]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005910:	f043 0301 	orr.w	r3, r3, #1
 8005914:	6713      	str	r3, [r2, #112]	; 0x70
 8005916:	e02d      	b.n	8005974 <HAL_RCC_OscConfig+0x5e0>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10c      	bne.n	800593a <HAL_RCC_OscConfig+0x5a6>
 8005920:	4b77      	ldr	r3, [pc, #476]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005924:	4a76      	ldr	r2, [pc, #472]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	6713      	str	r3, [r2, #112]	; 0x70
 800592c:	4b74      	ldr	r3, [pc, #464]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	4a73      	ldr	r2, [pc, #460]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005932:	f023 0304 	bic.w	r3, r3, #4
 8005936:	6713      	str	r3, [r2, #112]	; 0x70
 8005938:	e01c      	b.n	8005974 <HAL_RCC_OscConfig+0x5e0>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b05      	cmp	r3, #5
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x5c8>
 8005942:	4b6f      	ldr	r3, [pc, #444]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a6e      	ldr	r2, [pc, #440]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005948:	f043 0304 	orr.w	r3, r3, #4
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
 800594e:	4b6c      	ldr	r3, [pc, #432]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a6b      	ldr	r2, [pc, #428]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005954:	f043 0301 	orr.w	r3, r3, #1
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	e00b      	b.n	8005974 <HAL_RCC_OscConfig+0x5e0>
 800595c:	4b68      	ldr	r3, [pc, #416]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	4a67      	ldr	r2, [pc, #412]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	6713      	str	r3, [r2, #112]	; 0x70
 8005968:	4b65      	ldr	r3, [pc, #404]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	4a64      	ldr	r2, [pc, #400]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800596e:	f023 0304 	bic.w	r3, r3, #4
 8005972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d015      	beq.n	80059a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800597c:	f7fe fc3c 	bl	80041f8 <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005982:	e00a      	b.n	800599a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005984:	f7fe fc38 	bl	80041f8 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e14e      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800599a:	4b59      	ldr	r3, [pc, #356]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 800599c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0ee      	beq.n	8005984 <HAL_RCC_OscConfig+0x5f0>
 80059a6:	e014      	b.n	80059d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a8:	f7fe fc26 	bl	80041f8 <HAL_GetTick>
 80059ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059ae:	e00a      	b.n	80059c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b0:	f7fe fc22 	bl	80041f8 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e138      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059c6:	4b4e      	ldr	r3, [pc, #312]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1ee      	bne.n	80059b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 812d 	beq.w	8005c36 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80059dc:	4b48      	ldr	r3, [pc, #288]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e4:	2b18      	cmp	r3, #24
 80059e6:	f000 80bd 	beq.w	8005b64 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	f040 809e 	bne.w	8005b30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f4:	4b42      	ldr	r3, [pc, #264]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a41      	ldr	r2, [pc, #260]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 80059fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fe fbfa 	bl	80041f8 <HAL_GetTick>
 8005a04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a08:	f7fe fbf6 	bl	80041f8 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e10e      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a1a:	4b39      	ldr	r3, [pc, #228]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a2a:	4b37      	ldr	r3, [pc, #220]	; (8005b08 <HAL_RCC_OscConfig+0x774>)
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a36:	0112      	lsls	r2, r2, #4
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	4931      	ldr	r1, [pc, #196]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	628b      	str	r3, [r1, #40]	; 0x28
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	3b01      	subs	r3, #1
 8005a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	025b      	lsls	r3, r3, #9
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	061b      	lsls	r3, r3, #24
 8005a6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a70:	4923      	ldr	r1, [pc, #140]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	4a21      	ldr	r2, [pc, #132]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a82:	4b1f      	ldr	r3, [pc, #124]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a86:	4b21      	ldr	r3, [pc, #132]	; (8005b0c <HAL_RCC_OscConfig+0x778>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a8e:	00d2      	lsls	r2, r2, #3
 8005a90:	491b      	ldr	r1, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a96:	4b1a      	ldr	r3, [pc, #104]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	f023 020c 	bic.w	r2, r3, #12
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	4917      	ldr	r1, [pc, #92]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005aa8:	4b15      	ldr	r3, [pc, #84]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	f023 0202 	bic.w	r2, r3, #2
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab4:	4912      	ldr	r1, [pc, #72]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005aba:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abe:	4a10      	ldr	r2, [pc, #64]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ac6:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	4a0d      	ldr	r2, [pc, #52]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ade:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	4a07      	ldr	r2, [pc, #28]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005ae4:	f043 0301 	orr.w	r3, r3, #1
 8005ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <HAL_RCC_OscConfig+0x76c>)
 8005af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af6:	f7fe fb7f 	bl	80041f8 <HAL_GetTick>
 8005afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005afc:	e011      	b.n	8005b22 <HAL_RCC_OscConfig+0x78e>
 8005afe:	bf00      	nop
 8005b00:	58024400 	.word	0x58024400
 8005b04:	58024800 	.word	0x58024800
 8005b08:	fffffc0c 	.word	0xfffffc0c
 8005b0c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fe fb72 	bl	80041f8 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e08a      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b22:	4b47      	ldr	r3, [pc, #284]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0f0      	beq.n	8005b10 <HAL_RCC_OscConfig+0x77c>
 8005b2e:	e082      	b.n	8005c36 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b30:	4b43      	ldr	r3, [pc, #268]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a42      	ldr	r2, [pc, #264]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005b36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fe fb5c 	bl	80041f8 <HAL_GetTick>
 8005b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fe fb58 	bl	80041f8 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e070      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b56:	4b3a      	ldr	r3, [pc, #232]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1f0      	bne.n	8005b44 <HAL_RCC_OscConfig+0x7b0>
 8005b62:	e068      	b.n	8005c36 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b64:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b6a:	4b35      	ldr	r3, [pc, #212]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d031      	beq.n	8005bdc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f003 0203 	and.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d12a      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	091b      	lsrs	r3, r3, #4
 8005b8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d122      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d11a      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	0a5b      	lsrs	r3, r3, #9
 8005baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d111      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d108      	bne.n	8005bdc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	0e1b      	lsrs	r3, r3, #24
 8005bce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e02b      	b.n	8005c38 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005be0:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005be4:	08db      	lsrs	r3, r3, #3
 8005be6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d01f      	beq.n	8005c36 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005bf6:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	4a11      	ldr	r2, [pc, #68]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005bfc:	f023 0301 	bic.w	r3, r3, #1
 8005c00:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c02:	f7fe faf9 	bl	80041f8 <HAL_GetTick>
 8005c06:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005c08:	bf00      	nop
 8005c0a:	f7fe faf5 	bl	80041f8 <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d0f9      	beq.n	8005c0a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c16:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <HAL_RCC_OscConfig+0x8b0>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c22:	00d2      	lsls	r2, r2, #3
 8005c24:	4906      	ldr	r1, [pc, #24]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	4a04      	ldr	r2, [pc, #16]	; (8005c40 <HAL_RCC_OscConfig+0x8ac>)
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3730      	adds	r7, #48	; 0x30
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	58024400 	.word	0x58024400
 8005c44:	ffff0007 	.word	0xffff0007

08005c48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e19c      	b.n	8005f96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c5c:	4b8a      	ldr	r3, [pc, #552]	; (8005e88 <HAL_RCC_ClockConfig+0x240>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d910      	bls.n	8005c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6a:	4b87      	ldr	r3, [pc, #540]	; (8005e88 <HAL_RCC_ClockConfig+0x240>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f023 020f 	bic.w	r2, r3, #15
 8005c72:	4985      	ldr	r1, [pc, #532]	; (8005e88 <HAL_RCC_ClockConfig+0x240>)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7a:	4b83      	ldr	r3, [pc, #524]	; (8005e88 <HAL_RCC_ClockConfig+0x240>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d001      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e184      	b.n	8005f96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d010      	beq.n	8005cba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	4b7b      	ldr	r3, [pc, #492]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d908      	bls.n	8005cba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ca8:	4b78      	ldr	r3, [pc, #480]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	4975      	ldr	r1, [pc, #468]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0308 	and.w	r3, r3, #8
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d010      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695a      	ldr	r2, [r3, #20]
 8005cca:	4b70      	ldr	r3, [pc, #448]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d908      	bls.n	8005ce8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cd6:	4b6d      	ldr	r3, [pc, #436]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	496a      	ldr	r1, [pc, #424]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d010      	beq.n	8005d16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	4b64      	ldr	r3, [pc, #400]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d908      	bls.n	8005d16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d04:	4b61      	ldr	r3, [pc, #388]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	495e      	ldr	r1, [pc, #376]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d010      	beq.n	8005d44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69da      	ldr	r2, [r3, #28]
 8005d26:	4b59      	ldr	r3, [pc, #356]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d908      	bls.n	8005d44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005d32:	4b56      	ldr	r3, [pc, #344]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	4953      	ldr	r1, [pc, #332]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d010      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	4b4d      	ldr	r3, [pc, #308]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d908      	bls.n	8005d72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d60:	4b4a      	ldr	r3, [pc, #296]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f023 020f 	bic.w	r2, r3, #15
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4947      	ldr	r1, [pc, #284]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d055      	beq.n	8005e2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d7e:	4b43      	ldr	r3, [pc, #268]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	4940      	ldr	r1, [pc, #256]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d107      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d98:	4b3c      	ldr	r3, [pc, #240]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d121      	bne.n	8005de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e0f6      	b.n	8005f96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d107      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005db0:	4b36      	ldr	r3, [pc, #216]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d115      	bne.n	8005de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e0ea      	b.n	8005f96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005dc8:	4b30      	ldr	r3, [pc, #192]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d109      	bne.n	8005de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0de      	b.n	8005f96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dd8:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e0d6      	b.n	8005f96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005de8:	4b28      	ldr	r3, [pc, #160]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f023 0207 	bic.w	r2, r3, #7
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	4925      	ldr	r1, [pc, #148]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfa:	f7fe f9fd 	bl	80041f8 <HAL_GetTick>
 8005dfe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e00:	e00a      	b.n	8005e18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e02:	f7fe f9f9 	bl	80041f8 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e0be      	b.n	8005f96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e18:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d1eb      	bne.n	8005e02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d208      	bcs.n	8005e58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e46:	4b11      	ldr	r3, [pc, #68]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f023 020f 	bic.w	r2, r3, #15
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	490e      	ldr	r1, [pc, #56]	; (8005e8c <HAL_RCC_ClockConfig+0x244>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e58:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <HAL_RCC_ClockConfig+0x240>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d214      	bcs.n	8005e90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e66:	4b08      	ldr	r3, [pc, #32]	; (8005e88 <HAL_RCC_ClockConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 020f 	bic.w	r2, r3, #15
 8005e6e:	4906      	ldr	r1, [pc, #24]	; (8005e88 <HAL_RCC_ClockConfig+0x240>)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e76:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <HAL_RCC_ClockConfig+0x240>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d005      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e086      	b.n	8005f96 <HAL_RCC_ClockConfig+0x34e>
 8005e88:	52002000 	.word	0x52002000
 8005e8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d010      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691a      	ldr	r2, [r3, #16]
 8005ea0:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d208      	bcs.n	8005ebe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005eac:	4b3c      	ldr	r3, [pc, #240]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	4939      	ldr	r1, [pc, #228]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d010      	beq.n	8005eec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695a      	ldr	r2, [r3, #20]
 8005ece:	4b34      	ldr	r3, [pc, #208]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d208      	bcs.n	8005eec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005eda:	4b31      	ldr	r3, [pc, #196]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	492e      	ldr	r1, [pc, #184]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0310 	and.w	r3, r3, #16
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d010      	beq.n	8005f1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699a      	ldr	r2, [r3, #24]
 8005efc:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d208      	bcs.n	8005f1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f08:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	4922      	ldr	r1, [pc, #136]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d010      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69da      	ldr	r2, [r3, #28]
 8005f2a:	4b1d      	ldr	r3, [pc, #116]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d208      	bcs.n	8005f48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005f36:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	4917      	ldr	r1, [pc, #92]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f48:	f000 f834 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	4b14      	ldr	r3, [pc, #80]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	4912      	ldr	r1, [pc, #72]	; (8005fa4 <HAL_RCC_ClockConfig+0x35c>)
 8005f5a:	5ccb      	ldrb	r3, [r1, r3]
 8005f5c:	f003 031f 	and.w	r3, r3, #31
 8005f60:	fa22 f303 	lsr.w	r3, r2, r3
 8005f64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f66:	4b0e      	ldr	r3, [pc, #56]	; (8005fa0 <HAL_RCC_ClockConfig+0x358>)
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	4a0d      	ldr	r2, [pc, #52]	; (8005fa4 <HAL_RCC_ClockConfig+0x35c>)
 8005f70:	5cd3      	ldrb	r3, [r2, r3]
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	4a0a      	ldr	r2, [pc, #40]	; (8005fa8 <HAL_RCC_ClockConfig+0x360>)
 8005f7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f80:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <HAL_RCC_ClockConfig+0x364>)
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <HAL_RCC_ClockConfig+0x368>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fe f8ea 	bl	8004164 <HAL_InitTick>
 8005f90:	4603      	mov	r3, r0
 8005f92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	080185c8 	.word	0x080185c8
 8005fa8:	240004f0 	.word	0x240004f0
 8005fac:	240004ec 	.word	0x240004ec
 8005fb0:	240004f4 	.word	0x240004f4

08005fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b089      	sub	sp, #36	; 0x24
 8005fb8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fba:	4bb3      	ldr	r3, [pc, #716]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fc2:	2b18      	cmp	r3, #24
 8005fc4:	f200 8155 	bhi.w	8006272 <HAL_RCC_GetSysClockFreq+0x2be>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08006035 	.word	0x08006035
 8005fd4:	08006273 	.word	0x08006273
 8005fd8:	08006273 	.word	0x08006273
 8005fdc:	08006273 	.word	0x08006273
 8005fe0:	08006273 	.word	0x08006273
 8005fe4:	08006273 	.word	0x08006273
 8005fe8:	08006273 	.word	0x08006273
 8005fec:	08006273 	.word	0x08006273
 8005ff0:	0800605b 	.word	0x0800605b
 8005ff4:	08006273 	.word	0x08006273
 8005ff8:	08006273 	.word	0x08006273
 8005ffc:	08006273 	.word	0x08006273
 8006000:	08006273 	.word	0x08006273
 8006004:	08006273 	.word	0x08006273
 8006008:	08006273 	.word	0x08006273
 800600c:	08006273 	.word	0x08006273
 8006010:	08006061 	.word	0x08006061
 8006014:	08006273 	.word	0x08006273
 8006018:	08006273 	.word	0x08006273
 800601c:	08006273 	.word	0x08006273
 8006020:	08006273 	.word	0x08006273
 8006024:	08006273 	.word	0x08006273
 8006028:	08006273 	.word	0x08006273
 800602c:	08006273 	.word	0x08006273
 8006030:	08006067 	.word	0x08006067
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006034:	4b94      	ldr	r3, [pc, #592]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006040:	4b91      	ldr	r3, [pc, #580]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	08db      	lsrs	r3, r3, #3
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	4a90      	ldr	r2, [pc, #576]	; (800628c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800604c:	fa22 f303 	lsr.w	r3, r2, r3
 8006050:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006052:	e111      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006054:	4b8d      	ldr	r3, [pc, #564]	; (800628c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006056:	61bb      	str	r3, [r7, #24]
      break;
 8006058:	e10e      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800605a:	4b8d      	ldr	r3, [pc, #564]	; (8006290 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800605c:	61bb      	str	r3, [r7, #24]
      break;
 800605e:	e10b      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006060:	4b8c      	ldr	r3, [pc, #560]	; (8006294 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006062:	61bb      	str	r3, [r7, #24]
      break;
 8006064:	e108      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006066:	4b88      	ldr	r3, [pc, #544]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006070:	4b85      	ldr	r3, [pc, #532]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800607a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800607c:	4b82      	ldr	r3, [pc, #520]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006086:	4b80      	ldr	r3, [pc, #512]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608a:	08db      	lsrs	r3, r3, #3
 800608c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 80e1 	beq.w	800626c <HAL_RCC_GetSysClockFreq+0x2b8>
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	f000 8083 	beq.w	80061b8 <HAL_RCC_GetSysClockFreq+0x204>
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	f200 80a1 	bhi.w	80061fc <HAL_RCC_GetSysClockFreq+0x248>
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d003      	beq.n	80060c8 <HAL_RCC_GetSysClockFreq+0x114>
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d056      	beq.n	8006174 <HAL_RCC_GetSysClockFreq+0x1c0>
 80060c6:	e099      	b.n	80061fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060c8:	4b6f      	ldr	r3, [pc, #444]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0320 	and.w	r3, r3, #32
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d02d      	beq.n	8006130 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80060d4:	4b6c      	ldr	r3, [pc, #432]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	08db      	lsrs	r3, r3, #3
 80060da:	f003 0303 	and.w	r3, r3, #3
 80060de:	4a6b      	ldr	r2, [pc, #428]	; (800628c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
 80060e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	ee07 3a90 	vmov	s15, r3
 80060ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fe:	4b62      	ldr	r3, [pc, #392]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006112:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006298 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800612e:	e087      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800629c <HAL_RCC_GetSysClockFreq+0x2e8>
 800613e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006142:	4b51      	ldr	r3, [pc, #324]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006152:	ed97 6a02 	vldr	s12, [r7, #8]
 8006156:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006298 <HAL_RCC_GetSysClockFreq+0x2e4>
 800615a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006172:	e065      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80062a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006186:	4b40      	ldr	r3, [pc, #256]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006196:	ed97 6a02 	vldr	s12, [r7, #8]
 800619a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006298 <HAL_RCC_GetSysClockFreq+0x2e4>
 800619e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061b6:	e043      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80062a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80061c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ca:	4b2f      	ldr	r3, [pc, #188]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061da:	ed97 6a02 	vldr	s12, [r7, #8]
 80061de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006298 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80061fa:	e021      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	eddf 6a26 	vldr	s13, [pc, #152]	; 80062a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800620a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620e:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006222:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006298 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800623e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006240:	4b11      	ldr	r3, [pc, #68]	; (8006288 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	0a5b      	lsrs	r3, r3, #9
 8006246:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800624a:	3301      	adds	r3, #1
 800624c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	ee07 3a90 	vmov	s15, r3
 8006254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006258:	edd7 6a07 	vldr	s13, [r7, #28]
 800625c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006264:	ee17 3a90 	vmov	r3, s15
 8006268:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800626a:	e005      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	61bb      	str	r3, [r7, #24]
      break;
 8006270:	e002      	b.n	8006278 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006272:	4b07      	ldr	r3, [pc, #28]	; (8006290 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006274:	61bb      	str	r3, [r7, #24]
      break;
 8006276:	bf00      	nop
  }

  return sysclockfreq;
 8006278:	69bb      	ldr	r3, [r7, #24]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3724      	adds	r7, #36	; 0x24
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	58024400 	.word	0x58024400
 800628c:	03d09000 	.word	0x03d09000
 8006290:	003d0900 	.word	0x003d0900
 8006294:	007a1200 	.word	0x007a1200
 8006298:	46000000 	.word	0x46000000
 800629c:	4c742400 	.word	0x4c742400
 80062a0:	4a742400 	.word	0x4a742400
 80062a4:	4af42400 	.word	0x4af42400

080062a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80062ae:	f7ff fe81 	bl	8005fb4 <HAL_RCC_GetSysClockFreq>
 80062b2:	4602      	mov	r2, r0
 80062b4:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	0a1b      	lsrs	r3, r3, #8
 80062ba:	f003 030f 	and.w	r3, r3, #15
 80062be:	490f      	ldr	r1, [pc, #60]	; (80062fc <HAL_RCC_GetHCLKFreq+0x54>)
 80062c0:	5ccb      	ldrb	r3, [r1, r3]
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	fa22 f303 	lsr.w	r3, r2, r3
 80062ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062cc:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	4a09      	ldr	r2, [pc, #36]	; (80062fc <HAL_RCC_GetHCLKFreq+0x54>)
 80062d6:	5cd3      	ldrb	r3, [r2, r3]
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	fa22 f303 	lsr.w	r3, r2, r3
 80062e2:	4a07      	ldr	r2, [pc, #28]	; (8006300 <HAL_RCC_GetHCLKFreq+0x58>)
 80062e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062e6:	4a07      	ldr	r2, [pc, #28]	; (8006304 <HAL_RCC_GetHCLKFreq+0x5c>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80062ec:	4b04      	ldr	r3, [pc, #16]	; (8006300 <HAL_RCC_GetHCLKFreq+0x58>)
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	58024400 	.word	0x58024400
 80062fc:	080185c8 	.word	0x080185c8
 8006300:	240004f0 	.word	0x240004f0
 8006304:	240004ec 	.word	0x240004ec

08006308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800630c:	f7ff ffcc 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 8006310:	4602      	mov	r2, r0
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	091b      	lsrs	r3, r3, #4
 8006318:	f003 0307 	and.w	r3, r3, #7
 800631c:	4904      	ldr	r1, [pc, #16]	; (8006330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800631e:	5ccb      	ldrb	r3, [r1, r3]
 8006320:	f003 031f 	and.w	r3, r3, #31
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006328:	4618      	mov	r0, r3
 800632a:	bd80      	pop	{r7, pc}
 800632c:	58024400 	.word	0x58024400
 8006330:	080185c8 	.word	0x080185c8

08006334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006338:	f7ff ffb6 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 800633c:	4602      	mov	r2, r0
 800633e:	4b06      	ldr	r3, [pc, #24]	; (8006358 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	0a1b      	lsrs	r3, r3, #8
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	4904      	ldr	r1, [pc, #16]	; (800635c <HAL_RCC_GetPCLK2Freq+0x28>)
 800634a:	5ccb      	ldrb	r3, [r1, r3]
 800634c:	f003 031f 	and.w	r3, r3, #31
 8006350:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006354:	4618      	mov	r0, r3
 8006356:	bd80      	pop	{r7, pc}
 8006358:	58024400 	.word	0x58024400
 800635c:	080185c8 	.word	0x080185c8

08006360 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006364:	b0ca      	sub	sp, #296	; 0x128
 8006366:	af00      	add	r7, sp, #0
 8006368:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800636c:	2300      	movs	r3, #0
 800636e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006372:	2300      	movs	r3, #0
 8006374:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006384:	2500      	movs	r5, #0
 8006386:	ea54 0305 	orrs.w	r3, r4, r5
 800638a:	d049      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006392:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006396:	d02f      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800639c:	d828      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800639e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a2:	d01a      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80063a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063a8:	d822      	bhi.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80063ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b2:	d007      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80063b4:	e01c      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b6:	4bb8      	ldr	r3, [pc, #736]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	4ab7      	ldr	r2, [pc, #732]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80063bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80063c2:	e01a      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c8:	3308      	adds	r3, #8
 80063ca:	2102      	movs	r1, #2
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 fc8f 	bl	8007cf0 <RCCEx_PLL2_Config>
 80063d2:	4603      	mov	r3, r0
 80063d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80063d8:	e00f      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063de:	3328      	adds	r3, #40	; 0x28
 80063e0:	2102      	movs	r1, #2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fd36 	bl	8007e54 <RCCEx_PLL3_Config>
 80063e8:	4603      	mov	r3, r0
 80063ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80063ee:	e004      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80063f6:	e000      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80063f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006402:	4ba5      	ldr	r3, [pc, #660]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006406:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006410:	4aa1      	ldr	r2, [pc, #644]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006412:	430b      	orrs	r3, r1
 8006414:	6513      	str	r3, [r2, #80]	; 0x50
 8006416:	e003      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800641c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006428:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800642c:	f04f 0900 	mov.w	r9, #0
 8006430:	ea58 0309 	orrs.w	r3, r8, r9
 8006434:	d047      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800643a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643c:	2b04      	cmp	r3, #4
 800643e:	d82a      	bhi.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006440:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	0800645d 	.word	0x0800645d
 800644c:	0800646b 	.word	0x0800646b
 8006450:	08006481 	.word	0x08006481
 8006454:	0800649f 	.word	0x0800649f
 8006458:	0800649f 	.word	0x0800649f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645c:	4b8e      	ldr	r3, [pc, #568]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800645e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006460:	4a8d      	ldr	r2, [pc, #564]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006468:	e01a      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646e:	3308      	adds	r3, #8
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f001 fc3c 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800647e:	e00f      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006484:	3328      	adds	r3, #40	; 0x28
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f001 fce3 	bl	8007e54 <RCCEx_PLL3_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006494:	e004      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800649e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064a8:	4b7b      	ldr	r3, [pc, #492]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ac:	f023 0107 	bic.w	r1, r3, #7
 80064b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	4a78      	ldr	r2, [pc, #480]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80064b8:	430b      	orrs	r3, r1
 80064ba:	6513      	str	r3, [r2, #80]	; 0x50
 80064bc:	e003      	b.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80064d2:	f04f 0b00 	mov.w	fp, #0
 80064d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80064da:	d04c      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80064dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064e6:	d030      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80064e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ec:	d829      	bhi.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064ee:	2bc0      	cmp	r3, #192	; 0xc0
 80064f0:	d02d      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80064f2:	2bc0      	cmp	r3, #192	; 0xc0
 80064f4:	d825      	bhi.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064f6:	2b80      	cmp	r3, #128	; 0x80
 80064f8:	d018      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80064fa:	2b80      	cmp	r3, #128	; 0x80
 80064fc:	d821      	bhi.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006502:	2b40      	cmp	r3, #64	; 0x40
 8006504:	d007      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006506:	e01c      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006508:	4b63      	ldr	r3, [pc, #396]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800650a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800650c:	4a62      	ldr	r2, [pc, #392]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800650e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006514:	e01c      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651a:	3308      	adds	r3, #8
 800651c:	2100      	movs	r1, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f001 fbe6 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006524:	4603      	mov	r3, r0
 8006526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800652a:	e011      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800652c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006530:	3328      	adds	r3, #40	; 0x28
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f001 fc8d 	bl	8007e54 <RCCEx_PLL3_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006540:	e006      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006548:	e002      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800654a:	bf00      	nop
 800654c:	e000      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800654e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006558:	4b4f      	ldr	r3, [pc, #316]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800655a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8006560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006566:	4a4c      	ldr	r2, [pc, #304]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006568:	430b      	orrs	r3, r1
 800656a:	6513      	str	r3, [r2, #80]	; 0x50
 800656c:	e003      	b.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006572:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006582:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006586:	2300      	movs	r3, #0
 8006588:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800658c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8006590:	460b      	mov	r3, r1
 8006592:	4313      	orrs	r3, r2
 8006594:	d053      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800659a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800659e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065a2:	d035      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80065a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065a8:	d82e      	bhi.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065ae:	d031      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80065b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065b4:	d828      	bhi.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ba:	d01a      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80065bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c0:	d822      	bhi.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80065c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ca:	d007      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80065cc:	e01c      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ce:	4b32      	ldr	r3, [pc, #200]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	4a31      	ldr	r2, [pc, #196]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80065d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80065da:	e01c      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065e0:	3308      	adds	r3, #8
 80065e2:	2100      	movs	r1, #0
 80065e4:	4618      	mov	r0, r3
 80065e6:	f001 fb83 	bl	8007cf0 <RCCEx_PLL2_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80065f0:	e011      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f6:	3328      	adds	r3, #40	; 0x28
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fc2a 	bl	8007e54 <RCCEx_PLL3_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006606:	e006      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800660e:	e002      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006616:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10b      	bne.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800661e:	4b1e      	ldr	r3, [pc, #120]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006622:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800662a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800662e:	4a1a      	ldr	r2, [pc, #104]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006630:	430b      	orrs	r3, r1
 8006632:	6593      	str	r3, [r2, #88]	; 0x58
 8006634:	e003      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006636:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800663a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800663e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800664a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800664e:	2300      	movs	r3, #0
 8006650:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006654:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	d056      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006662:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800666a:	d038      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800666c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006670:	d831      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006672:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006676:	d034      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006678:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800667c:	d82b      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800667e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006682:	d01d      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006688:	d825      	bhi.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d006      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800668e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006692:	d00a      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006694:	e01f      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006696:	bf00      	nop
 8006698:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800669c:	4ba2      	ldr	r3, [pc, #648]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	4aa1      	ldr	r2, [pc, #644]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066a8:	e01c      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ae:	3308      	adds	r3, #8
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 fb1c 	bl	8007cf0 <RCCEx_PLL2_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80066be:	e011      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066c4:	3328      	adds	r3, #40	; 0x28
 80066c6:	2100      	movs	r1, #0
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 fbc3 	bl	8007e54 <RCCEx_PLL3_Config>
 80066ce:	4603      	mov	r3, r0
 80066d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066d4:	e006      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066dc:	e002      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80066de:	bf00      	nop
 80066e0:	e000      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80066e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d10b      	bne.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80066ec:	4b8e      	ldr	r3, [pc, #568]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80066f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066fc:	4a8a      	ldr	r2, [pc, #552]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80066fe:	430b      	orrs	r3, r1
 8006700:	6593      	str	r3, [r2, #88]	; 0x58
 8006702:	e003      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800670c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006718:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800671c:	2300      	movs	r3, #0
 800671e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006722:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8006726:	460b      	mov	r3, r1
 8006728:	4313      	orrs	r3, r2
 800672a:	d03a      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006732:	2b30      	cmp	r3, #48	; 0x30
 8006734:	d01f      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006736:	2b30      	cmp	r3, #48	; 0x30
 8006738:	d819      	bhi.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800673a:	2b20      	cmp	r3, #32
 800673c:	d00c      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800673e:	2b20      	cmp	r3, #32
 8006740:	d815      	bhi.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d019      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006746:	2b10      	cmp	r3, #16
 8006748:	d111      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800674a:	4b77      	ldr	r3, [pc, #476]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800674c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674e:	4a76      	ldr	r2, [pc, #472]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006756:	e011      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800675c:	3308      	adds	r3, #8
 800675e:	2102      	movs	r1, #2
 8006760:	4618      	mov	r0, r3
 8006762:	f001 fac5 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006766:	4603      	mov	r3, r0
 8006768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800676c:	e006      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006774:	e002      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006776:	bf00      	nop
 8006778:	e000      	b.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800677a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800677c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006784:	4b68      	ldr	r3, [pc, #416]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006788:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800678c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006792:	4a65      	ldr	r2, [pc, #404]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006794:	430b      	orrs	r3, r1
 8006796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006798:	e003      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800679e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80067ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80067b2:	2300      	movs	r3, #0
 80067b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80067b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80067bc:	460b      	mov	r3, r1
 80067be:	4313      	orrs	r3, r2
 80067c0:	d051      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80067c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067cc:	d035      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80067ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067d2:	d82e      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80067d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067d8:	d031      	beq.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80067da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067de:	d828      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80067e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e4:	d01a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80067e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ea:	d822      	bhi.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80067f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f4:	d007      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80067f6:	e01c      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f8:	4b4b      	ldr	r3, [pc, #300]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	4a4a      	ldr	r2, [pc, #296]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80067fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006804:	e01c      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800680a:	3308      	adds	r3, #8
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f001 fa6e 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800681a:	e011      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800681c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006820:	3328      	adds	r3, #40	; 0x28
 8006822:	2100      	movs	r1, #0
 8006824:	4618      	mov	r0, r3
 8006826:	f001 fb15 	bl	8007e54 <RCCEx_PLL3_Config>
 800682a:	4603      	mov	r3, r0
 800682c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006830:	e006      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006838:	e002      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800683e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006848:	4b37      	ldr	r3, [pc, #220]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800684a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800684c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006856:	4a34      	ldr	r2, [pc, #208]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006858:	430b      	orrs	r3, r1
 800685a:	6513      	str	r3, [r2, #80]	; 0x50
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006862:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006876:	2300      	movs	r3, #0
 8006878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800687c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8006880:	460b      	mov	r3, r1
 8006882:	4313      	orrs	r3, r2
 8006884:	d056      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800688a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800688c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006890:	d033      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006892:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006896:	d82c      	bhi.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006898:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800689c:	d02f      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800689e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068a2:	d826      	bhi.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068a8:	d02b      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80068aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068ae:	d820      	bhi.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068b4:	d012      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80068b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ba:	d81a      	bhi.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d022      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80068c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c4:	d115      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ca:	3308      	adds	r3, #8
 80068cc:	2101      	movs	r1, #1
 80068ce:	4618      	mov	r0, r3
 80068d0:	f001 fa0e 	bl	8007cf0 <RCCEx_PLL2_Config>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80068da:	e015      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e0:	3328      	adds	r3, #40	; 0x28
 80068e2:	2101      	movs	r1, #1
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 fab5 	bl	8007e54 <RCCEx_PLL3_Config>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80068f0:	e00a      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068f8:	e006      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068fa:	bf00      	nop
 80068fc:	e004      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80068fe:	bf00      	nop
 8006900:	e002      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006902:	bf00      	nop
 8006904:	e000      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10d      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006914:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800691c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800691e:	4a02      	ldr	r2, [pc, #8]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006920:	430b      	orrs	r3, r1
 8006922:	6513      	str	r3, [r2, #80]	; 0x50
 8006924:	e006      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006926:	bf00      	nop
 8006928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006930:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006944:	2300      	movs	r3, #0
 8006946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800694a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800694e:	460b      	mov	r3, r1
 8006950:	4313      	orrs	r3, r2
 8006952:	d055      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006958:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800695c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006960:	d033      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006966:	d82c      	bhi.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696c:	d02f      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800696e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006972:	d826      	bhi.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006974:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006978:	d02b      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800697a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800697e:	d820      	bhi.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006984:	d012      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800698a:	d81a      	bhi.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d022      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006990:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006994:	d115      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800699a:	3308      	adds	r3, #8
 800699c:	2101      	movs	r1, #1
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 f9a6 	bl	8007cf0 <RCCEx_PLL2_Config>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80069aa:	e015      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b0:	3328      	adds	r3, #40	; 0x28
 80069b2:	2101      	movs	r1, #1
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 fa4d 	bl	8007e54 <RCCEx_PLL3_Config>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80069c0:	e00a      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80069c8:	e006      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80069ca:	bf00      	nop
 80069cc:	e004      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80069ce:	bf00      	nop
 80069d0:	e002      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80069d2:	bf00      	nop
 80069d4:	e000      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80069d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10b      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80069e0:	4ba3      	ldr	r3, [pc, #652]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80069e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069f0:	4a9f      	ldr	r2, [pc, #636]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069f2:	430b      	orrs	r3, r1
 80069f4:	6593      	str	r3, [r2, #88]	; 0x58
 80069f6:	e003      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a08:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	d037      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2a:	d00e      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006a2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a30:	d816      	bhi.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d018      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a3a:	d111      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a3c:	4b8c      	ldr	r3, [pc, #560]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a40:	4a8b      	ldr	r2, [pc, #556]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a48:	e00f      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4e:	3308      	adds	r3, #8
 8006a50:	2101      	movs	r1, #1
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 f94c 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006a5e:	e004      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a66:	e000      	b.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a72:	4b7f      	ldr	r3, [pc, #508]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a76:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a80:	4a7b      	ldr	r2, [pc, #492]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006a82:	430b      	orrs	r3, r1
 8006a84:	6513      	str	r3, [r2, #80]	; 0x50
 8006a86:	e003      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006aa6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	4313      	orrs	r3, r2
 8006aae:	d039      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d81c      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006aba:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006afd 	.word	0x08006afd
 8006ac4:	08006ad1 	.word	0x08006ad1
 8006ac8:	08006adf 	.word	0x08006adf
 8006acc:	08006afd 	.word	0x08006afd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad0:	4b67      	ldr	r3, [pc, #412]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	4a66      	ldr	r2, [pc, #408]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ada:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006adc:	e00f      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f001 f902 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006af2:	e004      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006afa:	e000      	b.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b06:	4b5a      	ldr	r3, [pc, #360]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	f023 0103 	bic.w	r1, r3, #3
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b14:	4a56      	ldr	r2, [pc, #344]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b1a:	e003      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f000 809f 	beq.w	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b46:	4b4b      	ldr	r3, [pc, #300]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a4a      	ldr	r2, [pc, #296]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b52:	f7fd fb51 	bl	80041f8 <HAL_GetTick>
 8006b56:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b5a:	e00b      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b5c:	f7fd fb4c 	bl	80041f8 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b64      	cmp	r3, #100	; 0x64
 8006b6a:	d903      	bls.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b72:	e005      	b.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b74:	4b3f      	ldr	r3, [pc, #252]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0ed      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d179      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006b88:	4b39      	ldr	r3, [pc, #228]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006b8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b94:	4053      	eors	r3, r2
 8006b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d015      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b9e:	4b34      	ldr	r3, [pc, #208]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006baa:	4b31      	ldr	r3, [pc, #196]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bae:	4a30      	ldr	r2, [pc, #192]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bb4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bb6:	4b2e      	ldr	r3, [pc, #184]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	4a2d      	ldr	r2, [pc, #180]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bc2:	4a2b      	ldr	r2, [pc, #172]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bd6:	d118      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd8:	f7fd fb0e 	bl	80041f8 <HAL_GetTick>
 8006bdc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006be0:	e00d      	b.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be2:	f7fd fb09 	bl	80041f8 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006bec:	1ad2      	subs	r2, r2, r3
 8006bee:	f241 3388 	movw	r3, #5000	; 0x1388
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d903      	bls.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006bfc:	e005      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bfe:	4b1c      	ldr	r3, [pc, #112]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0eb      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d129      	bne.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c22:	d10e      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006c24:	4b12      	ldr	r3, [pc, #72]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c34:	091a      	lsrs	r2, r3, #4
 8006c36:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	4a0d      	ldr	r2, [pc, #52]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	6113      	str	r3, [r2, #16]
 8006c40:	e005      	b.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006c42:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c4c:	6113      	str	r3, [r2, #16]
 8006c4e:	4b08      	ldr	r3, [pc, #32]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c5e:	4a04      	ldr	r2, [pc, #16]	; (8006c70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6713      	str	r3, [r2, #112]	; 0x70
 8006c64:	e00e      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8006c6e:	e009      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006c70:	58024400 	.word	0x58024400
 8006c74:	58024800 	.word	0x58024800
 8006c78:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f002 0301 	and.w	r3, r2, #1
 8006c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c94:	2300      	movs	r3, #0
 8006c96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f000 8089 	beq.w	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cac:	2b28      	cmp	r3, #40	; 0x28
 8006cae:	d86b      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006cb0:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006d91 	.word	0x08006d91
 8006cbc:	08006d89 	.word	0x08006d89
 8006cc0:	08006d89 	.word	0x08006d89
 8006cc4:	08006d89 	.word	0x08006d89
 8006cc8:	08006d89 	.word	0x08006d89
 8006ccc:	08006d89 	.word	0x08006d89
 8006cd0:	08006d89 	.word	0x08006d89
 8006cd4:	08006d89 	.word	0x08006d89
 8006cd8:	08006d5d 	.word	0x08006d5d
 8006cdc:	08006d89 	.word	0x08006d89
 8006ce0:	08006d89 	.word	0x08006d89
 8006ce4:	08006d89 	.word	0x08006d89
 8006ce8:	08006d89 	.word	0x08006d89
 8006cec:	08006d89 	.word	0x08006d89
 8006cf0:	08006d89 	.word	0x08006d89
 8006cf4:	08006d89 	.word	0x08006d89
 8006cf8:	08006d73 	.word	0x08006d73
 8006cfc:	08006d89 	.word	0x08006d89
 8006d00:	08006d89 	.word	0x08006d89
 8006d04:	08006d89 	.word	0x08006d89
 8006d08:	08006d89 	.word	0x08006d89
 8006d0c:	08006d89 	.word	0x08006d89
 8006d10:	08006d89 	.word	0x08006d89
 8006d14:	08006d89 	.word	0x08006d89
 8006d18:	08006d91 	.word	0x08006d91
 8006d1c:	08006d89 	.word	0x08006d89
 8006d20:	08006d89 	.word	0x08006d89
 8006d24:	08006d89 	.word	0x08006d89
 8006d28:	08006d89 	.word	0x08006d89
 8006d2c:	08006d89 	.word	0x08006d89
 8006d30:	08006d89 	.word	0x08006d89
 8006d34:	08006d89 	.word	0x08006d89
 8006d38:	08006d91 	.word	0x08006d91
 8006d3c:	08006d89 	.word	0x08006d89
 8006d40:	08006d89 	.word	0x08006d89
 8006d44:	08006d89 	.word	0x08006d89
 8006d48:	08006d89 	.word	0x08006d89
 8006d4c:	08006d89 	.word	0x08006d89
 8006d50:	08006d89 	.word	0x08006d89
 8006d54:	08006d89 	.word	0x08006d89
 8006d58:	08006d91 	.word	0x08006d91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d60:	3308      	adds	r3, #8
 8006d62:	2101      	movs	r1, #1
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 ffc3 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d70:	e00f      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d76:	3328      	adds	r3, #40	; 0x28
 8006d78:	2101      	movs	r1, #1
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 f86a 	bl	8007e54 <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006d86:	e004      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006d8e:	e000      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d9a:	4bbf      	ldr	r3, [pc, #764]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da8:	4abb      	ldr	r2, [pc, #748]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006daa:	430b      	orrs	r3, r1
 8006dac:	6553      	str	r3, [r2, #84]	; 0x54
 8006dae:	e003      	b.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006db4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f002 0302 	and.w	r3, r2, #2
 8006dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006dce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	d041      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dde:	2b05      	cmp	r3, #5
 8006de0:	d824      	bhi.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e35 	.word	0x08006e35
 8006dec:	08006e01 	.word	0x08006e01
 8006df0:	08006e17 	.word	0x08006e17
 8006df4:	08006e35 	.word	0x08006e35
 8006df8:	08006e35 	.word	0x08006e35
 8006dfc:	08006e35 	.word	0x08006e35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e04:	3308      	adds	r3, #8
 8006e06:	2101      	movs	r1, #1
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 ff71 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e14:	e00f      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1a:	3328      	adds	r3, #40	; 0x28
 8006e1c:	2101      	movs	r1, #1
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f001 f818 	bl	8007e54 <RCCEx_PLL3_Config>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006e2a:	e004      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e32:	e000      	b.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e3e:	4b96      	ldr	r3, [pc, #600]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e42:	f023 0107 	bic.w	r1, r3, #7
 8006e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e4c:	4a92      	ldr	r2, [pc, #584]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006e4e:	430b      	orrs	r3, r1
 8006e50:	6553      	str	r3, [r2, #84]	; 0x54
 8006e52:	e003      	b.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e64:	f002 0304 	and.w	r3, r2, #4
 8006e68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006e76:	460b      	mov	r3, r1
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	d044      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e84:	2b05      	cmp	r3, #5
 8006e86:	d825      	bhi.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006e88:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8e:	bf00      	nop
 8006e90:	08006edd 	.word	0x08006edd
 8006e94:	08006ea9 	.word	0x08006ea9
 8006e98:	08006ebf 	.word	0x08006ebf
 8006e9c:	08006edd 	.word	0x08006edd
 8006ea0:	08006edd 	.word	0x08006edd
 8006ea4:	08006edd 	.word	0x08006edd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eac:	3308      	adds	r3, #8
 8006eae:	2101      	movs	r1, #1
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 ff1d 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ebc:	e00f      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec2:	3328      	adds	r3, #40	; 0x28
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 ffc4 	bl	8007e54 <RCCEx_PLL3_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ed2:	e004      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006eda:	e000      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ede:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10b      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ee6:	4b6c      	ldr	r3, [pc, #432]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	f023 0107 	bic.w	r1, r3, #7
 8006eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ef6:	4a68      	ldr	r2, [pc, #416]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6593      	str	r3, [r2, #88]	; 0x58
 8006efc:	e003      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f002 0320 	and.w	r3, r2, #32
 8006f12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f16:	2300      	movs	r3, #0
 8006f18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f20:	460b      	mov	r3, r1
 8006f22:	4313      	orrs	r3, r2
 8006f24:	d055      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f32:	d033      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f38:	d82c      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3e:	d02f      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f44:	d826      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f4a:	d02b      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006f4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f50:	d820      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f56:	d012      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f5c:	d81a      	bhi.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d022      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f66:	d115      	bne.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f6c:	3308      	adds	r3, #8
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 febd 	bl	8007cf0 <RCCEx_PLL2_Config>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f7c:	e015      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f82:	3328      	adds	r3, #40	; 0x28
 8006f84:	2102      	movs	r1, #2
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 ff64 	bl	8007e54 <RCCEx_PLL3_Config>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006f92:	e00a      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f9a:	e006      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006f9c:	bf00      	nop
 8006f9e:	e004      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fa0:	bf00      	nop
 8006fa2:	e002      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fa4:	bf00      	nop
 8006fa6:	e000      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006faa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006fb2:	4b39      	ldr	r3, [pc, #228]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fc2:	4a35      	ldr	r2, [pc, #212]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006fc4:	430b      	orrs	r3, r1
 8006fc6:	6553      	str	r3, [r2, #84]	; 0x54
 8006fc8:	e003      	b.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006fe8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	d058      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ffa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ffe:	d033      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007000:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007004:	d82c      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800700a:	d02f      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800700c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007010:	d826      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007016:	d02b      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007018:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800701c:	d820      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800701e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007022:	d012      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007028:	d81a      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d022      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800702e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007032:	d115      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007038:	3308      	adds	r3, #8
 800703a:	2100      	movs	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fe57 	bl	8007cf0 <RCCEx_PLL2_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007048:	e015      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800704a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800704e:	3328      	adds	r3, #40	; 0x28
 8007050:	2102      	movs	r1, #2
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fefe 	bl	8007e54 <RCCEx_PLL3_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800705e:	e00a      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007066:	e006      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007068:	bf00      	nop
 800706a:	e004      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800706c:	bf00      	nop
 800706e:	e002      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007070:	bf00      	nop
 8007072:	e000      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10e      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800707e:	4b06      	ldr	r3, [pc, #24]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007082:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800708a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800708e:	4a02      	ldr	r2, [pc, #8]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007090:	430b      	orrs	r3, r1
 8007092:	6593      	str	r3, [r2, #88]	; 0x58
 8007094:	e006      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007096:	bf00      	nop
 8007098:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80070a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80070b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80070b4:	2300      	movs	r3, #0
 80070b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80070ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80070be:	460b      	mov	r3, r1
 80070c0:	4313      	orrs	r3, r2
 80070c2:	d055      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80070c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80070d0:	d033      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80070d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80070d6:	d82c      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80070d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070dc:	d02f      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e2:	d826      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80070e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070e8:	d02b      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80070ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80070ee:	d820      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80070f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070f4:	d012      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80070f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070fa:	d81a      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d022      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007104:	d115      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800710a:	3308      	adds	r3, #8
 800710c:	2100      	movs	r1, #0
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fdee 	bl	8007cf0 <RCCEx_PLL2_Config>
 8007114:	4603      	mov	r3, r0
 8007116:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800711a:	e015      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007120:	3328      	adds	r3, #40	; 0x28
 8007122:	2102      	movs	r1, #2
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fe95 	bl	8007e54 <RCCEx_PLL3_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007130:	e00a      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007138:	e006      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800713a:	bf00      	nop
 800713c:	e004      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800713e:	bf00      	nop
 8007140:	e002      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007142:	bf00      	nop
 8007144:	e000      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007150:	4ba1      	ldr	r3, [pc, #644]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007154:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800715c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007160:	4a9d      	ldr	r2, [pc, #628]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007162:	430b      	orrs	r3, r1
 8007164:	6593      	str	r3, [r2, #88]	; 0x58
 8007166:	e003      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007168:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800716c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f002 0308 	and.w	r3, r2, #8
 800717c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007180:	2300      	movs	r3, #0
 8007182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007186:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800718a:	460b      	mov	r3, r1
 800718c:	4313      	orrs	r3, r2
 800718e:	d01e      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800719c:	d10c      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800719e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071a2:	3328      	adds	r3, #40	; 0x28
 80071a4:	2102      	movs	r1, #2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fe54 	bl	8007e54 <RCCEx_PLL3_Config>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d002      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80071b8:	4b87      	ldr	r3, [pc, #540]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c8:	4a83      	ldr	r2, [pc, #524]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80071ca:	430b      	orrs	r3, r1
 80071cc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d6:	f002 0310 	and.w	r3, r2, #16
 80071da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071de:	2300      	movs	r3, #0
 80071e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80071e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80071e8:	460b      	mov	r3, r1
 80071ea:	4313      	orrs	r3, r2
 80071ec:	d01e      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fa:	d10c      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007200:	3328      	adds	r3, #40	; 0x28
 8007202:	2102      	movs	r1, #2
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fe25 	bl	8007e54 <RCCEx_PLL3_Config>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007216:	4b70      	ldr	r3, [pc, #448]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800721e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007226:	4a6c      	ldr	r2, [pc, #432]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007228:	430b      	orrs	r3, r1
 800722a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800723c:	2300      	movs	r3, #0
 800723e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007242:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007246:	460b      	mov	r3, r1
 8007248:	4313      	orrs	r3, r2
 800724a:	d03e      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800724c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007250:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007258:	d022      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800725a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800725e:	d81b      	bhi.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007268:	d00b      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800726a:	e015      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007270:	3308      	adds	r3, #8
 8007272:	2100      	movs	r1, #0
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fd3b 	bl	8007cf0 <RCCEx_PLL2_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007280:	e00f      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007286:	3328      	adds	r3, #40	; 0x28
 8007288:	2102      	movs	r1, #2
 800728a:	4618      	mov	r0, r3
 800728c:	f000 fde2 	bl	8007e54 <RCCEx_PLL3_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007296:	e004      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800729e:	e000      	b.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80072a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072aa:	4b4b      	ldr	r3, [pc, #300]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072ba:	4a47      	ldr	r2, [pc, #284]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80072bc:	430b      	orrs	r3, r1
 80072be:	6593      	str	r3, [r2, #88]	; 0x58
 80072c0:	e003      	b.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80072d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80072d8:	2300      	movs	r3, #0
 80072da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80072dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80072e0:	460b      	mov	r3, r1
 80072e2:	4313      	orrs	r3, r2
 80072e4:	d03b      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80072e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072f2:	d01f      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80072f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072f8:	d818      	bhi.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80072fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fe:	d003      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007304:	d007      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007306:	e011      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007308:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	4a32      	ldr	r2, [pc, #200]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800730e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007314:	e00f      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800731a:	3328      	adds	r3, #40	; 0x28
 800731c:	2101      	movs	r1, #1
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fd98 	bl	8007e54 <RCCEx_PLL3_Config>
 8007324:	4603      	mov	r3, r0
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800732a:	e004      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007332:	e000      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007334:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10b      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800733e:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007342:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734e:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007350:	430b      	orrs	r3, r1
 8007352:	6553      	str	r3, [r2, #84]	; 0x54
 8007354:	e003      	b.n	800735e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007356:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800735a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800735e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800736a:	673b      	str	r3, [r7, #112]	; 0x70
 800736c:	2300      	movs	r3, #0
 800736e:	677b      	str	r3, [r7, #116]	; 0x74
 8007370:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007374:	460b      	mov	r3, r1
 8007376:	4313      	orrs	r3, r2
 8007378:	d034      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800737e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007388:	d007      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800738a:	e011      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800738c:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007398:	e00e      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739e:	3308      	adds	r3, #8
 80073a0:	2102      	movs	r1, #2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fca4 	bl	8007cf0 <RCCEx_PLL2_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80073ae:	e003      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10d      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80073c0:	4b05      	ldr	r3, [pc, #20]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ce:	4a02      	ldr	r2, [pc, #8]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80073d0:	430b      	orrs	r3, r1
 80073d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80073d4:	e006      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80073d6:	bf00      	nop
 80073d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80073f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80073f2:	2300      	movs	r3, #0
 80073f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80073fa:	460b      	mov	r3, r1
 80073fc:	4313      	orrs	r3, r2
 80073fe:	d00c      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007404:	3328      	adds	r3, #40	; 0x28
 8007406:	2102      	movs	r1, #2
 8007408:	4618      	mov	r0, r3
 800740a:	f000 fd23 	bl	8007e54 <RCCEx_PLL3_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800741a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007426:	663b      	str	r3, [r7, #96]	; 0x60
 8007428:	2300      	movs	r3, #0
 800742a:	667b      	str	r3, [r7, #100]	; 0x64
 800742c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007430:	460b      	mov	r3, r1
 8007432:	4313      	orrs	r3, r2
 8007434:	d038      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800743e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007442:	d018      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007448:	d811      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800744a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744e:	d014      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007454:	d80b      	bhi.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d011      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800745a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745e:	d106      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007460:	4bc3      	ldr	r3, [pc, #780]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007464:	4ac2      	ldr	r2, [pc, #776]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800746a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800746c:	e008      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007474:	e004      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007476:	bf00      	nop
 8007478:	e002      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800747a:	bf00      	nop
 800747c:	e000      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800747e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10b      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007488:	4bb9      	ldr	r3, [pc, #740]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800748a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007498:	4ab5      	ldr	r2, [pc, #724]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800749a:	430b      	orrs	r3, r1
 800749c:	6553      	str	r3, [r2, #84]	; 0x54
 800749e:	e003      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80074b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80074b6:	2300      	movs	r3, #0
 80074b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80074be:	460b      	mov	r3, r1
 80074c0:	4313      	orrs	r3, r2
 80074c2:	d009      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074c4:	4baa      	ldr	r3, [pc, #680]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074d2:	4aa7      	ldr	r2, [pc, #668]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074d4:	430b      	orrs	r3, r1
 80074d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80074d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80074e4:	653b      	str	r3, [r7, #80]	; 0x50
 80074e6:	2300      	movs	r3, #0
 80074e8:	657b      	str	r3, [r7, #84]	; 0x54
 80074ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80074ee:	460b      	mov	r3, r1
 80074f0:	4313      	orrs	r3, r2
 80074f2:	d00a      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80074f4:	4b9e      	ldr	r3, [pc, #632]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80074fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007500:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007504:	4a9a      	ldr	r2, [pc, #616]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007506:	430b      	orrs	r3, r1
 8007508:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007516:	64bb      	str	r3, [r7, #72]	; 0x48
 8007518:	2300      	movs	r3, #0
 800751a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800751c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007520:	460b      	mov	r3, r1
 8007522:	4313      	orrs	r3, r2
 8007524:	d009      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007526:	4b92      	ldr	r3, [pc, #584]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007534:	4a8e      	ldr	r2, [pc, #568]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007536:	430b      	orrs	r3, r1
 8007538:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800753a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007546:	643b      	str	r3, [r7, #64]	; 0x40
 8007548:	2300      	movs	r3, #0
 800754a:	647b      	str	r3, [r7, #68]	; 0x44
 800754c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007550:	460b      	mov	r3, r1
 8007552:	4313      	orrs	r3, r2
 8007554:	d00e      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007556:	4b86      	ldr	r3, [pc, #536]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	4a85      	ldr	r2, [pc, #532]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800755c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007560:	6113      	str	r3, [r2, #16]
 8007562:	4b83      	ldr	r3, [pc, #524]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007564:	6919      	ldr	r1, [r3, #16]
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800756e:	4a80      	ldr	r2, [pc, #512]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007570:	430b      	orrs	r3, r1
 8007572:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007574:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007580:	63bb      	str	r3, [r7, #56]	; 0x38
 8007582:	2300      	movs	r3, #0
 8007584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007586:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800758a:	460b      	mov	r3, r1
 800758c:	4313      	orrs	r3, r2
 800758e:	d009      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007590:	4b77      	ldr	r3, [pc, #476]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007594:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	4a74      	ldr	r2, [pc, #464]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075a0:	430b      	orrs	r3, r1
 80075a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80075a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80075b0:	633b      	str	r3, [r7, #48]	; 0x30
 80075b2:	2300      	movs	r3, #0
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
 80075b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80075ba:	460b      	mov	r3, r1
 80075bc:	4313      	orrs	r3, r2
 80075be:	d00a      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075c0:	4b6b      	ldr	r3, [pc, #428]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80075c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d0:	4a67      	ldr	r2, [pc, #412]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80075d2:	430b      	orrs	r3, r1
 80075d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80075d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	2100      	movs	r1, #0
 80075e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d011      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075f6:	3308      	adds	r3, #8
 80075f8:	2100      	movs	r1, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fb78 	bl	8007cf0 <RCCEx_PLL2_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007606:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800760a:	2b00      	cmp	r3, #0
 800760c:	d003      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	2100      	movs	r1, #0
 8007620:	6239      	str	r1, [r7, #32]
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
 8007628:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800762c:	460b      	mov	r3, r1
 800762e:	4313      	orrs	r3, r2
 8007630:	d011      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007636:	3308      	adds	r3, #8
 8007638:	2101      	movs	r1, #1
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fb58 	bl	8007cf0 <RCCEx_PLL2_Config>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800764a:	2b00      	cmp	r3, #0
 800764c:	d003      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	2100      	movs	r1, #0
 8007660:	61b9      	str	r1, [r7, #24]
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	61fb      	str	r3, [r7, #28]
 8007668:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800766c:	460b      	mov	r3, r1
 800766e:	4313      	orrs	r3, r2
 8007670:	d011      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007676:	3308      	adds	r3, #8
 8007678:	2102      	movs	r1, #2
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fb38 	bl	8007cf0 <RCCEx_PLL2_Config>
 8007680:	4603      	mov	r3, r0
 8007682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800768e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	2100      	movs	r1, #0
 80076a0:	6139      	str	r1, [r7, #16]
 80076a2:	f003 0308 	and.w	r3, r3, #8
 80076a6:	617b      	str	r3, [r7, #20]
 80076a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80076ac:	460b      	mov	r3, r1
 80076ae:	4313      	orrs	r3, r2
 80076b0:	d011      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80076b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076b6:	3328      	adds	r3, #40	; 0x28
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fbca 	bl	8007e54 <RCCEx_PLL3_Config>
 80076c0:	4603      	mov	r3, r0
 80076c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80076c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	2100      	movs	r1, #0
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80076ec:	460b      	mov	r3, r1
 80076ee:	4313      	orrs	r3, r2
 80076f0:	d011      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f6:	3328      	adds	r3, #40	; 0x28
 80076f8:	2101      	movs	r1, #1
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fbaa 	bl	8007e54 <RCCEx_PLL3_Config>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	2100      	movs	r1, #0
 8007720:	6039      	str	r1, [r7, #0]
 8007722:	f003 0320 	and.w	r3, r3, #32
 8007726:	607b      	str	r3, [r7, #4]
 8007728:	e9d7 1200 	ldrd	r1, r2, [r7]
 800772c:	460b      	mov	r3, r1
 800772e:	4313      	orrs	r3, r2
 8007730:	d011      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007736:	3328      	adds	r3, #40	; 0x28
 8007738:	2102      	movs	r1, #2
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fb8a 	bl	8007e54 <RCCEx_PLL3_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8007746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8007756:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	e000      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
}
 8007764:	4618      	mov	r0, r3
 8007766:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800776a:	46bd      	mov	sp, r7
 800776c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007770:	58024400 	.word	0x58024400

08007774 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007778:	f7fe fd96 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 800777c:	4602      	mov	r2, r0
 800777e:	4b06      	ldr	r3, [pc, #24]	; (8007798 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	091b      	lsrs	r3, r3, #4
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	4904      	ldr	r1, [pc, #16]	; (800779c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800778a:	5ccb      	ldrb	r3, [r1, r3]
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007794:	4618      	mov	r0, r3
 8007796:	bd80      	pop	{r7, pc}
 8007798:	58024400 	.word	0x58024400
 800779c:	080185c8 	.word	0x080185c8

080077a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b089      	sub	sp, #36	; 0x24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077a8:	4ba1      	ldr	r3, [pc, #644]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ac:	f003 0303 	and.w	r3, r3, #3
 80077b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80077b2:	4b9f      	ldr	r3, [pc, #636]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	0b1b      	lsrs	r3, r3, #12
 80077b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077be:	4b9c      	ldr	r3, [pc, #624]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	091b      	lsrs	r3, r3, #4
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80077ca:	4b99      	ldr	r3, [pc, #612]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ce:	08db      	lsrs	r3, r3, #3
 80077d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 8111 	beq.w	8007a10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	f000 8083 	beq.w	80078fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	f200 80a1 	bhi.w	8007940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d003      	beq.n	800780c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d056      	beq.n	80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800780a:	e099      	b.n	8007940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800780c:	4b88      	ldr	r3, [pc, #544]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b00      	cmp	r3, #0
 8007816:	d02d      	beq.n	8007874 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007818:	4b85      	ldr	r3, [pc, #532]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	08db      	lsrs	r3, r3, #3
 800781e:	f003 0303 	and.w	r3, r3, #3
 8007822:	4a84      	ldr	r2, [pc, #528]	; (8007a34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007824:	fa22 f303 	lsr.w	r3, r2, r3
 8007828:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007842:	4b7b      	ldr	r3, [pc, #492]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007852:	ed97 6a03 	vldr	s12, [r7, #12]
 8007856:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800785a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007872:	e087      	b.n	8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007886:	4b6a      	ldr	r3, [pc, #424]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007896:	ed97 6a03 	vldr	s12, [r7, #12]
 800789a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800789e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b6:	e065      	b.n	8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	ee07 3a90 	vmov	s15, r3
 80078be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ca:	4b59      	ldr	r3, [pc, #356]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078da:	ed97 6a03 	vldr	s12, [r7, #12]
 80078de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078fa:	e043      	b.n	8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	ee07 3a90 	vmov	s15, r3
 8007902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007906:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800790a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790e:	4b48      	ldr	r3, [pc, #288]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007922:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800792a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800793e:	e021      	b.n	8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800794a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800794e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007952:	4b37      	ldr	r3, [pc, #220]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007962:	ed97 6a03 	vldr	s12, [r7, #12]
 8007966:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800796a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800797a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007982:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007984:	4b2a      	ldr	r3, [pc, #168]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	0a5b      	lsrs	r3, r3, #9
 800798a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800798e:	ee07 3a90 	vmov	s15, r3
 8007992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800799a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800799e:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079aa:	ee17 2a90 	vmov	r2, s15
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80079b2:	4b1f      	ldr	r3, [pc, #124]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b6:	0c1b      	lsrs	r3, r3, #16
 80079b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079bc:	ee07 3a90 	vmov	s15, r3
 80079c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079d8:	ee17 2a90 	vmov	r2, s15
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80079e0:	4b13      	ldr	r3, [pc, #76]	; (8007a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	0e1b      	lsrs	r3, r3, #24
 80079e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80079fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a06:	ee17 2a90 	vmov	r2, s15
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a0e:	e008      	b.n	8007a22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	609a      	str	r2, [r3, #8]
}
 8007a22:	bf00      	nop
 8007a24:	3724      	adds	r7, #36	; 0x24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	58024400 	.word	0x58024400
 8007a34:	03d09000 	.word	0x03d09000
 8007a38:	46000000 	.word	0x46000000
 8007a3c:	4c742400 	.word	0x4c742400
 8007a40:	4a742400 	.word	0x4a742400
 8007a44:	4af42400 	.word	0x4af42400

08007a48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b089      	sub	sp, #36	; 0x24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a50:	4ba1      	ldr	r3, [pc, #644]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a54:	f003 0303 	and.w	r3, r3, #3
 8007a58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007a5a:	4b9f      	ldr	r3, [pc, #636]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	0d1b      	lsrs	r3, r3, #20
 8007a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a66:	4b9c      	ldr	r3, [pc, #624]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007a72:	4b99      	ldr	r3, [pc, #612]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a76:	08db      	lsrs	r3, r3, #3
 8007a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8111 	beq.w	8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	f000 8083 	beq.w	8007ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	f200 80a1 	bhi.w	8007be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d056      	beq.n	8007b60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007ab2:	e099      	b.n	8007be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ab4:	4b88      	ldr	r3, [pc, #544]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0320 	and.w	r3, r3, #32
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d02d      	beq.n	8007b1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ac0:	4b85      	ldr	r3, [pc, #532]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	08db      	lsrs	r3, r3, #3
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	4a84      	ldr	r2, [pc, #528]	; (8007cdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007acc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	ee07 3a90 	vmov	s15, r3
 8007ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007aea:	4b7b      	ldr	r3, [pc, #492]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007afe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007b1a:	e087      	b.n	8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b2e:	4b6a      	ldr	r3, [pc, #424]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b5e:	e065      	b.n	8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b72:	4b59      	ldr	r3, [pc, #356]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ba2:	e043      	b.n	8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007cec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb6:	4b48      	ldr	r3, [pc, #288]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007be6:	e021      	b.n	8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfa:	4b37      	ldr	r3, [pc, #220]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007c2c:	4b2a      	ldr	r3, [pc, #168]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c30:	0a5b      	lsrs	r3, r3, #9
 8007c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c52:	ee17 2a90 	vmov	r2, s15
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007c5a:	4b1f      	ldr	r3, [pc, #124]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	0c1b      	lsrs	r3, r3, #16
 8007c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c64:	ee07 3a90 	vmov	s15, r3
 8007c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c80:	ee17 2a90 	vmov	r2, s15
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007c88:	4b13      	ldr	r3, [pc, #76]	; (8007cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	0e1b      	lsrs	r3, r3, #24
 8007c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c92:	ee07 3a90 	vmov	s15, r3
 8007c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cae:	ee17 2a90 	vmov	r2, s15
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007cb6:	e008      	b.n	8007cca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	609a      	str	r2, [r3, #8]
}
 8007cca:	bf00      	nop
 8007ccc:	3724      	adds	r7, #36	; 0x24
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	58024400 	.word	0x58024400
 8007cdc:	03d09000 	.word	0x03d09000
 8007ce0:	46000000 	.word	0x46000000
 8007ce4:	4c742400 	.word	0x4c742400
 8007ce8:	4a742400 	.word	0x4a742400
 8007cec:	4af42400 	.word	0x4af42400

08007cf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cfe:	4b53      	ldr	r3, [pc, #332]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d02:	f003 0303 	and.w	r3, r3, #3
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d101      	bne.n	8007d0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e099      	b.n	8007e42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d0e:	4b4f      	ldr	r3, [pc, #316]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a4e      	ldr	r2, [pc, #312]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d1a:	f7fc fa6d 	bl	80041f8 <HAL_GetTick>
 8007d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d20:	e008      	b.n	8007d34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d22:	f7fc fa69 	bl	80041f8 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d901      	bls.n	8007d34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e086      	b.n	8007e42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d34:	4b45      	ldr	r3, [pc, #276]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1f0      	bne.n	8007d22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d40:	4b42      	ldr	r3, [pc, #264]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	031b      	lsls	r3, r3, #12
 8007d4e:	493f      	ldr	r1, [pc, #252]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	628b      	str	r3, [r1, #40]	; 0x28
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	025b      	lsls	r3, r3, #9
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	041b      	lsls	r3, r3, #16
 8007d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	061b      	lsls	r3, r3, #24
 8007d80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d84:	4931      	ldr	r1, [pc, #196]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d8a:	4b30      	ldr	r3, [pc, #192]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	492d      	ldr	r1, [pc, #180]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d9c:	4b2b      	ldr	r3, [pc, #172]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	f023 0220 	bic.w	r2, r3, #32
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	4928      	ldr	r1, [pc, #160]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007dae:	4b27      	ldr	r3, [pc, #156]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db2:	4a26      	ldr	r2, [pc, #152]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007db4:	f023 0310 	bic.w	r3, r3, #16
 8007db8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007dba:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dbe:	4b24      	ldr	r3, [pc, #144]	; (8007e50 <RCCEx_PLL2_Config+0x160>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	69d2      	ldr	r2, [r2, #28]
 8007dc6:	00d2      	lsls	r2, r2, #3
 8007dc8:	4920      	ldr	r1, [pc, #128]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007dce:	4b1f      	ldr	r3, [pc, #124]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd2:	4a1e      	ldr	r2, [pc, #120]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007dd4:	f043 0310 	orr.w	r3, r3, #16
 8007dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007de0:	4b1a      	ldr	r3, [pc, #104]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de4:	4a19      	ldr	r2, [pc, #100]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007de6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dec:	e00f      	b.n	8007e0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d106      	bne.n	8007e02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007df4:	4b15      	ldr	r3, [pc, #84]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	4a14      	ldr	r2, [pc, #80]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e00:	e005      	b.n	8007e0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e02:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e06:	4a11      	ldr	r2, [pc, #68]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a0e      	ldr	r2, [pc, #56]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007e14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e1a:	f7fc f9ed 	bl	80041f8 <HAL_GetTick>
 8007e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e20:	e008      	b.n	8007e34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007e22:	f7fc f9e9 	bl	80041f8 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d901      	bls.n	8007e34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e006      	b.n	8007e42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <RCCEx_PLL2_Config+0x15c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0f0      	beq.n	8007e22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3710      	adds	r7, #16
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	58024400 	.word	0x58024400
 8007e50:	ffff0007 	.word	0xffff0007

08007e54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e62:	4b53      	ldr	r3, [pc, #332]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d101      	bne.n	8007e72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e099      	b.n	8007fa6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e72:	4b4f      	ldr	r3, [pc, #316]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a4e      	ldr	r2, [pc, #312]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e7e:	f7fc f9bb 	bl	80041f8 <HAL_GetTick>
 8007e82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e84:	e008      	b.n	8007e98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e86:	f7fc f9b7 	bl	80041f8 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e086      	b.n	8007fa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e98:	4b45      	ldr	r3, [pc, #276]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1f0      	bne.n	8007e86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ea4:	4b42      	ldr	r3, [pc, #264]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	051b      	lsls	r3, r3, #20
 8007eb2:	493f      	ldr	r1, [pc, #252]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	025b      	lsls	r3, r3, #9
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	041b      	lsls	r3, r3, #16
 8007ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	061b      	lsls	r3, r3, #24
 8007ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ee8:	4931      	ldr	r1, [pc, #196]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007eee:	4b30      	ldr	r3, [pc, #192]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	492d      	ldr	r1, [pc, #180]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f00:	4b2b      	ldr	r3, [pc, #172]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	4928      	ldr	r1, [pc, #160]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f12:	4b27      	ldr	r3, [pc, #156]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	4a26      	ldr	r2, [pc, #152]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f1e:	4b24      	ldr	r3, [pc, #144]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f22:	4b24      	ldr	r3, [pc, #144]	; (8007fb4 <RCCEx_PLL3_Config+0x160>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	69d2      	ldr	r2, [r2, #28]
 8007f2a:	00d2      	lsls	r2, r2, #3
 8007f2c:	4920      	ldr	r1, [pc, #128]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f32:	4b1f      	ldr	r3, [pc, #124]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	4a1e      	ldr	r2, [pc, #120]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d106      	bne.n	8007f52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f44:	4b1a      	ldr	r3, [pc, #104]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f48:	4a19      	ldr	r2, [pc, #100]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f50:	e00f      	b.n	8007f72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d106      	bne.n	8007f66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f58:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5c:	4a14      	ldr	r2, [pc, #80]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f64:	e005      	b.n	8007f72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	4a11      	ldr	r2, [pc, #68]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f72:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a0e      	ldr	r2, [pc, #56]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f7e:	f7fc f93b 	bl	80041f8 <HAL_GetTick>
 8007f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f84:	e008      	b.n	8007f98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f86:	f7fc f937 	bl	80041f8 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d901      	bls.n	8007f98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e006      	b.n	8007fa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <RCCEx_PLL3_Config+0x15c>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d0f0      	beq.n	8007f86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	58024400 	.word	0x58024400
 8007fb4:	ffff0007 	.word	0xffff0007

08007fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e042      	b.n	8008050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d106      	bne.n	8007fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7fb fdfd 	bl	8003bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2224      	movs	r2, #36	; 0x24
 8007fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f022 0201 	bic.w	r2, r2, #1
 8007ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f8ba 	bl	8008174 <UART_SetConfig>
 8008000:	4603      	mov	r3, r0
 8008002:	2b01      	cmp	r3, #1
 8008004:	d101      	bne.n	800800a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e022      	b.n	8008050 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fe16 	bl	8008c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	689a      	ldr	r2, [r3, #8]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0201 	orr.w	r2, r2, #1
 8008046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fe9d 	bl	8008d88 <UART_CheckIdleState>
 800804e:	4603      	mov	r3, r0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b08a      	sub	sp, #40	; 0x28
 800805c:	af02      	add	r7, sp, #8
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	4613      	mov	r3, r2
 8008066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806e:	2b20      	cmp	r3, #32
 8008070:	d17b      	bne.n	800816a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <HAL_UART_Transmit+0x26>
 8008078:	88fb      	ldrh	r3, [r7, #6]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e074      	b.n	800816c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2221      	movs	r2, #33	; 0x21
 800808e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008092:	f7fc f8b1 	bl	80041f8 <HAL_GetTick>
 8008096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	88fa      	ldrh	r2, [r7, #6]
 800809c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	88fa      	ldrh	r2, [r7, #6]
 80080a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b0:	d108      	bne.n	80080c4 <HAL_UART_Transmit+0x6c>
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d104      	bne.n	80080c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	61bb      	str	r3, [r7, #24]
 80080c2:	e003      	b.n	80080cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080c8:	2300      	movs	r3, #0
 80080ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80080cc:	e030      	b.n	8008130 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2200      	movs	r2, #0
 80080d6:	2180      	movs	r1, #128	; 0x80
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 feff 	bl	8008edc <UART_WaitOnFlagUntilTimeout>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d005      	beq.n	80080f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e03d      	b.n	800816c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	461a      	mov	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	3302      	adds	r3, #2
 800810a:	61bb      	str	r3, [r7, #24]
 800810c:	e007      	b.n	800811e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	781a      	ldrb	r2, [r3, #0]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	3301      	adds	r3, #1
 800811c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008124:	b29b      	uxth	r3, r3
 8008126:	3b01      	subs	r3, #1
 8008128:	b29a      	uxth	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008136:	b29b      	uxth	r3, r3
 8008138:	2b00      	cmp	r3, #0
 800813a:	d1c8      	bne.n	80080ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2200      	movs	r2, #0
 8008144:	2140      	movs	r1, #64	; 0x40
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fec8 	bl	8008edc <UART_WaitOnFlagUntilTimeout>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e006      	b.n	800816c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2220      	movs	r2, #32
 8008162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	e000      	b.n	800816c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800816a:	2302      	movs	r3, #2
  }
}
 800816c:	4618      	mov	r0, r3
 800816e:	3720      	adds	r7, #32
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008178:	b092      	sub	sp, #72	; 0x48
 800817a:	af00      	add	r7, sp, #0
 800817c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	689a      	ldr	r2, [r3, #8]
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	431a      	orrs	r2, r3
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	431a      	orrs	r2, r3
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	4313      	orrs	r3, r2
 800819a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4bbe      	ldr	r3, [pc, #760]	; (800849c <UART_SetConfig+0x328>)
 80081a4:	4013      	ands	r3, r2
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	6812      	ldr	r2, [r2, #0]
 80081aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081ac:	430b      	orrs	r3, r1
 80081ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4ab3      	ldr	r2, [pc, #716]	; (80084a0 <UART_SetConfig+0x32c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d004      	beq.n	80081e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081dc:	4313      	orrs	r3, r2
 80081de:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689a      	ldr	r2, [r3, #8]
 80081e6:	4baf      	ldr	r3, [pc, #700]	; (80084a4 <UART_SetConfig+0x330>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081f0:	430b      	orrs	r3, r1
 80081f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	f023 010f 	bic.w	r1, r3, #15
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4aa6      	ldr	r2, [pc, #664]	; (80084a8 <UART_SetConfig+0x334>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d177      	bne.n	8008304 <UART_SetConfig+0x190>
 8008214:	4ba5      	ldr	r3, [pc, #660]	; (80084ac <UART_SetConfig+0x338>)
 8008216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800821c:	2b28      	cmp	r3, #40	; 0x28
 800821e:	d86d      	bhi.n	80082fc <UART_SetConfig+0x188>
 8008220:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0xb4>)
 8008222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008226:	bf00      	nop
 8008228:	080082cd 	.word	0x080082cd
 800822c:	080082fd 	.word	0x080082fd
 8008230:	080082fd 	.word	0x080082fd
 8008234:	080082fd 	.word	0x080082fd
 8008238:	080082fd 	.word	0x080082fd
 800823c:	080082fd 	.word	0x080082fd
 8008240:	080082fd 	.word	0x080082fd
 8008244:	080082fd 	.word	0x080082fd
 8008248:	080082d5 	.word	0x080082d5
 800824c:	080082fd 	.word	0x080082fd
 8008250:	080082fd 	.word	0x080082fd
 8008254:	080082fd 	.word	0x080082fd
 8008258:	080082fd 	.word	0x080082fd
 800825c:	080082fd 	.word	0x080082fd
 8008260:	080082fd 	.word	0x080082fd
 8008264:	080082fd 	.word	0x080082fd
 8008268:	080082dd 	.word	0x080082dd
 800826c:	080082fd 	.word	0x080082fd
 8008270:	080082fd 	.word	0x080082fd
 8008274:	080082fd 	.word	0x080082fd
 8008278:	080082fd 	.word	0x080082fd
 800827c:	080082fd 	.word	0x080082fd
 8008280:	080082fd 	.word	0x080082fd
 8008284:	080082fd 	.word	0x080082fd
 8008288:	080082e5 	.word	0x080082e5
 800828c:	080082fd 	.word	0x080082fd
 8008290:	080082fd 	.word	0x080082fd
 8008294:	080082fd 	.word	0x080082fd
 8008298:	080082fd 	.word	0x080082fd
 800829c:	080082fd 	.word	0x080082fd
 80082a0:	080082fd 	.word	0x080082fd
 80082a4:	080082fd 	.word	0x080082fd
 80082a8:	080082ed 	.word	0x080082ed
 80082ac:	080082fd 	.word	0x080082fd
 80082b0:	080082fd 	.word	0x080082fd
 80082b4:	080082fd 	.word	0x080082fd
 80082b8:	080082fd 	.word	0x080082fd
 80082bc:	080082fd 	.word	0x080082fd
 80082c0:	080082fd 	.word	0x080082fd
 80082c4:	080082fd 	.word	0x080082fd
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e222      	b.n	800871a <UART_SetConfig+0x5a6>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e21e      	b.n	800871a <UART_SetConfig+0x5a6>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e21a      	b.n	800871a <UART_SetConfig+0x5a6>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e216      	b.n	800871a <UART_SetConfig+0x5a6>
 80082ec:	2320      	movs	r3, #32
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e212      	b.n	800871a <UART_SetConfig+0x5a6>
 80082f4:	2340      	movs	r3, #64	; 0x40
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e20e      	b.n	800871a <UART_SetConfig+0x5a6>
 80082fc:	2380      	movs	r3, #128	; 0x80
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e20a      	b.n	800871a <UART_SetConfig+0x5a6>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a69      	ldr	r2, [pc, #420]	; (80084b0 <UART_SetConfig+0x33c>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d130      	bne.n	8008370 <UART_SetConfig+0x1fc>
 800830e:	4b67      	ldr	r3, [pc, #412]	; (80084ac <UART_SetConfig+0x338>)
 8008310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b05      	cmp	r3, #5
 8008318:	d826      	bhi.n	8008368 <UART_SetConfig+0x1f4>
 800831a:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <UART_SetConfig+0x1ac>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008339 	.word	0x08008339
 8008324:	08008341 	.word	0x08008341
 8008328:	08008349 	.word	0x08008349
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e1ec      	b.n	800871a <UART_SetConfig+0x5a6>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e1e8      	b.n	800871a <UART_SetConfig+0x5a6>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e1e4      	b.n	800871a <UART_SetConfig+0x5a6>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e1e0      	b.n	800871a <UART_SetConfig+0x5a6>
 8008358:	2320      	movs	r3, #32
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e1dc      	b.n	800871a <UART_SetConfig+0x5a6>
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e1d8      	b.n	800871a <UART_SetConfig+0x5a6>
 8008368:	2380      	movs	r3, #128	; 0x80
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e1d4      	b.n	800871a <UART_SetConfig+0x5a6>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a4f      	ldr	r2, [pc, #316]	; (80084b4 <UART_SetConfig+0x340>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d130      	bne.n	80083dc <UART_SetConfig+0x268>
 800837a:	4b4c      	ldr	r3, [pc, #304]	; (80084ac <UART_SetConfig+0x338>)
 800837c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b05      	cmp	r3, #5
 8008384:	d826      	bhi.n	80083d4 <UART_SetConfig+0x260>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <UART_SetConfig+0x218>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a5 	.word	0x080083a5
 8008390:	080083ad 	.word	0x080083ad
 8008394:	080083b5 	.word	0x080083b5
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	2300      	movs	r3, #0
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e1b6      	b.n	800871a <UART_SetConfig+0x5a6>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e1b2      	b.n	800871a <UART_SetConfig+0x5a6>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e1ae      	b.n	800871a <UART_SetConfig+0x5a6>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e1aa      	b.n	800871a <UART_SetConfig+0x5a6>
 80083c4:	2320      	movs	r3, #32
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e1a6      	b.n	800871a <UART_SetConfig+0x5a6>
 80083cc:	2340      	movs	r3, #64	; 0x40
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e1a2      	b.n	800871a <UART_SetConfig+0x5a6>
 80083d4:	2380      	movs	r3, #128	; 0x80
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e19e      	b.n	800871a <UART_SetConfig+0x5a6>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a35      	ldr	r2, [pc, #212]	; (80084b8 <UART_SetConfig+0x344>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d130      	bne.n	8008448 <UART_SetConfig+0x2d4>
 80083e6:	4b31      	ldr	r3, [pc, #196]	; (80084ac <UART_SetConfig+0x338>)
 80083e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d826      	bhi.n	8008440 <UART_SetConfig+0x2cc>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x284>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008411 	.word	0x08008411
 80083fc:	08008419 	.word	0x08008419
 8008400:	08008421 	.word	0x08008421
 8008404:	08008429 	.word	0x08008429
 8008408:	08008431 	.word	0x08008431
 800840c:	08008439 	.word	0x08008439
 8008410:	2300      	movs	r3, #0
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e180      	b.n	800871a <UART_SetConfig+0x5a6>
 8008418:	2304      	movs	r3, #4
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e17c      	b.n	800871a <UART_SetConfig+0x5a6>
 8008420:	2308      	movs	r3, #8
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e178      	b.n	800871a <UART_SetConfig+0x5a6>
 8008428:	2310      	movs	r3, #16
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e174      	b.n	800871a <UART_SetConfig+0x5a6>
 8008430:	2320      	movs	r3, #32
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e170      	b.n	800871a <UART_SetConfig+0x5a6>
 8008438:	2340      	movs	r3, #64	; 0x40
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e16c      	b.n	800871a <UART_SetConfig+0x5a6>
 8008440:	2380      	movs	r3, #128	; 0x80
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e168      	b.n	800871a <UART_SetConfig+0x5a6>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a1b      	ldr	r2, [pc, #108]	; (80084bc <UART_SetConfig+0x348>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d142      	bne.n	80084d8 <UART_SetConfig+0x364>
 8008452:	4b16      	ldr	r3, [pc, #88]	; (80084ac <UART_SetConfig+0x338>)
 8008454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008456:	f003 0307 	and.w	r3, r3, #7
 800845a:	2b05      	cmp	r3, #5
 800845c:	d838      	bhi.n	80084d0 <UART_SetConfig+0x35c>
 800845e:	a201      	add	r2, pc, #4	; (adr r2, 8008464 <UART_SetConfig+0x2f0>)
 8008460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008464:	0800847d 	.word	0x0800847d
 8008468:	08008485 	.word	0x08008485
 800846c:	0800848d 	.word	0x0800848d
 8008470:	08008495 	.word	0x08008495
 8008474:	080084c1 	.word	0x080084c1
 8008478:	080084c9 	.word	0x080084c9
 800847c:	2300      	movs	r3, #0
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e14a      	b.n	800871a <UART_SetConfig+0x5a6>
 8008484:	2304      	movs	r3, #4
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e146      	b.n	800871a <UART_SetConfig+0x5a6>
 800848c:	2308      	movs	r3, #8
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e142      	b.n	800871a <UART_SetConfig+0x5a6>
 8008494:	2310      	movs	r3, #16
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e13e      	b.n	800871a <UART_SetConfig+0x5a6>
 800849c:	cfff69f3 	.word	0xcfff69f3
 80084a0:	58000c00 	.word	0x58000c00
 80084a4:	11fff4ff 	.word	0x11fff4ff
 80084a8:	40011000 	.word	0x40011000
 80084ac:	58024400 	.word	0x58024400
 80084b0:	40004400 	.word	0x40004400
 80084b4:	40004800 	.word	0x40004800
 80084b8:	40004c00 	.word	0x40004c00
 80084bc:	40005000 	.word	0x40005000
 80084c0:	2320      	movs	r3, #32
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c6:	e128      	b.n	800871a <UART_SetConfig+0x5a6>
 80084c8:	2340      	movs	r3, #64	; 0x40
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ce:	e124      	b.n	800871a <UART_SetConfig+0x5a6>
 80084d0:	2380      	movs	r3, #128	; 0x80
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d6:	e120      	b.n	800871a <UART_SetConfig+0x5a6>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4acb      	ldr	r2, [pc, #812]	; (800880c <UART_SetConfig+0x698>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d176      	bne.n	80085d0 <UART_SetConfig+0x45c>
 80084e2:	4bcb      	ldr	r3, [pc, #812]	; (8008810 <UART_SetConfig+0x69c>)
 80084e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80084ea:	2b28      	cmp	r3, #40	; 0x28
 80084ec:	d86c      	bhi.n	80085c8 <UART_SetConfig+0x454>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <UART_SetConfig+0x380>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008599 	.word	0x08008599
 80084f8:	080085c9 	.word	0x080085c9
 80084fc:	080085c9 	.word	0x080085c9
 8008500:	080085c9 	.word	0x080085c9
 8008504:	080085c9 	.word	0x080085c9
 8008508:	080085c9 	.word	0x080085c9
 800850c:	080085c9 	.word	0x080085c9
 8008510:	080085c9 	.word	0x080085c9
 8008514:	080085a1 	.word	0x080085a1
 8008518:	080085c9 	.word	0x080085c9
 800851c:	080085c9 	.word	0x080085c9
 8008520:	080085c9 	.word	0x080085c9
 8008524:	080085c9 	.word	0x080085c9
 8008528:	080085c9 	.word	0x080085c9
 800852c:	080085c9 	.word	0x080085c9
 8008530:	080085c9 	.word	0x080085c9
 8008534:	080085a9 	.word	0x080085a9
 8008538:	080085c9 	.word	0x080085c9
 800853c:	080085c9 	.word	0x080085c9
 8008540:	080085c9 	.word	0x080085c9
 8008544:	080085c9 	.word	0x080085c9
 8008548:	080085c9 	.word	0x080085c9
 800854c:	080085c9 	.word	0x080085c9
 8008550:	080085c9 	.word	0x080085c9
 8008554:	080085b1 	.word	0x080085b1
 8008558:	080085c9 	.word	0x080085c9
 800855c:	080085c9 	.word	0x080085c9
 8008560:	080085c9 	.word	0x080085c9
 8008564:	080085c9 	.word	0x080085c9
 8008568:	080085c9 	.word	0x080085c9
 800856c:	080085c9 	.word	0x080085c9
 8008570:	080085c9 	.word	0x080085c9
 8008574:	080085b9 	.word	0x080085b9
 8008578:	080085c9 	.word	0x080085c9
 800857c:	080085c9 	.word	0x080085c9
 8008580:	080085c9 	.word	0x080085c9
 8008584:	080085c9 	.word	0x080085c9
 8008588:	080085c9 	.word	0x080085c9
 800858c:	080085c9 	.word	0x080085c9
 8008590:	080085c9 	.word	0x080085c9
 8008594:	080085c1 	.word	0x080085c1
 8008598:	2301      	movs	r3, #1
 800859a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800859e:	e0bc      	b.n	800871a <UART_SetConfig+0x5a6>
 80085a0:	2304      	movs	r3, #4
 80085a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085a6:	e0b8      	b.n	800871a <UART_SetConfig+0x5a6>
 80085a8:	2308      	movs	r3, #8
 80085aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ae:	e0b4      	b.n	800871a <UART_SetConfig+0x5a6>
 80085b0:	2310      	movs	r3, #16
 80085b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085b6:	e0b0      	b.n	800871a <UART_SetConfig+0x5a6>
 80085b8:	2320      	movs	r3, #32
 80085ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085be:	e0ac      	b.n	800871a <UART_SetConfig+0x5a6>
 80085c0:	2340      	movs	r3, #64	; 0x40
 80085c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085c6:	e0a8      	b.n	800871a <UART_SetConfig+0x5a6>
 80085c8:	2380      	movs	r3, #128	; 0x80
 80085ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085ce:	e0a4      	b.n	800871a <UART_SetConfig+0x5a6>
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a8f      	ldr	r2, [pc, #572]	; (8008814 <UART_SetConfig+0x6a0>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d130      	bne.n	800863c <UART_SetConfig+0x4c8>
 80085da:	4b8d      	ldr	r3, [pc, #564]	; (8008810 <UART_SetConfig+0x69c>)
 80085dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085de:	f003 0307 	and.w	r3, r3, #7
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d826      	bhi.n	8008634 <UART_SetConfig+0x4c0>
 80085e6:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <UART_SetConfig+0x478>)
 80085e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ec:	08008605 	.word	0x08008605
 80085f0:	0800860d 	.word	0x0800860d
 80085f4:	08008615 	.word	0x08008615
 80085f8:	0800861d 	.word	0x0800861d
 80085fc:	08008625 	.word	0x08008625
 8008600:	0800862d 	.word	0x0800862d
 8008604:	2300      	movs	r3, #0
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860a:	e086      	b.n	800871a <UART_SetConfig+0x5a6>
 800860c:	2304      	movs	r3, #4
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e082      	b.n	800871a <UART_SetConfig+0x5a6>
 8008614:	2308      	movs	r3, #8
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e07e      	b.n	800871a <UART_SetConfig+0x5a6>
 800861c:	2310      	movs	r3, #16
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e07a      	b.n	800871a <UART_SetConfig+0x5a6>
 8008624:	2320      	movs	r3, #32
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e076      	b.n	800871a <UART_SetConfig+0x5a6>
 800862c:	2340      	movs	r3, #64	; 0x40
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008632:	e072      	b.n	800871a <UART_SetConfig+0x5a6>
 8008634:	2380      	movs	r3, #128	; 0x80
 8008636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800863a:	e06e      	b.n	800871a <UART_SetConfig+0x5a6>
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a75      	ldr	r2, [pc, #468]	; (8008818 <UART_SetConfig+0x6a4>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d130      	bne.n	80086a8 <UART_SetConfig+0x534>
 8008646:	4b72      	ldr	r3, [pc, #456]	; (8008810 <UART_SetConfig+0x69c>)
 8008648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	2b05      	cmp	r3, #5
 8008650:	d826      	bhi.n	80086a0 <UART_SetConfig+0x52c>
 8008652:	a201      	add	r2, pc, #4	; (adr r2, 8008658 <UART_SetConfig+0x4e4>)
 8008654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008658:	08008671 	.word	0x08008671
 800865c:	08008679 	.word	0x08008679
 8008660:	08008681 	.word	0x08008681
 8008664:	08008689 	.word	0x08008689
 8008668:	08008691 	.word	0x08008691
 800866c:	08008699 	.word	0x08008699
 8008670:	2300      	movs	r3, #0
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008676:	e050      	b.n	800871a <UART_SetConfig+0x5a6>
 8008678:	2304      	movs	r3, #4
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e04c      	b.n	800871a <UART_SetConfig+0x5a6>
 8008680:	2308      	movs	r3, #8
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008686:	e048      	b.n	800871a <UART_SetConfig+0x5a6>
 8008688:	2310      	movs	r3, #16
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e044      	b.n	800871a <UART_SetConfig+0x5a6>
 8008690:	2320      	movs	r3, #32
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e040      	b.n	800871a <UART_SetConfig+0x5a6>
 8008698:	2340      	movs	r3, #64	; 0x40
 800869a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800869e:	e03c      	b.n	800871a <UART_SetConfig+0x5a6>
 80086a0:	2380      	movs	r3, #128	; 0x80
 80086a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086a6:	e038      	b.n	800871a <UART_SetConfig+0x5a6>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a5b      	ldr	r2, [pc, #364]	; (800881c <UART_SetConfig+0x6a8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d130      	bne.n	8008714 <UART_SetConfig+0x5a0>
 80086b2:	4b57      	ldr	r3, [pc, #348]	; (8008810 <UART_SetConfig+0x69c>)
 80086b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d826      	bhi.n	800870c <UART_SetConfig+0x598>
 80086be:	a201      	add	r2, pc, #4	; (adr r2, 80086c4 <UART_SetConfig+0x550>)
 80086c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c4:	080086dd 	.word	0x080086dd
 80086c8:	080086e5 	.word	0x080086e5
 80086cc:	080086ed 	.word	0x080086ed
 80086d0:	080086f5 	.word	0x080086f5
 80086d4:	080086fd 	.word	0x080086fd
 80086d8:	08008705 	.word	0x08008705
 80086dc:	2302      	movs	r3, #2
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e01a      	b.n	800871a <UART_SetConfig+0x5a6>
 80086e4:	2304      	movs	r3, #4
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e016      	b.n	800871a <UART_SetConfig+0x5a6>
 80086ec:	2308      	movs	r3, #8
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e012      	b.n	800871a <UART_SetConfig+0x5a6>
 80086f4:	2310      	movs	r3, #16
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e00e      	b.n	800871a <UART_SetConfig+0x5a6>
 80086fc:	2320      	movs	r3, #32
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e00a      	b.n	800871a <UART_SetConfig+0x5a6>
 8008704:	2340      	movs	r3, #64	; 0x40
 8008706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800870a:	e006      	b.n	800871a <UART_SetConfig+0x5a6>
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008712:	e002      	b.n	800871a <UART_SetConfig+0x5a6>
 8008714:	2380      	movs	r3, #128	; 0x80
 8008716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a3f      	ldr	r2, [pc, #252]	; (800881c <UART_SetConfig+0x6a8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	f040 80f8 	bne.w	8008916 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008726:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800872a:	2b20      	cmp	r3, #32
 800872c:	dc46      	bgt.n	80087bc <UART_SetConfig+0x648>
 800872e:	2b02      	cmp	r3, #2
 8008730:	f2c0 8082 	blt.w	8008838 <UART_SetConfig+0x6c4>
 8008734:	3b02      	subs	r3, #2
 8008736:	2b1e      	cmp	r3, #30
 8008738:	d87e      	bhi.n	8008838 <UART_SetConfig+0x6c4>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <UART_SetConfig+0x5cc>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	080087c3 	.word	0x080087c3
 8008744:	08008839 	.word	0x08008839
 8008748:	080087cb 	.word	0x080087cb
 800874c:	08008839 	.word	0x08008839
 8008750:	08008839 	.word	0x08008839
 8008754:	08008839 	.word	0x08008839
 8008758:	080087db 	.word	0x080087db
 800875c:	08008839 	.word	0x08008839
 8008760:	08008839 	.word	0x08008839
 8008764:	08008839 	.word	0x08008839
 8008768:	08008839 	.word	0x08008839
 800876c:	08008839 	.word	0x08008839
 8008770:	08008839 	.word	0x08008839
 8008774:	08008839 	.word	0x08008839
 8008778:	080087eb 	.word	0x080087eb
 800877c:	08008839 	.word	0x08008839
 8008780:	08008839 	.word	0x08008839
 8008784:	08008839 	.word	0x08008839
 8008788:	08008839 	.word	0x08008839
 800878c:	08008839 	.word	0x08008839
 8008790:	08008839 	.word	0x08008839
 8008794:	08008839 	.word	0x08008839
 8008798:	08008839 	.word	0x08008839
 800879c:	08008839 	.word	0x08008839
 80087a0:	08008839 	.word	0x08008839
 80087a4:	08008839 	.word	0x08008839
 80087a8:	08008839 	.word	0x08008839
 80087ac:	08008839 	.word	0x08008839
 80087b0:	08008839 	.word	0x08008839
 80087b4:	08008839 	.word	0x08008839
 80087b8:	0800882b 	.word	0x0800882b
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d037      	beq.n	8008830 <UART_SetConfig+0x6bc>
 80087c0:	e03a      	b.n	8008838 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80087c2:	f7fe ffd7 	bl	8007774 <HAL_RCCEx_GetD3PCLK1Freq>
 80087c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087c8:	e03c      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe ffe6 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d8:	e034      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087da:	f107 0318 	add.w	r3, r7, #24
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff f932 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087e8:	e02c      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087ea:	4b09      	ldr	r3, [pc, #36]	; (8008810 <UART_SetConfig+0x69c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d016      	beq.n	8008824 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087f6:	4b06      	ldr	r3, [pc, #24]	; (8008810 <UART_SetConfig+0x69c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	08db      	lsrs	r3, r3, #3
 80087fc:	f003 0303 	and.w	r3, r3, #3
 8008800:	4a07      	ldr	r2, [pc, #28]	; (8008820 <UART_SetConfig+0x6ac>)
 8008802:	fa22 f303 	lsr.w	r3, r2, r3
 8008806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008808:	e01c      	b.n	8008844 <UART_SetConfig+0x6d0>
 800880a:	bf00      	nop
 800880c:	40011400 	.word	0x40011400
 8008810:	58024400 	.word	0x58024400
 8008814:	40007800 	.word	0x40007800
 8008818:	40007c00 	.word	0x40007c00
 800881c:	58000c00 	.word	0x58000c00
 8008820:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008824:	4b9d      	ldr	r3, [pc, #628]	; (8008a9c <UART_SetConfig+0x928>)
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008828:	e00c      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800882a:	4b9d      	ldr	r3, [pc, #628]	; (8008aa0 <UART_SetConfig+0x92c>)
 800882c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800882e:	e009      	b.n	8008844 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008830:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008836:	e005      	b.n	8008844 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008842:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 81de 	beq.w	8008c08 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	4a94      	ldr	r2, [pc, #592]	; (8008aa4 <UART_SetConfig+0x930>)
 8008852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008856:	461a      	mov	r2, r3
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	fbb3 f3f2 	udiv	r3, r3, r2
 800885e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	4413      	add	r3, r2
 800886a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800886c:	429a      	cmp	r2, r3
 800886e:	d305      	bcc.n	800887c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008878:	429a      	cmp	r2, r3
 800887a:	d903      	bls.n	8008884 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008882:	e1c1      	b.n	8008c08 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008886:	2200      	movs	r2, #0
 8008888:	60bb      	str	r3, [r7, #8]
 800888a:	60fa      	str	r2, [r7, #12]
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	4a84      	ldr	r2, [pc, #528]	; (8008aa4 <UART_SetConfig+0x930>)
 8008892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008896:	b29b      	uxth	r3, r3
 8008898:	2200      	movs	r2, #0
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	607a      	str	r2, [r7, #4]
 800889e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088a6:	f7f7 fd6b 	bl	8000380 <__aeabi_uldivmod>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4610      	mov	r0, r2
 80088b0:	4619      	mov	r1, r3
 80088b2:	f04f 0200 	mov.w	r2, #0
 80088b6:	f04f 0300 	mov.w	r3, #0
 80088ba:	020b      	lsls	r3, r1, #8
 80088bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80088c0:	0202      	lsls	r2, r0, #8
 80088c2:	6979      	ldr	r1, [r7, #20]
 80088c4:	6849      	ldr	r1, [r1, #4]
 80088c6:	0849      	lsrs	r1, r1, #1
 80088c8:	2000      	movs	r0, #0
 80088ca:	460c      	mov	r4, r1
 80088cc:	4605      	mov	r5, r0
 80088ce:	eb12 0804 	adds.w	r8, r2, r4
 80088d2:	eb43 0905 	adc.w	r9, r3, r5
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	469a      	mov	sl, r3
 80088de:	4693      	mov	fp, r2
 80088e0:	4652      	mov	r2, sl
 80088e2:	465b      	mov	r3, fp
 80088e4:	4640      	mov	r0, r8
 80088e6:	4649      	mov	r1, r9
 80088e8:	f7f7 fd4a 	bl	8000380 <__aeabi_uldivmod>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4613      	mov	r3, r2
 80088f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088fa:	d308      	bcc.n	800890e <UART_SetConfig+0x79a>
 80088fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008902:	d204      	bcs.n	800890e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800890a:	60da      	str	r2, [r3, #12]
 800890c:	e17c      	b.n	8008c08 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008914:	e178      	b.n	8008c08 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	69db      	ldr	r3, [r3, #28]
 800891a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800891e:	f040 80c5 	bne.w	8008aac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008922:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008926:	2b20      	cmp	r3, #32
 8008928:	dc48      	bgt.n	80089bc <UART_SetConfig+0x848>
 800892a:	2b00      	cmp	r3, #0
 800892c:	db7b      	blt.n	8008a26 <UART_SetConfig+0x8b2>
 800892e:	2b20      	cmp	r3, #32
 8008930:	d879      	bhi.n	8008a26 <UART_SetConfig+0x8b2>
 8008932:	a201      	add	r2, pc, #4	; (adr r2, 8008938 <UART_SetConfig+0x7c4>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	080089c3 	.word	0x080089c3
 800893c:	080089cb 	.word	0x080089cb
 8008940:	08008a27 	.word	0x08008a27
 8008944:	08008a27 	.word	0x08008a27
 8008948:	080089d3 	.word	0x080089d3
 800894c:	08008a27 	.word	0x08008a27
 8008950:	08008a27 	.word	0x08008a27
 8008954:	08008a27 	.word	0x08008a27
 8008958:	080089e3 	.word	0x080089e3
 800895c:	08008a27 	.word	0x08008a27
 8008960:	08008a27 	.word	0x08008a27
 8008964:	08008a27 	.word	0x08008a27
 8008968:	08008a27 	.word	0x08008a27
 800896c:	08008a27 	.word	0x08008a27
 8008970:	08008a27 	.word	0x08008a27
 8008974:	08008a27 	.word	0x08008a27
 8008978:	080089f3 	.word	0x080089f3
 800897c:	08008a27 	.word	0x08008a27
 8008980:	08008a27 	.word	0x08008a27
 8008984:	08008a27 	.word	0x08008a27
 8008988:	08008a27 	.word	0x08008a27
 800898c:	08008a27 	.word	0x08008a27
 8008990:	08008a27 	.word	0x08008a27
 8008994:	08008a27 	.word	0x08008a27
 8008998:	08008a27 	.word	0x08008a27
 800899c:	08008a27 	.word	0x08008a27
 80089a0:	08008a27 	.word	0x08008a27
 80089a4:	08008a27 	.word	0x08008a27
 80089a8:	08008a27 	.word	0x08008a27
 80089ac:	08008a27 	.word	0x08008a27
 80089b0:	08008a27 	.word	0x08008a27
 80089b4:	08008a27 	.word	0x08008a27
 80089b8:	08008a19 	.word	0x08008a19
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	d02e      	beq.n	8008a1e <UART_SetConfig+0x8aa>
 80089c0:	e031      	b.n	8008a26 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089c2:	f7fd fca1 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 80089c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089c8:	e033      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089ca:	f7fd fcb3 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 80089ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089d0:	e02f      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fee2 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e0:	e027      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089e2:	f107 0318 	add.w	r3, r7, #24
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff f82e 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089f0:	e01f      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089f2:	4b2d      	ldr	r3, [pc, #180]	; (8008aa8 <UART_SetConfig+0x934>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0320 	and.w	r3, r3, #32
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089fe:	4b2a      	ldr	r3, [pc, #168]	; (8008aa8 <UART_SetConfig+0x934>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	08db      	lsrs	r3, r3, #3
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	4a24      	ldr	r2, [pc, #144]	; (8008a9c <UART_SetConfig+0x928>)
 8008a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a10:	e00f      	b.n	8008a32 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a12:	4b22      	ldr	r3, [pc, #136]	; (8008a9c <UART_SetConfig+0x928>)
 8008a14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a16:	e00c      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a18:	4b21      	ldr	r3, [pc, #132]	; (8008aa0 <UART_SetConfig+0x92c>)
 8008a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a1c:	e009      	b.n	8008a32 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a24:	e005      	b.n	8008a32 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 80e7 	beq.w	8008c08 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	4a19      	ldr	r2, [pc, #100]	; (8008aa4 <UART_SetConfig+0x930>)
 8008a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a4c:	005a      	lsls	r2, r3, #1
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	085b      	lsrs	r3, r3, #1
 8008a54:	441a      	add	r2, r3
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	2b0f      	cmp	r3, #15
 8008a64:	d916      	bls.n	8008a94 <UART_SetConfig+0x920>
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a6c:	d212      	bcs.n	8008a94 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f023 030f 	bic.w	r3, r3, #15
 8008a76:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f003 0307 	and.w	r3, r3, #7
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008a86:	4313      	orrs	r3, r2
 8008a88:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008a90:	60da      	str	r2, [r3, #12]
 8008a92:	e0b9      	b.n	8008c08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008a9a:	e0b5      	b.n	8008c08 <UART_SetConfig+0xa94>
 8008a9c:	03d09000 	.word	0x03d09000
 8008aa0:	003d0900 	.word	0x003d0900
 8008aa4:	080185d8 	.word	0x080185d8
 8008aa8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008aac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	dc49      	bgt.n	8008b48 <UART_SetConfig+0x9d4>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	db7c      	blt.n	8008bb2 <UART_SetConfig+0xa3e>
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d87a      	bhi.n	8008bb2 <UART_SetConfig+0xa3e>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x950>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008b4f 	.word	0x08008b4f
 8008ac8:	08008b57 	.word	0x08008b57
 8008acc:	08008bb3 	.word	0x08008bb3
 8008ad0:	08008bb3 	.word	0x08008bb3
 8008ad4:	08008b5f 	.word	0x08008b5f
 8008ad8:	08008bb3 	.word	0x08008bb3
 8008adc:	08008bb3 	.word	0x08008bb3
 8008ae0:	08008bb3 	.word	0x08008bb3
 8008ae4:	08008b6f 	.word	0x08008b6f
 8008ae8:	08008bb3 	.word	0x08008bb3
 8008aec:	08008bb3 	.word	0x08008bb3
 8008af0:	08008bb3 	.word	0x08008bb3
 8008af4:	08008bb3 	.word	0x08008bb3
 8008af8:	08008bb3 	.word	0x08008bb3
 8008afc:	08008bb3 	.word	0x08008bb3
 8008b00:	08008bb3 	.word	0x08008bb3
 8008b04:	08008b7f 	.word	0x08008b7f
 8008b08:	08008bb3 	.word	0x08008bb3
 8008b0c:	08008bb3 	.word	0x08008bb3
 8008b10:	08008bb3 	.word	0x08008bb3
 8008b14:	08008bb3 	.word	0x08008bb3
 8008b18:	08008bb3 	.word	0x08008bb3
 8008b1c:	08008bb3 	.word	0x08008bb3
 8008b20:	08008bb3 	.word	0x08008bb3
 8008b24:	08008bb3 	.word	0x08008bb3
 8008b28:	08008bb3 	.word	0x08008bb3
 8008b2c:	08008bb3 	.word	0x08008bb3
 8008b30:	08008bb3 	.word	0x08008bb3
 8008b34:	08008bb3 	.word	0x08008bb3
 8008b38:	08008bb3 	.word	0x08008bb3
 8008b3c:	08008bb3 	.word	0x08008bb3
 8008b40:	08008bb3 	.word	0x08008bb3
 8008b44:	08008ba5 	.word	0x08008ba5
 8008b48:	2b40      	cmp	r3, #64	; 0x40
 8008b4a:	d02e      	beq.n	8008baa <UART_SetConfig+0xa36>
 8008b4c:	e031      	b.n	8008bb2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b4e:	f7fd fbdb 	bl	8006308 <HAL_RCC_GetPCLK1Freq>
 8008b52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b54:	e033      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b56:	f7fd fbed 	bl	8006334 <HAL_RCC_GetPCLK2Freq>
 8008b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b5c:	e02f      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fe fe1c 	bl	80077a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b6c:	e027      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b6e:	f107 0318 	add.w	r3, r7, #24
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe ff68 	bl	8007a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008b78:	69fb      	ldr	r3, [r7, #28]
 8008b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b7c:	e01f      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b7e:	4b2d      	ldr	r3, [pc, #180]	; (8008c34 <UART_SetConfig+0xac0>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0320 	and.w	r3, r3, #32
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d009      	beq.n	8008b9e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008b8a:	4b2a      	ldr	r3, [pc, #168]	; (8008c34 <UART_SetConfig+0xac0>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	08db      	lsrs	r3, r3, #3
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	4a28      	ldr	r2, [pc, #160]	; (8008c38 <UART_SetConfig+0xac4>)
 8008b96:	fa22 f303 	lsr.w	r3, r2, r3
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008b9c:	e00f      	b.n	8008bbe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008b9e:	4b26      	ldr	r3, [pc, #152]	; (8008c38 <UART_SetConfig+0xac4>)
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba2:	e00c      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ba4:	4b25      	ldr	r3, [pc, #148]	; (8008c3c <UART_SetConfig+0xac8>)
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba8:	e009      	b.n	8008bbe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bb0:	e005      	b.n	8008bbe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008bbc:	bf00      	nop
    }

    if (pclk != 0U)
 8008bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d021      	beq.n	8008c08 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	4a1d      	ldr	r2, [pc, #116]	; (8008c40 <UART_SetConfig+0xacc>)
 8008bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	441a      	add	r2, r3
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	2b0f      	cmp	r3, #15
 8008bec:	d909      	bls.n	8008c02 <UART_SetConfig+0xa8e>
 8008bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bf4:	d205      	bcs.n	8008c02 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60da      	str	r2, [r3, #12]
 8008c00:	e002      	b.n	8008c08 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2200      	movs	r2, #0
 8008c22:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008c24:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3748      	adds	r7, #72	; 0x48
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c32:	bf00      	nop
 8008c34:	58024400 	.word	0x58024400
 8008c38:	03d09000 	.word	0x03d09000
 8008c3c:	003d0900 	.word	0x003d0900
 8008c40:	080185d8 	.word	0x080185d8

08008c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00a      	beq.n	8008c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	430a      	orrs	r2, r1
 8008c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00a      	beq.n	8008c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	430a      	orrs	r2, r1
 8008c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	f003 0304 	and.w	r3, r3, #4
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00a      	beq.n	8008cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	f003 0310 	and.w	r3, r3, #16
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d01a      	beq.n	8008d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d42:	d10a      	bne.n	8008d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00a      	beq.n	8008d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	605a      	str	r2, [r3, #4]
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b098      	sub	sp, #96	; 0x60
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d98:	f7fb fa2e 	bl	80041f8 <HAL_GetTick>
 8008d9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0308 	and.w	r3, r3, #8
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d12f      	bne.n	8008e0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db4:	2200      	movs	r2, #0
 8008db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f88e 	bl	8008edc <UART_WaitOnFlagUntilTimeout>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d022      	beq.n	8008e0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	e853 3f00 	ldrex	r3, [r3]
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dda:	653b      	str	r3, [r7, #80]	; 0x50
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	461a      	mov	r2, r3
 8008de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008de4:	647b      	str	r3, [r7, #68]	; 0x44
 8008de6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dec:	e841 2300 	strex	r3, r2, [r1]
 8008df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1e6      	bne.n	8008dc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e063      	b.n	8008ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0304 	and.w	r3, r3, #4
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d149      	bne.n	8008eae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e1e:	9300      	str	r3, [sp, #0]
 8008e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e22:	2200      	movs	r2, #0
 8008e24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 f857 	bl	8008edc <UART_WaitOnFlagUntilTimeout>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d03c      	beq.n	8008eae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	623b      	str	r3, [r7, #32]
   return(result);
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e52:	633b      	str	r3, [r7, #48]	; 0x30
 8008e54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e5a:	e841 2300 	strex	r3, r2, [r1]
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d1e6      	bne.n	8008e34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f023 0301 	bic.w	r3, r3, #1
 8008e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e86:	61fa      	str	r2, [r7, #28]
 8008e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8a:	69b9      	ldr	r1, [r7, #24]
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	617b      	str	r3, [r7, #20]
   return(result);
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1e5      	bne.n	8008e66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2220      	movs	r2, #32
 8008e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	e012      	b.n	8008ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3758      	adds	r7, #88	; 0x58
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	603b      	str	r3, [r7, #0]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eec:	e049      	b.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef4:	d045      	beq.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ef6:	f7fb f97f 	bl	80041f8 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d302      	bcc.n	8008f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e048      	b.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0304 	and.w	r3, r3, #4
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d031      	beq.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b08      	cmp	r3, #8
 8008f2a:	d110      	bne.n	8008f4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2208      	movs	r2, #8
 8008f32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 f839 	bl	8008fac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2208      	movs	r2, #8
 8008f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e029      	b.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69db      	ldr	r3, [r3, #28]
 8008f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f5c:	d111      	bne.n	8008f82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 f81f 	bl	8008fac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e00f      	b.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69da      	ldr	r2, [r3, #28]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	bf0c      	ite	eq
 8008f92:	2301      	moveq	r3, #1
 8008f94:	2300      	movne	r3, #0
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d0a6      	beq.n	8008eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b095      	sub	sp, #84	; 0x54
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8008fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e6      	bne.n	8008fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3308      	adds	r3, #8
 8008fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	6a3b      	ldr	r3, [r7, #32]
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	4b1e      	ldr	r3, [pc, #120]	; (8009074 <UART_EndRxTransfer+0xc8>)
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009006:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009008:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800900c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e5      	bne.n	8008fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800901e:	2b01      	cmp	r3, #1
 8009020:	d118      	bne.n	8009054 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	e853 3f00 	ldrex	r3, [r3]
 800902e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	f023 0310 	bic.w	r3, r3, #16
 8009036:	647b      	str	r3, [r7, #68]	; 0x44
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009040:	61bb      	str	r3, [r7, #24]
 8009042:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	6979      	ldr	r1, [r7, #20]
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	613b      	str	r3, [r7, #16]
   return(result);
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e6      	bne.n	8009022 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2220      	movs	r2, #32
 8009058:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009068:	bf00      	nop
 800906a:	3754      	adds	r7, #84	; 0x54
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	effffffe 	.word	0xeffffffe

08009078 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_UARTEx_DisableFifoMode+0x16>
 800908a:	2302      	movs	r3, #2
 800908c:	e027      	b.n	80090de <HAL_UARTEx_DisableFifoMode+0x66>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2224      	movs	r2, #36	; 0x24
 800909a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f022 0201 	bic.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2220      	movs	r2, #32
 80090d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d101      	bne.n	8009102 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090fe:	2302      	movs	r3, #2
 8009100:	e02d      	b.n	800915e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2224      	movs	r2, #36	; 0x24
 800910e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f022 0201 	bic.w	r2, r2, #1
 8009128:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f850 	bl	80091e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2220      	movs	r2, #32
 8009150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b084      	sub	sp, #16
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009176:	2b01      	cmp	r3, #1
 8009178:	d101      	bne.n	800917e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800917a:	2302      	movs	r3, #2
 800917c:	e02d      	b.n	80091da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2224      	movs	r2, #36	; 0x24
 800918a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f022 0201 	bic.w	r2, r2, #1
 80091a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f812 	bl	80091e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d108      	bne.n	8009206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009204:	e031      	b.n	800926a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009206:	2310      	movs	r3, #16
 8009208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800920a:	2310      	movs	r3, #16
 800920c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	0e5b      	lsrs	r3, r3, #25
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	0f5b      	lsrs	r3, r3, #29
 8009226:	b2db      	uxtb	r3, r3
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800922e:	7bbb      	ldrb	r3, [r7, #14]
 8009230:	7b3a      	ldrb	r2, [r7, #12]
 8009232:	4911      	ldr	r1, [pc, #68]	; (8009278 <UARTEx_SetNbDataToProcess+0x94>)
 8009234:	5c8a      	ldrb	r2, [r1, r2]
 8009236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800923a:	7b3a      	ldrb	r2, [r7, #12]
 800923c:	490f      	ldr	r1, [pc, #60]	; (800927c <UARTEx_SetNbDataToProcess+0x98>)
 800923e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009240:	fb93 f3f2 	sdiv	r3, r3, r2
 8009244:	b29a      	uxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	7b7a      	ldrb	r2, [r7, #13]
 8009250:	4909      	ldr	r1, [pc, #36]	; (8009278 <UARTEx_SetNbDataToProcess+0x94>)
 8009252:	5c8a      	ldrb	r2, [r1, r2]
 8009254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009258:	7b7a      	ldrb	r2, [r7, #13]
 800925a:	4908      	ldr	r1, [pc, #32]	; (800927c <UARTEx_SetNbDataToProcess+0x98>)
 800925c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800925e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009262:	b29a      	uxth	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	080185f0 	.word	0x080185f0
 800927c:	080185f8 	.word	0x080185f8

08009280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009280:	b084      	sub	sp, #16
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	f107 001c 	add.w	r0, r7, #28
 800928e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	2b01      	cmp	r3, #1
 8009296:	d120      	bne.n	80092da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68da      	ldr	r2, [r3, #12]
 80092a8:	4b2a      	ldr	r3, [pc, #168]	; (8009354 <USB_CoreInit+0xd4>)
 80092aa:	4013      	ands	r3, r2
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d105      	bne.n	80092ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 faac 	bl	800982c <USB_CoreReset>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73fb      	strb	r3, [r7, #15]
 80092d8:	e01a      	b.n	8009310 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 faa0 	bl	800982c <USB_CoreReset>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80092f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d106      	bne.n	8009304 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	639a      	str	r2, [r3, #56]	; 0x38
 8009302:	e005      	b.n	8009310 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009308:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	2b01      	cmp	r3, #1
 8009314:	d116      	bne.n	8009344 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800931a:	b29a      	uxth	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009324:	4b0c      	ldr	r3, [pc, #48]	; (8009358 <USB_CoreInit+0xd8>)
 8009326:	4313      	orrs	r3, r2
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f043 0206 	orr.w	r2, r3, #6
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f043 0220 	orr.w	r2, r3, #32
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009350:	b004      	add	sp, #16
 8009352:	4770      	bx	lr
 8009354:	ffbdffbf 	.word	0xffbdffbf
 8009358:	03ee0000 	.word	0x03ee0000

0800935c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f023 0201 	bic.w	r2, r3, #1
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	460b      	mov	r3, r1
 8009388:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800939a:	78fb      	ldrb	r3, [r7, #3]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d115      	bne.n	80093cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80093ac:	2001      	movs	r0, #1
 80093ae:	f7fa ff2f 	bl	8004210 <HAL_Delay>
      ms++;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3301      	adds	r3, #1
 80093b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fa29 	bl	8009810 <USB_GetMode>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d01e      	beq.n	8009402 <USB_SetCurrentMode+0x84>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2b31      	cmp	r3, #49	; 0x31
 80093c8:	d9f0      	bls.n	80093ac <USB_SetCurrentMode+0x2e>
 80093ca:	e01a      	b.n	8009402 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d115      	bne.n	80093fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80093de:	2001      	movs	r0, #1
 80093e0:	f7fa ff16 	bl	8004210 <HAL_Delay>
      ms++;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3301      	adds	r3, #1
 80093e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fa10 	bl	8009810 <USB_GetMode>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d005      	beq.n	8009402 <USB_SetCurrentMode+0x84>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2b31      	cmp	r3, #49	; 0x31
 80093fa:	d9f0      	bls.n	80093de <USB_SetCurrentMode+0x60>
 80093fc:	e001      	b.n	8009402 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e005      	b.n	800940e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b32      	cmp	r3, #50	; 0x32
 8009406:	d101      	bne.n	800940c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e000      	b.n	800940e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
	...

08009418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009418:	b084      	sub	sp, #16
 800941a:	b580      	push	{r7, lr}
 800941c:	b086      	sub	sp, #24
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
 8009422:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009432:	2300      	movs	r3, #0
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	e009      	b.n	800944c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	3340      	adds	r3, #64	; 0x40
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	2200      	movs	r2, #0
 8009444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	3301      	adds	r3, #1
 800944a:	613b      	str	r3, [r7, #16]
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	2b0e      	cmp	r3, #14
 8009450:	d9f2      	bls.n	8009438 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009454:	2b00      	cmp	r3, #0
 8009456:	d11c      	bne.n	8009492 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009466:	f043 0302 	orr.w	r3, r3, #2
 800946a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009470:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	e005      	b.n	800949e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009496:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094a4:	461a      	mov	r2, r3
 80094a6:	2300      	movs	r3, #0
 80094a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b0:	4619      	mov	r1, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b8:	461a      	mov	r2, r3
 80094ba:	680b      	ldr	r3, [r1, #0]
 80094bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d10c      	bne.n	80094de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d104      	bne.n	80094d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094ca:	2100      	movs	r1, #0
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f965 	bl	800979c <USB_SetDevSpeed>
 80094d2:	e008      	b.n	80094e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094d4:	2101      	movs	r1, #1
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f960 	bl	800979c <USB_SetDevSpeed>
 80094dc:	e003      	b.n	80094e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094de:	2103      	movs	r1, #3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f95b 	bl	800979c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094e6:	2110      	movs	r1, #16
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f8f3 	bl	80096d4 <USB_FlushTxFifo>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f91f 	bl	800973c <USB_FlushRxFifo>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800950e:	461a      	mov	r2, r3
 8009510:	2300      	movs	r3, #0
 8009512:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951a:	461a      	mov	r2, r3
 800951c:	2300      	movs	r3, #0
 800951e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009526:	461a      	mov	r2, r3
 8009528:	2300      	movs	r3, #0
 800952a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800952c:	2300      	movs	r3, #0
 800952e:	613b      	str	r3, [r7, #16]
 8009530:	e043      	b.n	80095ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009544:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009548:	d118      	bne.n	800957c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10a      	bne.n	8009566 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955c:	461a      	mov	r2, r3
 800955e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	e013      	b.n	800958e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009572:	461a      	mov	r2, r3
 8009574:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	e008      	b.n	800958e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009588:	461a      	mov	r2, r3
 800958a:	2300      	movs	r3, #0
 800958c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	4413      	add	r3, r2
 8009596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959a:	461a      	mov	r2, r3
 800959c:	2300      	movs	r3, #0
 800959e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ac:	461a      	mov	r2, r3
 80095ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	3301      	adds	r3, #1
 80095b8:	613b      	str	r3, [r7, #16]
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d3b7      	bcc.n	8009532 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095c2:	2300      	movs	r3, #0
 80095c4:	613b      	str	r3, [r7, #16]
 80095c6:	e043      	b.n	8009650 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095de:	d118      	bne.n	8009612 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10a      	bne.n	80095fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f2:	461a      	mov	r2, r3
 80095f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	e013      	b.n	8009624 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009608:	461a      	mov	r2, r3
 800960a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	e008      	b.n	8009624 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4413      	add	r3, r2
 800961a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961e:	461a      	mov	r2, r3
 8009620:	2300      	movs	r3, #0
 8009622:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009630:	461a      	mov	r2, r3
 8009632:	2300      	movs	r3, #0
 8009634:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009642:	461a      	mov	r2, r3
 8009644:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009648:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	3301      	adds	r3, #1
 800964e:	613b      	str	r3, [r7, #16]
 8009650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	429a      	cmp	r2, r3
 8009656:	d3b7      	bcc.n	80095c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800966a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009678:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	2b00      	cmp	r3, #0
 800967e:	d105      	bne.n	800968c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	f043 0210 	orr.w	r2, r3, #16
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699a      	ldr	r2, [r3, #24]
 8009690:	4b0e      	ldr	r3, [pc, #56]	; (80096cc <USB_DevInit+0x2b4>)
 8009692:	4313      	orrs	r3, r2
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d005      	beq.n	80096aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	f043 0208 	orr.w	r2, r3, #8
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d105      	bne.n	80096bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <USB_DevInit+0x2b8>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3718      	adds	r7, #24
 80096c2:	46bd      	mov	sp, r7
 80096c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096c8:	b004      	add	sp, #16
 80096ca:	4770      	bx	lr
 80096cc:	803c3800 	.word	0x803c3800
 80096d0:	40000004 	.word	0x40000004

080096d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	4a13      	ldr	r2, [pc, #76]	; (8009738 <USB_FlushTxFifo+0x64>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d901      	bls.n	80096f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e01b      	b.n	800972c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	daf2      	bge.n	80096e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80096fc:	2300      	movs	r3, #0
 80096fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	019b      	lsls	r3, r3, #6
 8009704:	f043 0220 	orr.w	r2, r3, #32
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	3301      	adds	r3, #1
 8009710:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4a08      	ldr	r2, [pc, #32]	; (8009738 <USB_FlushTxFifo+0x64>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d901      	bls.n	800971e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	e006      	b.n	800972c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f003 0320 	and.w	r3, r3, #32
 8009726:	2b20      	cmp	r3, #32
 8009728:	d0f0      	beq.n	800970c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr
 8009738:	00030d40 	.word	0x00030d40

0800973c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800973c:	b480      	push	{r7}
 800973e:	b085      	sub	sp, #20
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3301      	adds	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4a11      	ldr	r2, [pc, #68]	; (8009798 <USB_FlushRxFifo+0x5c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d901      	bls.n	800975a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e018      	b.n	800978c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	daf2      	bge.n	8009748 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2210      	movs	r2, #16
 800976a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	3301      	adds	r3, #1
 8009770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4a08      	ldr	r2, [pc, #32]	; (8009798 <USB_FlushRxFifo+0x5c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d901      	bls.n	800977e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800977a:	2303      	movs	r3, #3
 800977c:	e006      	b.n	800978c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	f003 0310 	and.w	r3, r3, #16
 8009786:	2b10      	cmp	r3, #16
 8009788:	d0f0      	beq.n	800976c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr
 8009798:	00030d40 	.word	0x00030d40

0800979c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	68f9      	ldr	r1, [r7, #12]
 80097b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097bc:	4313      	orrs	r3, r2
 80097be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b085      	sub	sp, #20
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097fc:	f043 0302 	orr.w	r3, r3, #2
 8009800:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009802:	2300      	movs	r3, #0
}
 8009804:	4618      	mov	r0, r3
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	f003 0301 	and.w	r3, r3, #1
}
 8009820:	4618      	mov	r0, r3
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3301      	adds	r3, #1
 800983c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4a13      	ldr	r2, [pc, #76]	; (8009890 <USB_CoreReset+0x64>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d901      	bls.n	800984a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e01b      	b.n	8009882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	daf2      	bge.n	8009838 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009852:	2300      	movs	r3, #0
 8009854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	f043 0201 	orr.w	r2, r3, #1
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4a09      	ldr	r2, [pc, #36]	; (8009890 <USB_CoreReset+0x64>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d901      	bls.n	8009874 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009870:	2303      	movs	r3, #3
 8009872:	e006      	b.n	8009882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691b      	ldr	r3, [r3, #16]
 8009878:	f003 0301 	and.w	r3, r3, #1
 800987c:	2b01      	cmp	r3, #1
 800987e:	d0f0      	beq.n	8009862 <USB_CoreReset+0x36>

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	00030d40 	.word	0x00030d40

08009894 <checkint>:
 8009894:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009898:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800989c:	429a      	cmp	r2, r3
 800989e:	b570      	push	{r4, r5, r6, lr}
 80098a0:	dd2a      	ble.n	80098f8 <checkint+0x64>
 80098a2:	f240 4333 	movw	r3, #1075	; 0x433
 80098a6:	429a      	cmp	r2, r3
 80098a8:	dc24      	bgt.n	80098f4 <checkint+0x60>
 80098aa:	1a9b      	subs	r3, r3, r2
 80098ac:	f1a3 0620 	sub.w	r6, r3, #32
 80098b0:	f04f 32ff 	mov.w	r2, #4294967295
 80098b4:	fa02 f403 	lsl.w	r4, r2, r3
 80098b8:	fa02 f606 	lsl.w	r6, r2, r6
 80098bc:	f1c3 0520 	rsb	r5, r3, #32
 80098c0:	fa22 f505 	lsr.w	r5, r2, r5
 80098c4:	4334      	orrs	r4, r6
 80098c6:	432c      	orrs	r4, r5
 80098c8:	409a      	lsls	r2, r3
 80098ca:	ea20 0202 	bic.w	r2, r0, r2
 80098ce:	ea21 0404 	bic.w	r4, r1, r4
 80098d2:	4322      	orrs	r2, r4
 80098d4:	f1a3 0420 	sub.w	r4, r3, #32
 80098d8:	f1c3 0220 	rsb	r2, r3, #32
 80098dc:	d10c      	bne.n	80098f8 <checkint+0x64>
 80098de:	40d8      	lsrs	r0, r3
 80098e0:	fa01 f302 	lsl.w	r3, r1, r2
 80098e4:	4318      	orrs	r0, r3
 80098e6:	40e1      	lsrs	r1, r4
 80098e8:	4308      	orrs	r0, r1
 80098ea:	f000 0001 	and.w	r0, r0, #1
 80098ee:	f1d0 0002 	rsbs	r0, r0, #2
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	2002      	movs	r0, #2
 80098f6:	e7fc      	b.n	80098f2 <checkint+0x5e>
 80098f8:	2000      	movs	r0, #0
 80098fa:	e7fa      	b.n	80098f2 <checkint+0x5e>
 80098fc:	0000      	movs	r0, r0
	...

08009900 <pow>:
 8009900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009904:	ee10 4a90 	vmov	r4, s1
 8009908:	ed2d 8b0a 	vpush	{d8-d12}
 800990c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8009910:	ee11 7a90 	vmov	r7, s3
 8009914:	f10a 32ff 	add.w	r2, sl, #4294967295
 8009918:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800991c:	429a      	cmp	r2, r3
 800991e:	ee10 6a10 	vmov	r6, s0
 8009922:	ee11 0a10 	vmov	r0, s2
 8009926:	b086      	sub	sp, #24
 8009928:	46d4      	mov	ip, sl
 800992a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800992e:	d806      	bhi.n	800993e <pow+0x3e>
 8009930:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8009934:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8009938:	2b7f      	cmp	r3, #127	; 0x7f
 800993a:	f240 8156 	bls.w	8009bea <pow+0x2ea>
 800993e:	1802      	adds	r2, r0, r0
 8009940:	eb47 0107 	adc.w	r1, r7, r7
 8009944:	f06f 0e01 	mvn.w	lr, #1
 8009948:	f112 39ff 	adds.w	r9, r2, #4294967295
 800994c:	f141 38ff 	adc.w	r8, r1, #4294967295
 8009950:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8009954:	45ce      	cmp	lr, r9
 8009956:	eb73 0808 	sbcs.w	r8, r3, r8
 800995a:	d23f      	bcs.n	80099dc <pow+0xdc>
 800995c:	ea52 0301 	orrs.w	r3, r2, r1
 8009960:	f04f 0300 	mov.w	r3, #0
 8009964:	d10c      	bne.n	8009980 <pow+0x80>
 8009966:	19b6      	adds	r6, r6, r6
 8009968:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 800996c:	4164      	adcs	r4, r4
 800996e:	42b3      	cmp	r3, r6
 8009970:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009974:	41a3      	sbcs	r3, r4
 8009976:	f0c0 808c 	bcc.w	8009a92 <pow+0x192>
 800997a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800997e:	e028      	b.n	80099d2 <pow+0xd2>
 8009980:	4da3      	ldr	r5, [pc, #652]	; (8009c10 <pow+0x310>)
 8009982:	42ac      	cmp	r4, r5
 8009984:	bf08      	it	eq
 8009986:	429e      	cmpeq	r6, r3
 8009988:	d107      	bne.n	800999a <pow+0x9a>
 800998a:	1800      	adds	r0, r0, r0
 800998c:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8009990:	417f      	adcs	r7, r7
 8009992:	4283      	cmp	r3, r0
 8009994:	4b9f      	ldr	r3, [pc, #636]	; (8009c14 <pow+0x314>)
 8009996:	41bb      	sbcs	r3, r7
 8009998:	e7ed      	b.n	8009976 <pow+0x76>
 800999a:	19b6      	adds	r6, r6, r6
 800999c:	489e      	ldr	r0, [pc, #632]	; (8009c18 <pow+0x318>)
 800999e:	4164      	adcs	r4, r4
 80099a0:	42b3      	cmp	r3, r6
 80099a2:	eb70 0504 	sbcs.w	r5, r0, r4
 80099a6:	d374      	bcc.n	8009a92 <pow+0x192>
 80099a8:	4281      	cmp	r1, r0
 80099aa:	bf08      	it	eq
 80099ac:	429a      	cmpeq	r2, r3
 80099ae:	d170      	bne.n	8009a92 <pow+0x192>
 80099b0:	4a9a      	ldr	r2, [pc, #616]	; (8009c1c <pow+0x31c>)
 80099b2:	4294      	cmp	r4, r2
 80099b4:	bf08      	it	eq
 80099b6:	429e      	cmpeq	r6, r3
 80099b8:	d0df      	beq.n	800997a <pow+0x7a>
 80099ba:	4294      	cmp	r4, r2
 80099bc:	ea6f 0707 	mvn.w	r7, r7
 80099c0:	bf34      	ite	cc
 80099c2:	2400      	movcc	r4, #0
 80099c4:	2401      	movcs	r4, #1
 80099c6:	0fff      	lsrs	r7, r7, #31
 80099c8:	42bc      	cmp	r4, r7
 80099ca:	f040 81d9 	bne.w	8009d80 <pow+0x480>
 80099ce:	ee21 0b01 	vmul.f64	d0, d1, d1
 80099d2:	b006      	add	sp, #24
 80099d4:	ecbd 8b0a 	vpop	{d8-d12}
 80099d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099dc:	eb16 0806 	adds.w	r8, r6, r6
 80099e0:	eb44 0904 	adc.w	r9, r4, r4
 80099e4:	f118 31ff 	adds.w	r1, r8, #4294967295
 80099e8:	f169 0200 	sbc.w	r2, r9, #0
 80099ec:	458e      	cmp	lr, r1
 80099ee:	4193      	sbcs	r3, r2
 80099f0:	d223      	bcs.n	8009a3a <pow+0x13a>
 80099f2:	ee20 0b00 	vmul.f64	d0, d0, d0
 80099f6:	2c00      	cmp	r4, #0
 80099f8:	da12      	bge.n	8009a20 <pow+0x120>
 80099fa:	4639      	mov	r1, r7
 80099fc:	f7ff ff4a 	bl	8009894 <checkint>
 8009a00:	2801      	cmp	r0, #1
 8009a02:	d10d      	bne.n	8009a20 <pow+0x120>
 8009a04:	eeb1 0b40 	vneg.f64	d0, d0
 8009a08:	ea58 0309 	orrs.w	r3, r8, r9
 8009a0c:	d10a      	bne.n	8009a24 <pow+0x124>
 8009a0e:	2f00      	cmp	r7, #0
 8009a10:	dadf      	bge.n	80099d2 <pow+0xd2>
 8009a12:	b006      	add	sp, #24
 8009a14:	ecbd 8b0a 	vpop	{d8-d12}
 8009a18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a1c:	f000 ba8c 	b.w	8009f38 <__math_divzero>
 8009a20:	2000      	movs	r0, #0
 8009a22:	e7f1      	b.n	8009a08 <pow+0x108>
 8009a24:	2f00      	cmp	r7, #0
 8009a26:	dad4      	bge.n	80099d2 <pow+0xd2>
 8009a28:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009a2c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8009a30:	ed8d 7b00 	vstr	d7, [sp]
 8009a34:	ed9d 0b00 	vldr	d0, [sp]
 8009a38:	e7cb      	b.n	80099d2 <pow+0xd2>
 8009a3a:	2c00      	cmp	r4, #0
 8009a3c:	da2c      	bge.n	8009a98 <pow+0x198>
 8009a3e:	4639      	mov	r1, r7
 8009a40:	f7ff ff28 	bl	8009894 <checkint>
 8009a44:	b930      	cbnz	r0, 8009a54 <pow+0x154>
 8009a46:	b006      	add	sp, #24
 8009a48:	ecbd 8b0a 	vpop	{d8-d12}
 8009a4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	f000 ba8a 	b.w	8009f68 <__math_invalid>
 8009a54:	2801      	cmp	r0, #1
 8009a56:	bf14      	ite	ne
 8009a58:	2000      	movne	r0, #0
 8009a5a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8009a5e:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009a62:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8009a66:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8009a6a:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8009a6e:	2b7f      	cmp	r3, #127	; 0x7f
 8009a70:	d92d      	bls.n	8009ace <pow+0x1ce>
 8009a72:	4b67      	ldr	r3, [pc, #412]	; (8009c10 <pow+0x310>)
 8009a74:	2000      	movs	r0, #0
 8009a76:	429c      	cmp	r4, r3
 8009a78:	bf08      	it	eq
 8009a7a:	4286      	cmpeq	r6, r0
 8009a7c:	f43f af7d 	beq.w	800997a <pow+0x7a>
 8009a80:	f240 31bd 	movw	r1, #957	; 0x3bd
 8009a84:	428a      	cmp	r2, r1
 8009a86:	d80c      	bhi.n	8009aa2 <pow+0x1a2>
 8009a88:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009a8c:	42b0      	cmp	r0, r6
 8009a8e:	41a3      	sbcs	r3, r4
 8009a90:	d204      	bcs.n	8009a9c <pow+0x19c>
 8009a92:	ee31 0b00 	vadd.f64	d0, d1, d0
 8009a96:	e79c      	b.n	80099d2 <pow+0xd2>
 8009a98:	2000      	movs	r0, #0
 8009a9a:	e7e4      	b.n	8009a66 <pow+0x166>
 8009a9c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009aa0:	e797      	b.n	80099d2 <pow+0xd2>
 8009aa2:	2e01      	cmp	r6, #1
 8009aa4:	eb74 0303 	sbcs.w	r3, r4, r3
 8009aa8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009aac:	bf34      	ite	cc
 8009aae:	2301      	movcc	r3, #1
 8009ab0:	2300      	movcs	r3, #0
 8009ab2:	4295      	cmp	r5, r2
 8009ab4:	bf8c      	ite	hi
 8009ab6:	2500      	movhi	r5, #0
 8009ab8:	2501      	movls	r5, #1
 8009aba:	42ab      	cmp	r3, r5
 8009abc:	f000 809d 	beq.w	8009bfa <pow+0x2fa>
 8009ac0:	b006      	add	sp, #24
 8009ac2:	ecbd 8b0a 	vpop	{d8-d12}
 8009ac6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aca:	f000 ba2d 	b.w	8009f28 <__math_oflow>
 8009ace:	f1bc 0f00 	cmp.w	ip, #0
 8009ad2:	d10b      	bne.n	8009aec <pow+0x1ec>
 8009ad4:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8009c08 <pow+0x308>
 8009ad8:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009adc:	ec53 2b17 	vmov	r2, r3, d7
 8009ae0:	ee17 6a10 	vmov	r6, s14
 8009ae4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009ae8:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8009aec:	4b4c      	ldr	r3, [pc, #304]	; (8009c20 <pow+0x320>)
 8009aee:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8009af2:	4423      	add	r3, r4
 8009af4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8009af8:	1519      	asrs	r1, r3, #20
 8009afa:	0d1b      	lsrs	r3, r3, #20
 8009afc:	051b      	lsls	r3, r3, #20
 8009afe:	eba4 0903 	sub.w	r9, r4, r3
 8009b02:	4b48      	ldr	r3, [pc, #288]	; (8009c24 <pow+0x324>)
 8009b04:	ee04 1a10 	vmov	s8, r1
 8009b08:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8009b0c:	f1b6 0800 	subs.w	r8, r6, #0
 8009b10:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8009b14:	ec49 8b15 	vmov	d5, r8, r9
 8009b18:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8009b1c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8009b20:	ed93 7b00 	vldr	d7, [r3]
 8009b24:	ed93 5b02 	vldr	d5, [r3, #8]
 8009b28:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8009b2c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8009b30:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8009b34:	ee36 ab02 	vadd.f64	d10, d6, d2
 8009b38:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8009b3c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009b40:	ed93 5b04 	vldr	d5, [r3, #16]
 8009b44:	ee32 2b06 	vadd.f64	d2, d2, d6
 8009b48:	ee37 7b02 	vadd.f64	d7, d7, d2
 8009b4c:	ee26 5b05 	vmul.f64	d5, d6, d5
 8009b50:	ed93 4b08 	vldr	d4, [r3, #32]
 8009b54:	ee26 0b05 	vmul.f64	d0, d6, d5
 8009b58:	eeb0 9b40 	vmov.f64	d9, d0
 8009b5c:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8009b60:	ed93 5b06 	vldr	d5, [r3, #24]
 8009b64:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8009b68:	ee26 bb00 	vmul.f64	d11, d6, d0
 8009b6c:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8009b70:	eea6 5b04 	vfma.f64	d5, d6, d4
 8009b74:	ee3a ab48 	vsub.f64	d10, d10, d8
 8009b78:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8009b7c:	ee37 9b09 	vadd.f64	d9, d7, d9
 8009b80:	ee3a ab00 	vadd.f64	d10, d10, d0
 8009b84:	eea6 4b03 	vfma.f64	d4, d6, d3
 8009b88:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8009b8c:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8009b90:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8009b94:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8009b98:	eea0 4b03 	vfma.f64	d4, d0, d3
 8009b9c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8009ba0:	eeab ab05 	vfma.f64	d10, d11, d5
 8009ba4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8009ba8:	ee21 7b06 	vmul.f64	d7, d1, d6
 8009bac:	ee17 3a90 	vmov	r3, s15
 8009bb0:	eeb0 5b47 	vmov.f64	d5, d7
 8009bb4:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8009bb8:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8009bbc:	18b2      	adds	r2, r6, r2
 8009bbe:	2a3e      	cmp	r2, #62	; 0x3e
 8009bc0:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8009bc4:	ee38 8b46 	vsub.f64	d8, d8, d6
 8009bc8:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8009bcc:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8009bd0:	d92b      	bls.n	8009c2a <pow+0x32a>
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	da0b      	bge.n	8009bee <pow+0x2ee>
 8009bd6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009bda:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009bde:	2800      	cmp	r0, #0
 8009be0:	f43f aef7 	beq.w	80099d2 <pow+0xd2>
 8009be4:	eeb1 0b40 	vneg.f64	d0, d0
 8009be8:	e6f3      	b.n	80099d2 <pow+0xd2>
 8009bea:	2000      	movs	r0, #0
 8009bec:	e77e      	b.n	8009aec <pow+0x1ec>
 8009bee:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8009bf2:	d919      	bls.n	8009c28 <pow+0x328>
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f6bf af63 	bge.w	8009ac0 <pow+0x1c0>
 8009bfa:	b006      	add	sp, #24
 8009bfc:	ecbd 8b0a 	vpop	{d8-d12}
 8009c00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c04:	f000 b988 	b.w	8009f18 <__math_uflow>
 8009c08:	00000000 	.word	0x00000000
 8009c0c:	43300000 	.word	0x43300000
 8009c10:	3ff00000 	.word	0x3ff00000
 8009c14:	fff00000 	.word	0xfff00000
 8009c18:	ffe00000 	.word	0xffe00000
 8009c1c:	7fe00000 	.word	0x7fe00000
 8009c20:	c0196aab 	.word	0xc0196aab
 8009c24:	08018600 	.word	0x08018600
 8009c28:	2600      	movs	r6, #0
 8009c2a:	495d      	ldr	r1, [pc, #372]	; (8009da0 <pow+0x4a0>)
 8009c2c:	ed91 4b02 	vldr	d4, [r1, #8]
 8009c30:	ed91 3b00 	vldr	d3, [r1]
 8009c34:	eeb0 6b44 	vmov.f64	d6, d4
 8009c38:	eea7 6b03 	vfma.f64	d6, d7, d3
 8009c3c:	ee16 5a10 	vmov	r5, s12
 8009c40:	ee36 6b44 	vsub.f64	d6, d6, d4
 8009c44:	ed91 4b04 	vldr	d4, [r1, #16]
 8009c48:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8009c4c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8009c50:	eeb0 0b47 	vmov.f64	d0, d7
 8009c54:	ed91 7b06 	vldr	d7, [r1, #24]
 8009c58:	18dc      	adds	r4, r3, r3
 8009c5a:	f104 030f 	add.w	r3, r4, #15
 8009c5e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8009c62:	eea6 0b07 	vfma.f64	d0, d6, d7
 8009c66:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8009c6a:	ee35 0b00 	vadd.f64	d0, d5, d0
 8009c6e:	ee20 6b00 	vmul.f64	d6, d0, d0
 8009c72:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8009c76:	ed91 5b08 	vldr	d5, [r1, #32]
 8009c7a:	ee30 7b07 	vadd.f64	d7, d0, d7
 8009c7e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8009c82:	eea0 5b04 	vfma.f64	d5, d0, d4
 8009c86:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8009c8a:	eea6 7b05 	vfma.f64	d7, d6, d5
 8009c8e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8009c92:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8009c96:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8009c9a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8009c9e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8009ca2:	1940      	adds	r0, r0, r5
 8009ca4:	2700      	movs	r7, #0
 8009ca6:	eb17 020c 	adds.w	r2, r7, ip
 8009caa:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8009cae:	eea6 7b05 	vfma.f64	d7, d6, d5
 8009cb2:	2e00      	cmp	r6, #0
 8009cb4:	d15f      	bne.n	8009d76 <pow+0x476>
 8009cb6:	42bd      	cmp	r5, r7
 8009cb8:	db13      	blt.n	8009ce2 <pow+0x3e2>
 8009cba:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8009cbe:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	ec41 0b10 	vmov	d0, r0, r1
 8009cc8:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009ccc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009d88 <pow+0x488>
 8009cd0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009cd4:	b006      	add	sp, #24
 8009cd6:	ecbd 8b0a 	vpop	{d8-d12}
 8009cda:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cde:	f000 b95b 	b.w	8009f98 <__math_check_oflow>
 8009ce2:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8009ce6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8009cea:	4610      	mov	r0, r2
 8009cec:	ec41 0b15 	vmov	d5, r0, r1
 8009cf0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8009cf4:	ee27 6b05 	vmul.f64	d6, d7, d5
 8009cf8:	ee35 7b06 	vadd.f64	d7, d5, d6
 8009cfc:	eeb0 3bc7 	vabs.f64	d3, d7
 8009d00:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8009d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d08:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8009d90 <pow+0x490>
 8009d0c:	d52a      	bpl.n	8009d64 <pow+0x464>
 8009d0e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009d12:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d1a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8009d1e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8009d22:	bf48      	it	mi
 8009d24:	eeb0 4b43 	vmovmi.f64	d4, d3
 8009d28:	ee37 3b04 	vadd.f64	d3, d7, d4
 8009d2c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8009d30:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009d34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009d38:	ee37 7b03 	vadd.f64	d7, d7, d3
 8009d3c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8009d40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d48:	d104      	bne.n	8009d54 <pow+0x454>
 8009d4a:	4632      	mov	r2, r6
 8009d4c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8009d50:	ec43 2b17 	vmov	d7, r2, r3
 8009d54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009d58:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009d5c:	ee26 6b00 	vmul.f64	d6, d6, d0
 8009d60:	ed8d 6b04 	vstr	d6, [sp, #16]
 8009d64:	ee27 0b00 	vmul.f64	d0, d7, d0
 8009d68:	b006      	add	sp, #24
 8009d6a:	ecbd 8b0a 	vpop	{d8-d12}
 8009d6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d72:	f000 b908 	b.w	8009f86 <__math_check_uflow>
 8009d76:	ec43 2b10 	vmov	d0, r2, r3
 8009d7a:	eea7 0b00 	vfma.f64	d0, d7, d0
 8009d7e:	e628      	b.n	80099d2 <pow+0xd2>
 8009d80:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8009d98 <pow+0x498>
 8009d84:	e625      	b.n	80099d2 <pow+0xd2>
 8009d86:	bf00      	nop
 8009d88:	00000000 	.word	0x00000000
 8009d8c:	7f000000 	.word	0x7f000000
 8009d90:	00000000 	.word	0x00000000
 8009d94:	00100000 	.word	0x00100000
	...
 8009da0:	08019648 	.word	0x08019648
 8009da4:	00000000 	.word	0x00000000

08009da8 <ceil>:
 8009da8:	ee10 1a90 	vmov	r1, s1
 8009dac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009db0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009db4:	2b13      	cmp	r3, #19
 8009db6:	b530      	push	{r4, r5, lr}
 8009db8:	ee10 0a10 	vmov	r0, s0
 8009dbc:	ee10 5a10 	vmov	r5, s0
 8009dc0:	dc2f      	bgt.n	8009e22 <ceil+0x7a>
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	da13      	bge.n	8009dee <ceil+0x46>
 8009dc6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009e88 <ceil+0xe0>
 8009dca:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009dce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd6:	dd05      	ble.n	8009de4 <ceil+0x3c>
 8009dd8:	2900      	cmp	r1, #0
 8009dda:	db4c      	blt.n	8009e76 <ceil+0xce>
 8009ddc:	4301      	orrs	r1, r0
 8009dde:	d04e      	beq.n	8009e7e <ceil+0xd6>
 8009de0:	492b      	ldr	r1, [pc, #172]	; (8009e90 <ceil+0xe8>)
 8009de2:	2000      	movs	r0, #0
 8009de4:	460b      	mov	r3, r1
 8009de6:	4602      	mov	r2, r0
 8009de8:	ec43 2b10 	vmov	d0, r2, r3
 8009dec:	e020      	b.n	8009e30 <ceil+0x88>
 8009dee:	4a29      	ldr	r2, [pc, #164]	; (8009e94 <ceil+0xec>)
 8009df0:	411a      	asrs	r2, r3
 8009df2:	ea01 0402 	and.w	r4, r1, r2
 8009df6:	4304      	orrs	r4, r0
 8009df8:	d01a      	beq.n	8009e30 <ceil+0x88>
 8009dfa:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8009e88 <ceil+0xe0>
 8009dfe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009e02:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e0a:	ddeb      	ble.n	8009de4 <ceil+0x3c>
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	bfc2      	ittt	gt
 8009e10:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8009e14:	fa40 f303 	asrgt.w	r3, r0, r3
 8009e18:	18c9      	addgt	r1, r1, r3
 8009e1a:	ea21 0102 	bic.w	r1, r1, r2
 8009e1e:	2000      	movs	r0, #0
 8009e20:	e7e0      	b.n	8009de4 <ceil+0x3c>
 8009e22:	2b33      	cmp	r3, #51	; 0x33
 8009e24:	dd05      	ble.n	8009e32 <ceil+0x8a>
 8009e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e2a:	d101      	bne.n	8009e30 <ceil+0x88>
 8009e2c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009e30:	bd30      	pop	{r4, r5, pc}
 8009e32:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8009e36:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3a:	40e2      	lsrs	r2, r4
 8009e3c:	4202      	tst	r2, r0
 8009e3e:	d0f7      	beq.n	8009e30 <ceil+0x88>
 8009e40:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8009e88 <ceil+0xe0>
 8009e44:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009e48:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e50:	ddc8      	ble.n	8009de4 <ceil+0x3c>
 8009e52:	2900      	cmp	r1, #0
 8009e54:	dd02      	ble.n	8009e5c <ceil+0xb4>
 8009e56:	2b14      	cmp	r3, #20
 8009e58:	d103      	bne.n	8009e62 <ceil+0xba>
 8009e5a:	3101      	adds	r1, #1
 8009e5c:	ea20 0002 	bic.w	r0, r0, r2
 8009e60:	e7c0      	b.n	8009de4 <ceil+0x3c>
 8009e62:	2401      	movs	r4, #1
 8009e64:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009e68:	fa04 f303 	lsl.w	r3, r4, r3
 8009e6c:	4418      	add	r0, r3
 8009e6e:	42a8      	cmp	r0, r5
 8009e70:	bf38      	it	cc
 8009e72:	1909      	addcc	r1, r1, r4
 8009e74:	e7f2      	b.n	8009e5c <ceil+0xb4>
 8009e76:	2000      	movs	r0, #0
 8009e78:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009e7c:	e7b2      	b.n	8009de4 <ceil+0x3c>
 8009e7e:	4608      	mov	r0, r1
 8009e80:	e7b0      	b.n	8009de4 <ceil+0x3c>
 8009e82:	bf00      	nop
 8009e84:	f3af 8000 	nop.w
 8009e88:	8800759c 	.word	0x8800759c
 8009e8c:	7e37e43c 	.word	0x7e37e43c
 8009e90:	3ff00000 	.word	0x3ff00000
 8009e94:	000fffff 	.word	0x000fffff

08009e98 <sqrt>:
 8009e98:	b508      	push	{r3, lr}
 8009e9a:	ed2d 8b04 	vpush	{d8-d9}
 8009e9e:	eeb0 8b40 	vmov.f64	d8, d0
 8009ea2:	f000 f819 	bl	8009ed8 <__ieee754_sqrt>
 8009ea6:	eeb4 8b48 	vcmp.f64	d8, d8
 8009eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eae:	d60c      	bvs.n	8009eca <sqrt+0x32>
 8009eb0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8009ed0 <sqrt+0x38>
 8009eb4:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8009eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ebc:	d505      	bpl.n	8009eca <sqrt+0x32>
 8009ebe:	f000 f8a5 	bl	800a00c <__errno>
 8009ec2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8009ec6:	2321      	movs	r3, #33	; 0x21
 8009ec8:	6003      	str	r3, [r0, #0]
 8009eca:	ecbd 8b04 	vpop	{d8-d9}
 8009ece:	bd08      	pop	{r3, pc}
	...

08009ed8 <__ieee754_sqrt>:
 8009ed8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8009edc:	4770      	bx	lr

08009ede <with_errno>:
 8009ede:	b513      	push	{r0, r1, r4, lr}
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	ed8d 0b00 	vstr	d0, [sp]
 8009ee6:	f000 f891 	bl	800a00c <__errno>
 8009eea:	ed9d 0b00 	vldr	d0, [sp]
 8009eee:	6004      	str	r4, [r0, #0]
 8009ef0:	b002      	add	sp, #8
 8009ef2:	bd10      	pop	{r4, pc}

08009ef4 <xflow>:
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	b158      	cbz	r0, 8009f10 <xflow+0x1c>
 8009ef8:	eeb1 7b40 	vneg.f64	d7, d0
 8009efc:	ed8d 7b00 	vstr	d7, [sp]
 8009f00:	ed9d 7b00 	vldr	d7, [sp]
 8009f04:	2022      	movs	r0, #34	; 0x22
 8009f06:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009f0a:	b002      	add	sp, #8
 8009f0c:	f7ff bfe7 	b.w	8009ede <with_errno>
 8009f10:	eeb0 7b40 	vmov.f64	d7, d0
 8009f14:	e7f2      	b.n	8009efc <xflow+0x8>
	...

08009f18 <__math_uflow>:
 8009f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f20 <__math_uflow+0x8>
 8009f1c:	f7ff bfea 	b.w	8009ef4 <xflow>
 8009f20:	00000000 	.word	0x00000000
 8009f24:	10000000 	.word	0x10000000

08009f28 <__math_oflow>:
 8009f28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f30 <__math_oflow+0x8>
 8009f2c:	f7ff bfe2 	b.w	8009ef4 <xflow>
 8009f30:	00000000 	.word	0x00000000
 8009f34:	70000000 	.word	0x70000000

08009f38 <__math_divzero>:
 8009f38:	b082      	sub	sp, #8
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009f40:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8009f44:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8009f48:	ed8d 7b00 	vstr	d7, [sp]
 8009f4c:	ed9d 0b00 	vldr	d0, [sp]
 8009f50:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8009f60 <__math_divzero+0x28>
 8009f54:	2022      	movs	r0, #34	; 0x22
 8009f56:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8009f5a:	b002      	add	sp, #8
 8009f5c:	f7ff bfbf 	b.w	8009ede <with_errno>
	...

08009f68 <__math_invalid>:
 8009f68:	eeb0 7b40 	vmov.f64	d7, d0
 8009f6c:	eeb4 7b47 	vcmp.f64	d7, d7
 8009f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f74:	ee30 6b40 	vsub.f64	d6, d0, d0
 8009f78:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8009f7c:	d602      	bvs.n	8009f84 <__math_invalid+0x1c>
 8009f7e:	2021      	movs	r0, #33	; 0x21
 8009f80:	f7ff bfad 	b.w	8009ede <with_errno>
 8009f84:	4770      	bx	lr

08009f86 <__math_check_uflow>:
 8009f86:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f8e:	d102      	bne.n	8009f96 <__math_check_uflow+0x10>
 8009f90:	2022      	movs	r0, #34	; 0x22
 8009f92:	f7ff bfa4 	b.w	8009ede <with_errno>
 8009f96:	4770      	bx	lr

08009f98 <__math_check_oflow>:
 8009f98:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8009fb8 <__math_check_oflow+0x20>
 8009f9c:	eeb0 7bc0 	vabs.f64	d7, d0
 8009fa0:	eeb4 7b46 	vcmp.f64	d7, d6
 8009fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa8:	dd02      	ble.n	8009fb0 <__math_check_oflow+0x18>
 8009faa:	2022      	movs	r0, #34	; 0x22
 8009fac:	f7ff bf97 	b.w	8009ede <with_errno>
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	ffffffff 	.word	0xffffffff
 8009fbc:	7fefffff 	.word	0x7fefffff

08009fc0 <__assert_func>:
 8009fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fc2:	4614      	mov	r4, r2
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4b09      	ldr	r3, [pc, #36]	; (8009fec <__assert_func+0x2c>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4605      	mov	r5, r0
 8009fcc:	68d8      	ldr	r0, [r3, #12]
 8009fce:	b14c      	cbz	r4, 8009fe4 <__assert_func+0x24>
 8009fd0:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <__assert_func+0x30>)
 8009fd2:	9100      	str	r1, [sp, #0]
 8009fd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fd8:	4906      	ldr	r1, [pc, #24]	; (8009ff4 <__assert_func+0x34>)
 8009fda:	462b      	mov	r3, r5
 8009fdc:	f000 f9c8 	bl	800a370 <fiprintf>
 8009fe0:	f001 f864 	bl	800b0ac <abort>
 8009fe4:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <__assert_func+0x38>)
 8009fe6:	461c      	mov	r4, r3
 8009fe8:	e7f3      	b.n	8009fd2 <__assert_func+0x12>
 8009fea:	bf00      	nop
 8009fec:	240004fc 	.word	0x240004fc
 8009ff0:	08019eb8 	.word	0x08019eb8
 8009ff4:	08019ec5 	.word	0x08019ec5
 8009ff8:	08019ef3 	.word	0x08019ef3

08009ffc <calloc>:
 8009ffc:	4b02      	ldr	r3, [pc, #8]	; (800a008 <calloc+0xc>)
 8009ffe:	460a      	mov	r2, r1
 800a000:	4601      	mov	r1, r0
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	f000 bb20 	b.w	800a648 <_calloc_r>
 800a008:	240004fc 	.word	0x240004fc

0800a00c <__errno>:
 800a00c:	4b01      	ldr	r3, [pc, #4]	; (800a014 <__errno+0x8>)
 800a00e:	6818      	ldr	r0, [r3, #0]
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	240004fc 	.word	0x240004fc

0800a018 <exit>:
 800a018:	b508      	push	{r3, lr}
 800a01a:	4b07      	ldr	r3, [pc, #28]	; (800a038 <exit+0x20>)
 800a01c:	4604      	mov	r4, r0
 800a01e:	b113      	cbz	r3, 800a026 <exit+0xe>
 800a020:	2100      	movs	r1, #0
 800a022:	f3af 8000 	nop.w
 800a026:	4b05      	ldr	r3, [pc, #20]	; (800a03c <exit+0x24>)
 800a028:	6818      	ldr	r0, [r3, #0]
 800a02a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a02c:	b103      	cbz	r3, 800a030 <exit+0x18>
 800a02e:	4798      	blx	r3
 800a030:	4620      	mov	r0, r4
 800a032:	f7f9 fefb 	bl	8003e2c <_exit>
 800a036:	bf00      	nop
 800a038:	00000000 	.word	0x00000000
 800a03c:	08019f54 	.word	0x08019f54

0800a040 <__sflush_r>:
 800a040:	898a      	ldrh	r2, [r1, #12]
 800a042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a046:	4605      	mov	r5, r0
 800a048:	0710      	lsls	r0, r2, #28
 800a04a:	460c      	mov	r4, r1
 800a04c:	d458      	bmi.n	800a100 <__sflush_r+0xc0>
 800a04e:	684b      	ldr	r3, [r1, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	dc05      	bgt.n	800a060 <__sflush_r+0x20>
 800a054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a056:	2b00      	cmp	r3, #0
 800a058:	dc02      	bgt.n	800a060 <__sflush_r+0x20>
 800a05a:	2000      	movs	r0, #0
 800a05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a062:	2e00      	cmp	r6, #0
 800a064:	d0f9      	beq.n	800a05a <__sflush_r+0x1a>
 800a066:	2300      	movs	r3, #0
 800a068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a06c:	682f      	ldr	r7, [r5, #0]
 800a06e:	602b      	str	r3, [r5, #0]
 800a070:	d032      	beq.n	800a0d8 <__sflush_r+0x98>
 800a072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	075a      	lsls	r2, r3, #29
 800a078:	d505      	bpl.n	800a086 <__sflush_r+0x46>
 800a07a:	6863      	ldr	r3, [r4, #4]
 800a07c:	1ac0      	subs	r0, r0, r3
 800a07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a080:	b10b      	cbz	r3, 800a086 <__sflush_r+0x46>
 800a082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a084:	1ac0      	subs	r0, r0, r3
 800a086:	2300      	movs	r3, #0
 800a088:	4602      	mov	r2, r0
 800a08a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a08c:	6a21      	ldr	r1, [r4, #32]
 800a08e:	4628      	mov	r0, r5
 800a090:	47b0      	blx	r6
 800a092:	1c43      	adds	r3, r0, #1
 800a094:	89a3      	ldrh	r3, [r4, #12]
 800a096:	d106      	bne.n	800a0a6 <__sflush_r+0x66>
 800a098:	6829      	ldr	r1, [r5, #0]
 800a09a:	291d      	cmp	r1, #29
 800a09c:	d82c      	bhi.n	800a0f8 <__sflush_r+0xb8>
 800a09e:	4a2a      	ldr	r2, [pc, #168]	; (800a148 <__sflush_r+0x108>)
 800a0a0:	40ca      	lsrs	r2, r1
 800a0a2:	07d6      	lsls	r6, r2, #31
 800a0a4:	d528      	bpl.n	800a0f8 <__sflush_r+0xb8>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	6062      	str	r2, [r4, #4]
 800a0aa:	04d9      	lsls	r1, r3, #19
 800a0ac:	6922      	ldr	r2, [r4, #16]
 800a0ae:	6022      	str	r2, [r4, #0]
 800a0b0:	d504      	bpl.n	800a0bc <__sflush_r+0x7c>
 800a0b2:	1c42      	adds	r2, r0, #1
 800a0b4:	d101      	bne.n	800a0ba <__sflush_r+0x7a>
 800a0b6:	682b      	ldr	r3, [r5, #0]
 800a0b8:	b903      	cbnz	r3, 800a0bc <__sflush_r+0x7c>
 800a0ba:	6560      	str	r0, [r4, #84]	; 0x54
 800a0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0be:	602f      	str	r7, [r5, #0]
 800a0c0:	2900      	cmp	r1, #0
 800a0c2:	d0ca      	beq.n	800a05a <__sflush_r+0x1a>
 800a0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0c8:	4299      	cmp	r1, r3
 800a0ca:	d002      	beq.n	800a0d2 <__sflush_r+0x92>
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	f000 fad1 	bl	800a674 <_free_r>
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800a0d6:	e7c1      	b.n	800a05c <__sflush_r+0x1c>
 800a0d8:	6a21      	ldr	r1, [r4, #32]
 800a0da:	2301      	movs	r3, #1
 800a0dc:	4628      	mov	r0, r5
 800a0de:	47b0      	blx	r6
 800a0e0:	1c41      	adds	r1, r0, #1
 800a0e2:	d1c7      	bne.n	800a074 <__sflush_r+0x34>
 800a0e4:	682b      	ldr	r3, [r5, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0c4      	beq.n	800a074 <__sflush_r+0x34>
 800a0ea:	2b1d      	cmp	r3, #29
 800a0ec:	d001      	beq.n	800a0f2 <__sflush_r+0xb2>
 800a0ee:	2b16      	cmp	r3, #22
 800a0f0:	d101      	bne.n	800a0f6 <__sflush_r+0xb6>
 800a0f2:	602f      	str	r7, [r5, #0]
 800a0f4:	e7b1      	b.n	800a05a <__sflush_r+0x1a>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0fc:	81a3      	strh	r3, [r4, #12]
 800a0fe:	e7ad      	b.n	800a05c <__sflush_r+0x1c>
 800a100:	690f      	ldr	r7, [r1, #16]
 800a102:	2f00      	cmp	r7, #0
 800a104:	d0a9      	beq.n	800a05a <__sflush_r+0x1a>
 800a106:	0793      	lsls	r3, r2, #30
 800a108:	680e      	ldr	r6, [r1, #0]
 800a10a:	bf08      	it	eq
 800a10c:	694b      	ldreq	r3, [r1, #20]
 800a10e:	600f      	str	r7, [r1, #0]
 800a110:	bf18      	it	ne
 800a112:	2300      	movne	r3, #0
 800a114:	eba6 0807 	sub.w	r8, r6, r7
 800a118:	608b      	str	r3, [r1, #8]
 800a11a:	f1b8 0f00 	cmp.w	r8, #0
 800a11e:	dd9c      	ble.n	800a05a <__sflush_r+0x1a>
 800a120:	6a21      	ldr	r1, [r4, #32]
 800a122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a124:	4643      	mov	r3, r8
 800a126:	463a      	mov	r2, r7
 800a128:	4628      	mov	r0, r5
 800a12a:	47b0      	blx	r6
 800a12c:	2800      	cmp	r0, #0
 800a12e:	dc06      	bgt.n	800a13e <__sflush_r+0xfe>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a136:	81a3      	strh	r3, [r4, #12]
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	e78e      	b.n	800a05c <__sflush_r+0x1c>
 800a13e:	4407      	add	r7, r0
 800a140:	eba8 0800 	sub.w	r8, r8, r0
 800a144:	e7e9      	b.n	800a11a <__sflush_r+0xda>
 800a146:	bf00      	nop
 800a148:	20400001 	.word	0x20400001

0800a14c <_fflush_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	690b      	ldr	r3, [r1, #16]
 800a150:	4605      	mov	r5, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b913      	cbnz	r3, 800a15c <_fflush_r+0x10>
 800a156:	2500      	movs	r5, #0
 800a158:	4628      	mov	r0, r5
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	b118      	cbz	r0, 800a166 <_fflush_r+0x1a>
 800a15e:	6983      	ldr	r3, [r0, #24]
 800a160:	b90b      	cbnz	r3, 800a166 <_fflush_r+0x1a>
 800a162:	f000 f887 	bl	800a274 <__sinit>
 800a166:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <_fflush_r+0x6c>)
 800a168:	429c      	cmp	r4, r3
 800a16a:	d11b      	bne.n	800a1a4 <_fflush_r+0x58>
 800a16c:	686c      	ldr	r4, [r5, #4]
 800a16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0ef      	beq.n	800a156 <_fflush_r+0xa>
 800a176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a178:	07d0      	lsls	r0, r2, #31
 800a17a:	d404      	bmi.n	800a186 <_fflush_r+0x3a>
 800a17c:	0599      	lsls	r1, r3, #22
 800a17e:	d402      	bmi.n	800a186 <_fflush_r+0x3a>
 800a180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a182:	f000 f9ba 	bl	800a4fa <__retarget_lock_acquire_recursive>
 800a186:	4628      	mov	r0, r5
 800a188:	4621      	mov	r1, r4
 800a18a:	f7ff ff59 	bl	800a040 <__sflush_r>
 800a18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a190:	07da      	lsls	r2, r3, #31
 800a192:	4605      	mov	r5, r0
 800a194:	d4e0      	bmi.n	800a158 <_fflush_r+0xc>
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	059b      	lsls	r3, r3, #22
 800a19a:	d4dd      	bmi.n	800a158 <_fflush_r+0xc>
 800a19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a19e:	f000 f9ad 	bl	800a4fc <__retarget_lock_release_recursive>
 800a1a2:	e7d9      	b.n	800a158 <_fflush_r+0xc>
 800a1a4:	4b05      	ldr	r3, [pc, #20]	; (800a1bc <_fflush_r+0x70>)
 800a1a6:	429c      	cmp	r4, r3
 800a1a8:	d101      	bne.n	800a1ae <_fflush_r+0x62>
 800a1aa:	68ac      	ldr	r4, [r5, #8]
 800a1ac:	e7df      	b.n	800a16e <_fflush_r+0x22>
 800a1ae:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <_fflush_r+0x74>)
 800a1b0:	429c      	cmp	r4, r3
 800a1b2:	bf08      	it	eq
 800a1b4:	68ec      	ldreq	r4, [r5, #12]
 800a1b6:	e7da      	b.n	800a16e <_fflush_r+0x22>
 800a1b8:	08019f14 	.word	0x08019f14
 800a1bc:	08019f34 	.word	0x08019f34
 800a1c0:	08019ef4 	.word	0x08019ef4

0800a1c4 <std>:
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	4604      	mov	r4, r0
 800a1ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1d2:	6083      	str	r3, [r0, #8]
 800a1d4:	8181      	strh	r1, [r0, #12]
 800a1d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a1d8:	81c2      	strh	r2, [r0, #14]
 800a1da:	6183      	str	r3, [r0, #24]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	2208      	movs	r2, #8
 800a1e0:	305c      	adds	r0, #92	; 0x5c
 800a1e2:	f000 fa29 	bl	800a638 <memset>
 800a1e6:	4b05      	ldr	r3, [pc, #20]	; (800a1fc <std+0x38>)
 800a1e8:	6263      	str	r3, [r4, #36]	; 0x24
 800a1ea:	4b05      	ldr	r3, [pc, #20]	; (800a200 <std+0x3c>)
 800a1ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1ee:	4b05      	ldr	r3, [pc, #20]	; (800a204 <std+0x40>)
 800a1f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <std+0x44>)
 800a1f4:	6224      	str	r4, [r4, #32]
 800a1f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	bf00      	nop
 800a1fc:	0800ae81 	.word	0x0800ae81
 800a200:	0800aea3 	.word	0x0800aea3
 800a204:	0800aedb 	.word	0x0800aedb
 800a208:	0800aeff 	.word	0x0800aeff

0800a20c <_cleanup_r>:
 800a20c:	4901      	ldr	r1, [pc, #4]	; (800a214 <_cleanup_r+0x8>)
 800a20e:	f000 b8c1 	b.w	800a394 <_fwalk_reent>
 800a212:	bf00      	nop
 800a214:	0800a14d 	.word	0x0800a14d

0800a218 <__sfmoreglue>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	2268      	movs	r2, #104	; 0x68
 800a21c:	1e4d      	subs	r5, r1, #1
 800a21e:	4355      	muls	r5, r2
 800a220:	460e      	mov	r6, r1
 800a222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a226:	f000 fa91 	bl	800a74c <_malloc_r>
 800a22a:	4604      	mov	r4, r0
 800a22c:	b140      	cbz	r0, 800a240 <__sfmoreglue+0x28>
 800a22e:	2100      	movs	r1, #0
 800a230:	e9c0 1600 	strd	r1, r6, [r0]
 800a234:	300c      	adds	r0, #12
 800a236:	60a0      	str	r0, [r4, #8]
 800a238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a23c:	f000 f9fc 	bl	800a638 <memset>
 800a240:	4620      	mov	r0, r4
 800a242:	bd70      	pop	{r4, r5, r6, pc}

0800a244 <__sfp_lock_acquire>:
 800a244:	4801      	ldr	r0, [pc, #4]	; (800a24c <__sfp_lock_acquire+0x8>)
 800a246:	f000 b958 	b.w	800a4fa <__retarget_lock_acquire_recursive>
 800a24a:	bf00      	nop
 800a24c:	24000cd9 	.word	0x24000cd9

0800a250 <__sfp_lock_release>:
 800a250:	4801      	ldr	r0, [pc, #4]	; (800a258 <__sfp_lock_release+0x8>)
 800a252:	f000 b953 	b.w	800a4fc <__retarget_lock_release_recursive>
 800a256:	bf00      	nop
 800a258:	24000cd9 	.word	0x24000cd9

0800a25c <__sinit_lock_acquire>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__sinit_lock_acquire+0x8>)
 800a25e:	f000 b94c 	b.w	800a4fa <__retarget_lock_acquire_recursive>
 800a262:	bf00      	nop
 800a264:	24000cda 	.word	0x24000cda

0800a268 <__sinit_lock_release>:
 800a268:	4801      	ldr	r0, [pc, #4]	; (800a270 <__sinit_lock_release+0x8>)
 800a26a:	f000 b947 	b.w	800a4fc <__retarget_lock_release_recursive>
 800a26e:	bf00      	nop
 800a270:	24000cda 	.word	0x24000cda

0800a274 <__sinit>:
 800a274:	b510      	push	{r4, lr}
 800a276:	4604      	mov	r4, r0
 800a278:	f7ff fff0 	bl	800a25c <__sinit_lock_acquire>
 800a27c:	69a3      	ldr	r3, [r4, #24]
 800a27e:	b11b      	cbz	r3, 800a288 <__sinit+0x14>
 800a280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a284:	f7ff bff0 	b.w	800a268 <__sinit_lock_release>
 800a288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a28c:	6523      	str	r3, [r4, #80]	; 0x50
 800a28e:	4b13      	ldr	r3, [pc, #76]	; (800a2dc <__sinit+0x68>)
 800a290:	4a13      	ldr	r2, [pc, #76]	; (800a2e0 <__sinit+0x6c>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	62a2      	str	r2, [r4, #40]	; 0x28
 800a296:	42a3      	cmp	r3, r4
 800a298:	bf04      	itt	eq
 800a29a:	2301      	moveq	r3, #1
 800a29c:	61a3      	streq	r3, [r4, #24]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 f820 	bl	800a2e4 <__sfp>
 800a2a4:	6060      	str	r0, [r4, #4]
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 f81c 	bl	800a2e4 <__sfp>
 800a2ac:	60a0      	str	r0, [r4, #8]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f000 f818 	bl	800a2e4 <__sfp>
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	60e0      	str	r0, [r4, #12]
 800a2b8:	2104      	movs	r1, #4
 800a2ba:	6860      	ldr	r0, [r4, #4]
 800a2bc:	f7ff ff82 	bl	800a1c4 <std>
 800a2c0:	68a0      	ldr	r0, [r4, #8]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	2109      	movs	r1, #9
 800a2c6:	f7ff ff7d 	bl	800a1c4 <std>
 800a2ca:	68e0      	ldr	r0, [r4, #12]
 800a2cc:	2202      	movs	r2, #2
 800a2ce:	2112      	movs	r1, #18
 800a2d0:	f7ff ff78 	bl	800a1c4 <std>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	61a3      	str	r3, [r4, #24]
 800a2d8:	e7d2      	b.n	800a280 <__sinit+0xc>
 800a2da:	bf00      	nop
 800a2dc:	08019f54 	.word	0x08019f54
 800a2e0:	0800a20d 	.word	0x0800a20d

0800a2e4 <__sfp>:
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e6:	4607      	mov	r7, r0
 800a2e8:	f7ff ffac 	bl	800a244 <__sfp_lock_acquire>
 800a2ec:	4b1e      	ldr	r3, [pc, #120]	; (800a368 <__sfp+0x84>)
 800a2ee:	681e      	ldr	r6, [r3, #0]
 800a2f0:	69b3      	ldr	r3, [r6, #24]
 800a2f2:	b913      	cbnz	r3, 800a2fa <__sfp+0x16>
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7ff ffbd 	bl	800a274 <__sinit>
 800a2fa:	3648      	adds	r6, #72	; 0x48
 800a2fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a300:	3b01      	subs	r3, #1
 800a302:	d503      	bpl.n	800a30c <__sfp+0x28>
 800a304:	6833      	ldr	r3, [r6, #0]
 800a306:	b30b      	cbz	r3, 800a34c <__sfp+0x68>
 800a308:	6836      	ldr	r6, [r6, #0]
 800a30a:	e7f7      	b.n	800a2fc <__sfp+0x18>
 800a30c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a310:	b9d5      	cbnz	r5, 800a348 <__sfp+0x64>
 800a312:	4b16      	ldr	r3, [pc, #88]	; (800a36c <__sfp+0x88>)
 800a314:	60e3      	str	r3, [r4, #12]
 800a316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a31a:	6665      	str	r5, [r4, #100]	; 0x64
 800a31c:	f000 f8ec 	bl	800a4f8 <__retarget_lock_init_recursive>
 800a320:	f7ff ff96 	bl	800a250 <__sfp_lock_release>
 800a324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a32c:	6025      	str	r5, [r4, #0]
 800a32e:	61a5      	str	r5, [r4, #24]
 800a330:	2208      	movs	r2, #8
 800a332:	4629      	mov	r1, r5
 800a334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a338:	f000 f97e 	bl	800a638 <memset>
 800a33c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a344:	4620      	mov	r0, r4
 800a346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a348:	3468      	adds	r4, #104	; 0x68
 800a34a:	e7d9      	b.n	800a300 <__sfp+0x1c>
 800a34c:	2104      	movs	r1, #4
 800a34e:	4638      	mov	r0, r7
 800a350:	f7ff ff62 	bl	800a218 <__sfmoreglue>
 800a354:	4604      	mov	r4, r0
 800a356:	6030      	str	r0, [r6, #0]
 800a358:	2800      	cmp	r0, #0
 800a35a:	d1d5      	bne.n	800a308 <__sfp+0x24>
 800a35c:	f7ff ff78 	bl	800a250 <__sfp_lock_release>
 800a360:	230c      	movs	r3, #12
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	e7ee      	b.n	800a344 <__sfp+0x60>
 800a366:	bf00      	nop
 800a368:	08019f54 	.word	0x08019f54
 800a36c:	ffff0001 	.word	0xffff0001

0800a370 <fiprintf>:
 800a370:	b40e      	push	{r1, r2, r3}
 800a372:	b503      	push	{r0, r1, lr}
 800a374:	4601      	mov	r1, r0
 800a376:	ab03      	add	r3, sp, #12
 800a378:	4805      	ldr	r0, [pc, #20]	; (800a390 <fiprintf+0x20>)
 800a37a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a37e:	6800      	ldr	r0, [r0, #0]
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	f000 fa81 	bl	800a888 <_vfiprintf_r>
 800a386:	b002      	add	sp, #8
 800a388:	f85d eb04 	ldr.w	lr, [sp], #4
 800a38c:	b003      	add	sp, #12
 800a38e:	4770      	bx	lr
 800a390:	240004fc 	.word	0x240004fc

0800a394 <_fwalk_reent>:
 800a394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a398:	4606      	mov	r6, r0
 800a39a:	4688      	mov	r8, r1
 800a39c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3a0:	2700      	movs	r7, #0
 800a3a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3a6:	f1b9 0901 	subs.w	r9, r9, #1
 800a3aa:	d505      	bpl.n	800a3b8 <_fwalk_reent+0x24>
 800a3ac:	6824      	ldr	r4, [r4, #0]
 800a3ae:	2c00      	cmp	r4, #0
 800a3b0:	d1f7      	bne.n	800a3a2 <_fwalk_reent+0xe>
 800a3b2:	4638      	mov	r0, r7
 800a3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b8:	89ab      	ldrh	r3, [r5, #12]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d907      	bls.n	800a3ce <_fwalk_reent+0x3a>
 800a3be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	d003      	beq.n	800a3ce <_fwalk_reent+0x3a>
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	47c0      	blx	r8
 800a3cc:	4307      	orrs	r7, r0
 800a3ce:	3568      	adds	r5, #104	; 0x68
 800a3d0:	e7e9      	b.n	800a3a6 <_fwalk_reent+0x12>
	...

0800a3d4 <_fwrite_r>:
 800a3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d8:	9c08      	ldr	r4, [sp, #32]
 800a3da:	468a      	mov	sl, r1
 800a3dc:	4690      	mov	r8, r2
 800a3de:	fb02 f903 	mul.w	r9, r2, r3
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	b118      	cbz	r0, 800a3ee <_fwrite_r+0x1a>
 800a3e6:	6983      	ldr	r3, [r0, #24]
 800a3e8:	b90b      	cbnz	r3, 800a3ee <_fwrite_r+0x1a>
 800a3ea:	f7ff ff43 	bl	800a274 <__sinit>
 800a3ee:	4b26      	ldr	r3, [pc, #152]	; (800a488 <_fwrite_r+0xb4>)
 800a3f0:	429c      	cmp	r4, r3
 800a3f2:	d123      	bne.n	800a43c <_fwrite_r+0x68>
 800a3f4:	686c      	ldr	r4, [r5, #4]
 800a3f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3f8:	07de      	lsls	r6, r3, #31
 800a3fa:	d405      	bmi.n	800a408 <_fwrite_r+0x34>
 800a3fc:	89a3      	ldrh	r3, [r4, #12]
 800a3fe:	0598      	lsls	r0, r3, #22
 800a400:	d402      	bmi.n	800a408 <_fwrite_r+0x34>
 800a402:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a404:	f000 f879 	bl	800a4fa <__retarget_lock_acquire_recursive>
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	0719      	lsls	r1, r3, #28
 800a40c:	d520      	bpl.n	800a450 <_fwrite_r+0x7c>
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	b1f3      	cbz	r3, 800a450 <_fwrite_r+0x7c>
 800a412:	2600      	movs	r6, #0
 800a414:	454e      	cmp	r6, r9
 800a416:	d029      	beq.n	800a46c <_fwrite_r+0x98>
 800a418:	68a7      	ldr	r7, [r4, #8]
 800a41a:	f81a 1006 	ldrb.w	r1, [sl, r6]
 800a41e:	3f01      	subs	r7, #1
 800a420:	2f00      	cmp	r7, #0
 800a422:	60a7      	str	r7, [r4, #8]
 800a424:	da04      	bge.n	800a430 <_fwrite_r+0x5c>
 800a426:	69a3      	ldr	r3, [r4, #24]
 800a428:	429f      	cmp	r7, r3
 800a42a:	db19      	blt.n	800a460 <_fwrite_r+0x8c>
 800a42c:	290a      	cmp	r1, #10
 800a42e:	d017      	beq.n	800a460 <_fwrite_r+0x8c>
 800a430:	6823      	ldr	r3, [r4, #0]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	6022      	str	r2, [r4, #0]
 800a436:	7019      	strb	r1, [r3, #0]
 800a438:	3601      	adds	r6, #1
 800a43a:	e7eb      	b.n	800a414 <_fwrite_r+0x40>
 800a43c:	4b13      	ldr	r3, [pc, #76]	; (800a48c <_fwrite_r+0xb8>)
 800a43e:	429c      	cmp	r4, r3
 800a440:	d101      	bne.n	800a446 <_fwrite_r+0x72>
 800a442:	68ac      	ldr	r4, [r5, #8]
 800a444:	e7d7      	b.n	800a3f6 <_fwrite_r+0x22>
 800a446:	4b12      	ldr	r3, [pc, #72]	; (800a490 <_fwrite_r+0xbc>)
 800a448:	429c      	cmp	r4, r3
 800a44a:	bf08      	it	eq
 800a44c:	68ec      	ldreq	r4, [r5, #12]
 800a44e:	e7d2      	b.n	800a3f6 <_fwrite_r+0x22>
 800a450:	4621      	mov	r1, r4
 800a452:	4628      	mov	r0, r5
 800a454:	f000 fdbc 	bl	800afd0 <__swsetup_r>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d0da      	beq.n	800a412 <_fwrite_r+0x3e>
 800a45c:	2600      	movs	r6, #0
 800a45e:	e005      	b.n	800a46c <_fwrite_r+0x98>
 800a460:	4622      	mov	r2, r4
 800a462:	4628      	mov	r0, r5
 800a464:	f000 fd50 	bl	800af08 <__swbuf_r>
 800a468:	3001      	adds	r0, #1
 800a46a:	d1e5      	bne.n	800a438 <_fwrite_r+0x64>
 800a46c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a46e:	07da      	lsls	r2, r3, #31
 800a470:	d405      	bmi.n	800a47e <_fwrite_r+0xaa>
 800a472:	89a3      	ldrh	r3, [r4, #12]
 800a474:	059b      	lsls	r3, r3, #22
 800a476:	d402      	bmi.n	800a47e <_fwrite_r+0xaa>
 800a478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a47a:	f000 f83f 	bl	800a4fc <__retarget_lock_release_recursive>
 800a47e:	fbb6 f0f8 	udiv	r0, r6, r8
 800a482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a486:	bf00      	nop
 800a488:	08019f14 	.word	0x08019f14
 800a48c:	08019f34 	.word	0x08019f34
 800a490:	08019ef4 	.word	0x08019ef4

0800a494 <fwrite>:
 800a494:	b507      	push	{r0, r1, r2, lr}
 800a496:	9300      	str	r3, [sp, #0]
 800a498:	4613      	mov	r3, r2
 800a49a:	460a      	mov	r2, r1
 800a49c:	4601      	mov	r1, r0
 800a49e:	4803      	ldr	r0, [pc, #12]	; (800a4ac <fwrite+0x18>)
 800a4a0:	6800      	ldr	r0, [r0, #0]
 800a4a2:	f7ff ff97 	bl	800a3d4 <_fwrite_r>
 800a4a6:	b003      	add	sp, #12
 800a4a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4ac:	240004fc 	.word	0x240004fc

0800a4b0 <__libc_init_array>:
 800a4b0:	b570      	push	{r4, r5, r6, lr}
 800a4b2:	4d0d      	ldr	r5, [pc, #52]	; (800a4e8 <__libc_init_array+0x38>)
 800a4b4:	4c0d      	ldr	r4, [pc, #52]	; (800a4ec <__libc_init_array+0x3c>)
 800a4b6:	1b64      	subs	r4, r4, r5
 800a4b8:	10a4      	asrs	r4, r4, #2
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	42a6      	cmp	r6, r4
 800a4be:	d109      	bne.n	800a4d4 <__libc_init_array+0x24>
 800a4c0:	4d0b      	ldr	r5, [pc, #44]	; (800a4f0 <__libc_init_array+0x40>)
 800a4c2:	4c0c      	ldr	r4, [pc, #48]	; (800a4f4 <__libc_init_array+0x44>)
 800a4c4:	f001 f832 	bl	800b52c <_init>
 800a4c8:	1b64      	subs	r4, r4, r5
 800a4ca:	10a4      	asrs	r4, r4, #2
 800a4cc:	2600      	movs	r6, #0
 800a4ce:	42a6      	cmp	r6, r4
 800a4d0:	d105      	bne.n	800a4de <__libc_init_array+0x2e>
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d8:	4798      	blx	r3
 800a4da:	3601      	adds	r6, #1
 800a4dc:	e7ee      	b.n	800a4bc <__libc_init_array+0xc>
 800a4de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4e2:	4798      	blx	r3
 800a4e4:	3601      	adds	r6, #1
 800a4e6:	e7f2      	b.n	800a4ce <__libc_init_array+0x1e>
 800a4e8:	08019f94 	.word	0x08019f94
 800a4ec:	08019f94 	.word	0x08019f94
 800a4f0:	08019f94 	.word	0x08019f94
 800a4f4:	08019f98 	.word	0x08019f98

0800a4f8 <__retarget_lock_init_recursive>:
 800a4f8:	4770      	bx	lr

0800a4fa <__retarget_lock_acquire_recursive>:
 800a4fa:	4770      	bx	lr

0800a4fc <__retarget_lock_release_recursive>:
 800a4fc:	4770      	bx	lr

0800a4fe <__swhatbuf_r>:
 800a4fe:	b570      	push	{r4, r5, r6, lr}
 800a500:	460e      	mov	r6, r1
 800a502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a506:	2900      	cmp	r1, #0
 800a508:	b096      	sub	sp, #88	; 0x58
 800a50a:	4614      	mov	r4, r2
 800a50c:	461d      	mov	r5, r3
 800a50e:	da08      	bge.n	800a522 <__swhatbuf_r+0x24>
 800a510:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	602a      	str	r2, [r5, #0]
 800a518:	061a      	lsls	r2, r3, #24
 800a51a:	d410      	bmi.n	800a53e <__swhatbuf_r+0x40>
 800a51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a520:	e00e      	b.n	800a540 <__swhatbuf_r+0x42>
 800a522:	466a      	mov	r2, sp
 800a524:	f000 fdda 	bl	800b0dc <_fstat_r>
 800a528:	2800      	cmp	r0, #0
 800a52a:	dbf1      	blt.n	800a510 <__swhatbuf_r+0x12>
 800a52c:	9a01      	ldr	r2, [sp, #4]
 800a52e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a532:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a536:	425a      	negs	r2, r3
 800a538:	415a      	adcs	r2, r3
 800a53a:	602a      	str	r2, [r5, #0]
 800a53c:	e7ee      	b.n	800a51c <__swhatbuf_r+0x1e>
 800a53e:	2340      	movs	r3, #64	; 0x40
 800a540:	2000      	movs	r0, #0
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	b016      	add	sp, #88	; 0x58
 800a546:	bd70      	pop	{r4, r5, r6, pc}

0800a548 <__smakebuf_r>:
 800a548:	898b      	ldrh	r3, [r1, #12]
 800a54a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a54c:	079d      	lsls	r5, r3, #30
 800a54e:	4606      	mov	r6, r0
 800a550:	460c      	mov	r4, r1
 800a552:	d507      	bpl.n	800a564 <__smakebuf_r+0x1c>
 800a554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a558:	6023      	str	r3, [r4, #0]
 800a55a:	6123      	str	r3, [r4, #16]
 800a55c:	2301      	movs	r3, #1
 800a55e:	6163      	str	r3, [r4, #20]
 800a560:	b002      	add	sp, #8
 800a562:	bd70      	pop	{r4, r5, r6, pc}
 800a564:	ab01      	add	r3, sp, #4
 800a566:	466a      	mov	r2, sp
 800a568:	f7ff ffc9 	bl	800a4fe <__swhatbuf_r>
 800a56c:	9900      	ldr	r1, [sp, #0]
 800a56e:	4605      	mov	r5, r0
 800a570:	4630      	mov	r0, r6
 800a572:	f000 f8eb 	bl	800a74c <_malloc_r>
 800a576:	b948      	cbnz	r0, 800a58c <__smakebuf_r+0x44>
 800a578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a57c:	059a      	lsls	r2, r3, #22
 800a57e:	d4ef      	bmi.n	800a560 <__smakebuf_r+0x18>
 800a580:	f023 0303 	bic.w	r3, r3, #3
 800a584:	f043 0302 	orr.w	r3, r3, #2
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	e7e3      	b.n	800a554 <__smakebuf_r+0xc>
 800a58c:	4b0d      	ldr	r3, [pc, #52]	; (800a5c4 <__smakebuf_r+0x7c>)
 800a58e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	6020      	str	r0, [r4, #0]
 800a594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a598:	81a3      	strh	r3, [r4, #12]
 800a59a:	9b00      	ldr	r3, [sp, #0]
 800a59c:	6163      	str	r3, [r4, #20]
 800a59e:	9b01      	ldr	r3, [sp, #4]
 800a5a0:	6120      	str	r0, [r4, #16]
 800a5a2:	b15b      	cbz	r3, 800a5bc <__smakebuf_r+0x74>
 800a5a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	f000 fda9 	bl	800b100 <_isatty_r>
 800a5ae:	b128      	cbz	r0, 800a5bc <__smakebuf_r+0x74>
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	f023 0303 	bic.w	r3, r3, #3
 800a5b6:	f043 0301 	orr.w	r3, r3, #1
 800a5ba:	81a3      	strh	r3, [r4, #12]
 800a5bc:	89a0      	ldrh	r0, [r4, #12]
 800a5be:	4305      	orrs	r5, r0
 800a5c0:	81a5      	strh	r5, [r4, #12]
 800a5c2:	e7cd      	b.n	800a560 <__smakebuf_r+0x18>
 800a5c4:	0800a20d 	.word	0x0800a20d

0800a5c8 <malloc>:
 800a5c8:	4b02      	ldr	r3, [pc, #8]	; (800a5d4 <malloc+0xc>)
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	f000 b8bd 	b.w	800a74c <_malloc_r>
 800a5d2:	bf00      	nop
 800a5d4:	240004fc 	.word	0x240004fc

0800a5d8 <free>:
 800a5d8:	4b02      	ldr	r3, [pc, #8]	; (800a5e4 <free+0xc>)
 800a5da:	4601      	mov	r1, r0
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	f000 b849 	b.w	800a674 <_free_r>
 800a5e2:	bf00      	nop
 800a5e4:	240004fc 	.word	0x240004fc

0800a5e8 <memcpy>:
 800a5e8:	440a      	add	r2, r1
 800a5ea:	4291      	cmp	r1, r2
 800a5ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5f0:	d100      	bne.n	800a5f4 <memcpy+0xc>
 800a5f2:	4770      	bx	lr
 800a5f4:	b510      	push	{r4, lr}
 800a5f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5fe:	4291      	cmp	r1, r2
 800a600:	d1f9      	bne.n	800a5f6 <memcpy+0xe>
 800a602:	bd10      	pop	{r4, pc}

0800a604 <memmove>:
 800a604:	4288      	cmp	r0, r1
 800a606:	b510      	push	{r4, lr}
 800a608:	eb01 0402 	add.w	r4, r1, r2
 800a60c:	d902      	bls.n	800a614 <memmove+0x10>
 800a60e:	4284      	cmp	r4, r0
 800a610:	4623      	mov	r3, r4
 800a612:	d807      	bhi.n	800a624 <memmove+0x20>
 800a614:	1e43      	subs	r3, r0, #1
 800a616:	42a1      	cmp	r1, r4
 800a618:	d008      	beq.n	800a62c <memmove+0x28>
 800a61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a622:	e7f8      	b.n	800a616 <memmove+0x12>
 800a624:	4402      	add	r2, r0
 800a626:	4601      	mov	r1, r0
 800a628:	428a      	cmp	r2, r1
 800a62a:	d100      	bne.n	800a62e <memmove+0x2a>
 800a62c:	bd10      	pop	{r4, pc}
 800a62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a636:	e7f7      	b.n	800a628 <memmove+0x24>

0800a638 <memset>:
 800a638:	4402      	add	r2, r0
 800a63a:	4603      	mov	r3, r0
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d100      	bne.n	800a642 <memset+0xa>
 800a640:	4770      	bx	lr
 800a642:	f803 1b01 	strb.w	r1, [r3], #1
 800a646:	e7f9      	b.n	800a63c <memset+0x4>

0800a648 <_calloc_r>:
 800a648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a64a:	fba1 2402 	umull	r2, r4, r1, r2
 800a64e:	b94c      	cbnz	r4, 800a664 <_calloc_r+0x1c>
 800a650:	4611      	mov	r1, r2
 800a652:	9201      	str	r2, [sp, #4]
 800a654:	f000 f87a 	bl	800a74c <_malloc_r>
 800a658:	9a01      	ldr	r2, [sp, #4]
 800a65a:	4605      	mov	r5, r0
 800a65c:	b930      	cbnz	r0, 800a66c <_calloc_r+0x24>
 800a65e:	4628      	mov	r0, r5
 800a660:	b003      	add	sp, #12
 800a662:	bd30      	pop	{r4, r5, pc}
 800a664:	220c      	movs	r2, #12
 800a666:	6002      	str	r2, [r0, #0]
 800a668:	2500      	movs	r5, #0
 800a66a:	e7f8      	b.n	800a65e <_calloc_r+0x16>
 800a66c:	4621      	mov	r1, r4
 800a66e:	f7ff ffe3 	bl	800a638 <memset>
 800a672:	e7f4      	b.n	800a65e <_calloc_r+0x16>

0800a674 <_free_r>:
 800a674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a676:	2900      	cmp	r1, #0
 800a678:	d044      	beq.n	800a704 <_free_r+0x90>
 800a67a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67e:	9001      	str	r0, [sp, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f1a1 0404 	sub.w	r4, r1, #4
 800a686:	bfb8      	it	lt
 800a688:	18e4      	addlt	r4, r4, r3
 800a68a:	f000 fd5b 	bl	800b144 <__malloc_lock>
 800a68e:	4a1e      	ldr	r2, [pc, #120]	; (800a708 <_free_r+0x94>)
 800a690:	9801      	ldr	r0, [sp, #4]
 800a692:	6813      	ldr	r3, [r2, #0]
 800a694:	b933      	cbnz	r3, 800a6a4 <_free_r+0x30>
 800a696:	6063      	str	r3, [r4, #4]
 800a698:	6014      	str	r4, [r2, #0]
 800a69a:	b003      	add	sp, #12
 800a69c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6a0:	f000 bd56 	b.w	800b150 <__malloc_unlock>
 800a6a4:	42a3      	cmp	r3, r4
 800a6a6:	d908      	bls.n	800a6ba <_free_r+0x46>
 800a6a8:	6825      	ldr	r5, [r4, #0]
 800a6aa:	1961      	adds	r1, r4, r5
 800a6ac:	428b      	cmp	r3, r1
 800a6ae:	bf01      	itttt	eq
 800a6b0:	6819      	ldreq	r1, [r3, #0]
 800a6b2:	685b      	ldreq	r3, [r3, #4]
 800a6b4:	1949      	addeq	r1, r1, r5
 800a6b6:	6021      	streq	r1, [r4, #0]
 800a6b8:	e7ed      	b.n	800a696 <_free_r+0x22>
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	b10b      	cbz	r3, 800a6c4 <_free_r+0x50>
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	d9fa      	bls.n	800a6ba <_free_r+0x46>
 800a6c4:	6811      	ldr	r1, [r2, #0]
 800a6c6:	1855      	adds	r5, r2, r1
 800a6c8:	42a5      	cmp	r5, r4
 800a6ca:	d10b      	bne.n	800a6e4 <_free_r+0x70>
 800a6cc:	6824      	ldr	r4, [r4, #0]
 800a6ce:	4421      	add	r1, r4
 800a6d0:	1854      	adds	r4, r2, r1
 800a6d2:	42a3      	cmp	r3, r4
 800a6d4:	6011      	str	r1, [r2, #0]
 800a6d6:	d1e0      	bne.n	800a69a <_free_r+0x26>
 800a6d8:	681c      	ldr	r4, [r3, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	6053      	str	r3, [r2, #4]
 800a6de:	4421      	add	r1, r4
 800a6e0:	6011      	str	r1, [r2, #0]
 800a6e2:	e7da      	b.n	800a69a <_free_r+0x26>
 800a6e4:	d902      	bls.n	800a6ec <_free_r+0x78>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	6003      	str	r3, [r0, #0]
 800a6ea:	e7d6      	b.n	800a69a <_free_r+0x26>
 800a6ec:	6825      	ldr	r5, [r4, #0]
 800a6ee:	1961      	adds	r1, r4, r5
 800a6f0:	428b      	cmp	r3, r1
 800a6f2:	bf04      	itt	eq
 800a6f4:	6819      	ldreq	r1, [r3, #0]
 800a6f6:	685b      	ldreq	r3, [r3, #4]
 800a6f8:	6063      	str	r3, [r4, #4]
 800a6fa:	bf04      	itt	eq
 800a6fc:	1949      	addeq	r1, r1, r5
 800a6fe:	6021      	streq	r1, [r4, #0]
 800a700:	6054      	str	r4, [r2, #4]
 800a702:	e7ca      	b.n	800a69a <_free_r+0x26>
 800a704:	b003      	add	sp, #12
 800a706:	bd30      	pop	{r4, r5, pc}
 800a708:	24000cdc 	.word	0x24000cdc

0800a70c <sbrk_aligned>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	4e0e      	ldr	r6, [pc, #56]	; (800a748 <sbrk_aligned+0x3c>)
 800a710:	460c      	mov	r4, r1
 800a712:	6831      	ldr	r1, [r6, #0]
 800a714:	4605      	mov	r5, r0
 800a716:	b911      	cbnz	r1, 800a71e <sbrk_aligned+0x12>
 800a718:	f000 fb82 	bl	800ae20 <_sbrk_r>
 800a71c:	6030      	str	r0, [r6, #0]
 800a71e:	4621      	mov	r1, r4
 800a720:	4628      	mov	r0, r5
 800a722:	f000 fb7d 	bl	800ae20 <_sbrk_r>
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	d00a      	beq.n	800a740 <sbrk_aligned+0x34>
 800a72a:	1cc4      	adds	r4, r0, #3
 800a72c:	f024 0403 	bic.w	r4, r4, #3
 800a730:	42a0      	cmp	r0, r4
 800a732:	d007      	beq.n	800a744 <sbrk_aligned+0x38>
 800a734:	1a21      	subs	r1, r4, r0
 800a736:	4628      	mov	r0, r5
 800a738:	f000 fb72 	bl	800ae20 <_sbrk_r>
 800a73c:	3001      	adds	r0, #1
 800a73e:	d101      	bne.n	800a744 <sbrk_aligned+0x38>
 800a740:	f04f 34ff 	mov.w	r4, #4294967295
 800a744:	4620      	mov	r0, r4
 800a746:	bd70      	pop	{r4, r5, r6, pc}
 800a748:	24000ce0 	.word	0x24000ce0

0800a74c <_malloc_r>:
 800a74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a750:	1ccd      	adds	r5, r1, #3
 800a752:	f025 0503 	bic.w	r5, r5, #3
 800a756:	3508      	adds	r5, #8
 800a758:	2d0c      	cmp	r5, #12
 800a75a:	bf38      	it	cc
 800a75c:	250c      	movcc	r5, #12
 800a75e:	2d00      	cmp	r5, #0
 800a760:	4607      	mov	r7, r0
 800a762:	db01      	blt.n	800a768 <_malloc_r+0x1c>
 800a764:	42a9      	cmp	r1, r5
 800a766:	d905      	bls.n	800a774 <_malloc_r+0x28>
 800a768:	230c      	movs	r3, #12
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	2600      	movs	r6, #0
 800a76e:	4630      	mov	r0, r6
 800a770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a774:	4e2e      	ldr	r6, [pc, #184]	; (800a830 <_malloc_r+0xe4>)
 800a776:	f000 fce5 	bl	800b144 <__malloc_lock>
 800a77a:	6833      	ldr	r3, [r6, #0]
 800a77c:	461c      	mov	r4, r3
 800a77e:	bb34      	cbnz	r4, 800a7ce <_malloc_r+0x82>
 800a780:	4629      	mov	r1, r5
 800a782:	4638      	mov	r0, r7
 800a784:	f7ff ffc2 	bl	800a70c <sbrk_aligned>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	4604      	mov	r4, r0
 800a78c:	d14d      	bne.n	800a82a <_malloc_r+0xde>
 800a78e:	6834      	ldr	r4, [r6, #0]
 800a790:	4626      	mov	r6, r4
 800a792:	2e00      	cmp	r6, #0
 800a794:	d140      	bne.n	800a818 <_malloc_r+0xcc>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	4631      	mov	r1, r6
 800a79a:	4638      	mov	r0, r7
 800a79c:	eb04 0803 	add.w	r8, r4, r3
 800a7a0:	f000 fb3e 	bl	800ae20 <_sbrk_r>
 800a7a4:	4580      	cmp	r8, r0
 800a7a6:	d13a      	bne.n	800a81e <_malloc_r+0xd2>
 800a7a8:	6821      	ldr	r1, [r4, #0]
 800a7aa:	3503      	adds	r5, #3
 800a7ac:	1a6d      	subs	r5, r5, r1
 800a7ae:	f025 0503 	bic.w	r5, r5, #3
 800a7b2:	3508      	adds	r5, #8
 800a7b4:	2d0c      	cmp	r5, #12
 800a7b6:	bf38      	it	cc
 800a7b8:	250c      	movcc	r5, #12
 800a7ba:	4629      	mov	r1, r5
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f7ff ffa5 	bl	800a70c <sbrk_aligned>
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	d02b      	beq.n	800a81e <_malloc_r+0xd2>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	442b      	add	r3, r5
 800a7ca:	6023      	str	r3, [r4, #0]
 800a7cc:	e00e      	b.n	800a7ec <_malloc_r+0xa0>
 800a7ce:	6822      	ldr	r2, [r4, #0]
 800a7d0:	1b52      	subs	r2, r2, r5
 800a7d2:	d41e      	bmi.n	800a812 <_malloc_r+0xc6>
 800a7d4:	2a0b      	cmp	r2, #11
 800a7d6:	d916      	bls.n	800a806 <_malloc_r+0xba>
 800a7d8:	1961      	adds	r1, r4, r5
 800a7da:	42a3      	cmp	r3, r4
 800a7dc:	6025      	str	r5, [r4, #0]
 800a7de:	bf18      	it	ne
 800a7e0:	6059      	strne	r1, [r3, #4]
 800a7e2:	6863      	ldr	r3, [r4, #4]
 800a7e4:	bf08      	it	eq
 800a7e6:	6031      	streq	r1, [r6, #0]
 800a7e8:	5162      	str	r2, [r4, r5]
 800a7ea:	604b      	str	r3, [r1, #4]
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	f104 060b 	add.w	r6, r4, #11
 800a7f2:	f000 fcad 	bl	800b150 <__malloc_unlock>
 800a7f6:	f026 0607 	bic.w	r6, r6, #7
 800a7fa:	1d23      	adds	r3, r4, #4
 800a7fc:	1af2      	subs	r2, r6, r3
 800a7fe:	d0b6      	beq.n	800a76e <_malloc_r+0x22>
 800a800:	1b9b      	subs	r3, r3, r6
 800a802:	50a3      	str	r3, [r4, r2]
 800a804:	e7b3      	b.n	800a76e <_malloc_r+0x22>
 800a806:	6862      	ldr	r2, [r4, #4]
 800a808:	42a3      	cmp	r3, r4
 800a80a:	bf0c      	ite	eq
 800a80c:	6032      	streq	r2, [r6, #0]
 800a80e:	605a      	strne	r2, [r3, #4]
 800a810:	e7ec      	b.n	800a7ec <_malloc_r+0xa0>
 800a812:	4623      	mov	r3, r4
 800a814:	6864      	ldr	r4, [r4, #4]
 800a816:	e7b2      	b.n	800a77e <_malloc_r+0x32>
 800a818:	4634      	mov	r4, r6
 800a81a:	6876      	ldr	r6, [r6, #4]
 800a81c:	e7b9      	b.n	800a792 <_malloc_r+0x46>
 800a81e:	230c      	movs	r3, #12
 800a820:	603b      	str	r3, [r7, #0]
 800a822:	4638      	mov	r0, r7
 800a824:	f000 fc94 	bl	800b150 <__malloc_unlock>
 800a828:	e7a1      	b.n	800a76e <_malloc_r+0x22>
 800a82a:	6025      	str	r5, [r4, #0]
 800a82c:	e7de      	b.n	800a7ec <_malloc_r+0xa0>
 800a82e:	bf00      	nop
 800a830:	24000cdc 	.word	0x24000cdc

0800a834 <__sfputc_r>:
 800a834:	6893      	ldr	r3, [r2, #8]
 800a836:	3b01      	subs	r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	b410      	push	{r4}
 800a83c:	6093      	str	r3, [r2, #8]
 800a83e:	da08      	bge.n	800a852 <__sfputc_r+0x1e>
 800a840:	6994      	ldr	r4, [r2, #24]
 800a842:	42a3      	cmp	r3, r4
 800a844:	db01      	blt.n	800a84a <__sfputc_r+0x16>
 800a846:	290a      	cmp	r1, #10
 800a848:	d103      	bne.n	800a852 <__sfputc_r+0x1e>
 800a84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a84e:	f000 bb5b 	b.w	800af08 <__swbuf_r>
 800a852:	6813      	ldr	r3, [r2, #0]
 800a854:	1c58      	adds	r0, r3, #1
 800a856:	6010      	str	r0, [r2, #0]
 800a858:	7019      	strb	r1, [r3, #0]
 800a85a:	4608      	mov	r0, r1
 800a85c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <__sfputs_r>:
 800a862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a864:	4606      	mov	r6, r0
 800a866:	460f      	mov	r7, r1
 800a868:	4614      	mov	r4, r2
 800a86a:	18d5      	adds	r5, r2, r3
 800a86c:	42ac      	cmp	r4, r5
 800a86e:	d101      	bne.n	800a874 <__sfputs_r+0x12>
 800a870:	2000      	movs	r0, #0
 800a872:	e007      	b.n	800a884 <__sfputs_r+0x22>
 800a874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a878:	463a      	mov	r2, r7
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7ff ffda 	bl	800a834 <__sfputc_r>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d1f3      	bne.n	800a86c <__sfputs_r+0xa>
 800a884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a888 <_vfiprintf_r>:
 800a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a88c:	460d      	mov	r5, r1
 800a88e:	b09d      	sub	sp, #116	; 0x74
 800a890:	4614      	mov	r4, r2
 800a892:	4698      	mov	r8, r3
 800a894:	4606      	mov	r6, r0
 800a896:	b118      	cbz	r0, 800a8a0 <_vfiprintf_r+0x18>
 800a898:	6983      	ldr	r3, [r0, #24]
 800a89a:	b90b      	cbnz	r3, 800a8a0 <_vfiprintf_r+0x18>
 800a89c:	f7ff fcea 	bl	800a274 <__sinit>
 800a8a0:	4b89      	ldr	r3, [pc, #548]	; (800aac8 <_vfiprintf_r+0x240>)
 800a8a2:	429d      	cmp	r5, r3
 800a8a4:	d11b      	bne.n	800a8de <_vfiprintf_r+0x56>
 800a8a6:	6875      	ldr	r5, [r6, #4]
 800a8a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8aa:	07d9      	lsls	r1, r3, #31
 800a8ac:	d405      	bmi.n	800a8ba <_vfiprintf_r+0x32>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	059a      	lsls	r2, r3, #22
 800a8b2:	d402      	bmi.n	800a8ba <_vfiprintf_r+0x32>
 800a8b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b6:	f7ff fe20 	bl	800a4fa <__retarget_lock_acquire_recursive>
 800a8ba:	89ab      	ldrh	r3, [r5, #12]
 800a8bc:	071b      	lsls	r3, r3, #28
 800a8be:	d501      	bpl.n	800a8c4 <_vfiprintf_r+0x3c>
 800a8c0:	692b      	ldr	r3, [r5, #16]
 800a8c2:	b9eb      	cbnz	r3, 800a900 <_vfiprintf_r+0x78>
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f000 fb82 	bl	800afd0 <__swsetup_r>
 800a8cc:	b1c0      	cbz	r0, 800a900 <_vfiprintf_r+0x78>
 800a8ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d0:	07dc      	lsls	r4, r3, #31
 800a8d2:	d50e      	bpl.n	800a8f2 <_vfiprintf_r+0x6a>
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	b01d      	add	sp, #116	; 0x74
 800a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8de:	4b7b      	ldr	r3, [pc, #492]	; (800aacc <_vfiprintf_r+0x244>)
 800a8e0:	429d      	cmp	r5, r3
 800a8e2:	d101      	bne.n	800a8e8 <_vfiprintf_r+0x60>
 800a8e4:	68b5      	ldr	r5, [r6, #8]
 800a8e6:	e7df      	b.n	800a8a8 <_vfiprintf_r+0x20>
 800a8e8:	4b79      	ldr	r3, [pc, #484]	; (800aad0 <_vfiprintf_r+0x248>)
 800a8ea:	429d      	cmp	r5, r3
 800a8ec:	bf08      	it	eq
 800a8ee:	68f5      	ldreq	r5, [r6, #12]
 800a8f0:	e7da      	b.n	800a8a8 <_vfiprintf_r+0x20>
 800a8f2:	89ab      	ldrh	r3, [r5, #12]
 800a8f4:	0598      	lsls	r0, r3, #22
 800a8f6:	d4ed      	bmi.n	800a8d4 <_vfiprintf_r+0x4c>
 800a8f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8fa:	f7ff fdff 	bl	800a4fc <__retarget_lock_release_recursive>
 800a8fe:	e7e9      	b.n	800a8d4 <_vfiprintf_r+0x4c>
 800a900:	2300      	movs	r3, #0
 800a902:	9309      	str	r3, [sp, #36]	; 0x24
 800a904:	2320      	movs	r3, #32
 800a906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a90a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a90e:	2330      	movs	r3, #48	; 0x30
 800a910:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aad4 <_vfiprintf_r+0x24c>
 800a914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a918:	f04f 0901 	mov.w	r9, #1
 800a91c:	4623      	mov	r3, r4
 800a91e:	469a      	mov	sl, r3
 800a920:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a924:	b10a      	cbz	r2, 800a92a <_vfiprintf_r+0xa2>
 800a926:	2a25      	cmp	r2, #37	; 0x25
 800a928:	d1f9      	bne.n	800a91e <_vfiprintf_r+0x96>
 800a92a:	ebba 0b04 	subs.w	fp, sl, r4
 800a92e:	d00b      	beq.n	800a948 <_vfiprintf_r+0xc0>
 800a930:	465b      	mov	r3, fp
 800a932:	4622      	mov	r2, r4
 800a934:	4629      	mov	r1, r5
 800a936:	4630      	mov	r0, r6
 800a938:	f7ff ff93 	bl	800a862 <__sfputs_r>
 800a93c:	3001      	adds	r0, #1
 800a93e:	f000 80aa 	beq.w	800aa96 <_vfiprintf_r+0x20e>
 800a942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a944:	445a      	add	r2, fp
 800a946:	9209      	str	r2, [sp, #36]	; 0x24
 800a948:	f89a 3000 	ldrb.w	r3, [sl]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f000 80a2 	beq.w	800aa96 <_vfiprintf_r+0x20e>
 800a952:	2300      	movs	r3, #0
 800a954:	f04f 32ff 	mov.w	r2, #4294967295
 800a958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a95c:	f10a 0a01 	add.w	sl, sl, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	9307      	str	r3, [sp, #28]
 800a964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a968:	931a      	str	r3, [sp, #104]	; 0x68
 800a96a:	4654      	mov	r4, sl
 800a96c:	2205      	movs	r2, #5
 800a96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a972:	4858      	ldr	r0, [pc, #352]	; (800aad4 <_vfiprintf_r+0x24c>)
 800a974:	f7f5 fcb4 	bl	80002e0 <memchr>
 800a978:	9a04      	ldr	r2, [sp, #16]
 800a97a:	b9d8      	cbnz	r0, 800a9b4 <_vfiprintf_r+0x12c>
 800a97c:	06d1      	lsls	r1, r2, #27
 800a97e:	bf44      	itt	mi
 800a980:	2320      	movmi	r3, #32
 800a982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a986:	0713      	lsls	r3, r2, #28
 800a988:	bf44      	itt	mi
 800a98a:	232b      	movmi	r3, #43	; 0x2b
 800a98c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a990:	f89a 3000 	ldrb.w	r3, [sl]
 800a994:	2b2a      	cmp	r3, #42	; 0x2a
 800a996:	d015      	beq.n	800a9c4 <_vfiprintf_r+0x13c>
 800a998:	9a07      	ldr	r2, [sp, #28]
 800a99a:	4654      	mov	r4, sl
 800a99c:	2000      	movs	r0, #0
 800a99e:	f04f 0c0a 	mov.w	ip, #10
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9a8:	3b30      	subs	r3, #48	; 0x30
 800a9aa:	2b09      	cmp	r3, #9
 800a9ac:	d94e      	bls.n	800aa4c <_vfiprintf_r+0x1c4>
 800a9ae:	b1b0      	cbz	r0, 800a9de <_vfiprintf_r+0x156>
 800a9b0:	9207      	str	r2, [sp, #28]
 800a9b2:	e014      	b.n	800a9de <_vfiprintf_r+0x156>
 800a9b4:	eba0 0308 	sub.w	r3, r0, r8
 800a9b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	9304      	str	r3, [sp, #16]
 800a9c0:	46a2      	mov	sl, r4
 800a9c2:	e7d2      	b.n	800a96a <_vfiprintf_r+0xe2>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	1d19      	adds	r1, r3, #4
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	9103      	str	r1, [sp, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bfbb      	ittet	lt
 800a9d0:	425b      	neglt	r3, r3
 800a9d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9d6:	9307      	strge	r3, [sp, #28]
 800a9d8:	9307      	strlt	r3, [sp, #28]
 800a9da:	bfb8      	it	lt
 800a9dc:	9204      	strlt	r2, [sp, #16]
 800a9de:	7823      	ldrb	r3, [r4, #0]
 800a9e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9e2:	d10c      	bne.n	800a9fe <_vfiprintf_r+0x176>
 800a9e4:	7863      	ldrb	r3, [r4, #1]
 800a9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e8:	d135      	bne.n	800aa56 <_vfiprintf_r+0x1ce>
 800a9ea:	9b03      	ldr	r3, [sp, #12]
 800a9ec:	1d1a      	adds	r2, r3, #4
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	9203      	str	r2, [sp, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	bfb8      	it	lt
 800a9f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9fa:	3402      	adds	r4, #2
 800a9fc:	9305      	str	r3, [sp, #20]
 800a9fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aae4 <_vfiprintf_r+0x25c>
 800aa02:	7821      	ldrb	r1, [r4, #0]
 800aa04:	2203      	movs	r2, #3
 800aa06:	4650      	mov	r0, sl
 800aa08:	f7f5 fc6a 	bl	80002e0 <memchr>
 800aa0c:	b140      	cbz	r0, 800aa20 <_vfiprintf_r+0x198>
 800aa0e:	2340      	movs	r3, #64	; 0x40
 800aa10:	eba0 000a 	sub.w	r0, r0, sl
 800aa14:	fa03 f000 	lsl.w	r0, r3, r0
 800aa18:	9b04      	ldr	r3, [sp, #16]
 800aa1a:	4303      	orrs	r3, r0
 800aa1c:	3401      	adds	r4, #1
 800aa1e:	9304      	str	r3, [sp, #16]
 800aa20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa24:	482c      	ldr	r0, [pc, #176]	; (800aad8 <_vfiprintf_r+0x250>)
 800aa26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa2a:	2206      	movs	r2, #6
 800aa2c:	f7f5 fc58 	bl	80002e0 <memchr>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d03f      	beq.n	800aab4 <_vfiprintf_r+0x22c>
 800aa34:	4b29      	ldr	r3, [pc, #164]	; (800aadc <_vfiprintf_r+0x254>)
 800aa36:	bb1b      	cbnz	r3, 800aa80 <_vfiprintf_r+0x1f8>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	3307      	adds	r3, #7
 800aa3c:	f023 0307 	bic.w	r3, r3, #7
 800aa40:	3308      	adds	r3, #8
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa46:	443b      	add	r3, r7
 800aa48:	9309      	str	r3, [sp, #36]	; 0x24
 800aa4a:	e767      	b.n	800a91c <_vfiprintf_r+0x94>
 800aa4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa50:	460c      	mov	r4, r1
 800aa52:	2001      	movs	r0, #1
 800aa54:	e7a5      	b.n	800a9a2 <_vfiprintf_r+0x11a>
 800aa56:	2300      	movs	r3, #0
 800aa58:	3401      	adds	r4, #1
 800aa5a:	9305      	str	r3, [sp, #20]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	f04f 0c0a 	mov.w	ip, #10
 800aa62:	4620      	mov	r0, r4
 800aa64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa68:	3a30      	subs	r2, #48	; 0x30
 800aa6a:	2a09      	cmp	r2, #9
 800aa6c:	d903      	bls.n	800aa76 <_vfiprintf_r+0x1ee>
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d0c5      	beq.n	800a9fe <_vfiprintf_r+0x176>
 800aa72:	9105      	str	r1, [sp, #20]
 800aa74:	e7c3      	b.n	800a9fe <_vfiprintf_r+0x176>
 800aa76:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e7f0      	b.n	800aa62 <_vfiprintf_r+0x1da>
 800aa80:	ab03      	add	r3, sp, #12
 800aa82:	9300      	str	r3, [sp, #0]
 800aa84:	462a      	mov	r2, r5
 800aa86:	4b16      	ldr	r3, [pc, #88]	; (800aae0 <_vfiprintf_r+0x258>)
 800aa88:	a904      	add	r1, sp, #16
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f3af 8000 	nop.w
 800aa90:	4607      	mov	r7, r0
 800aa92:	1c78      	adds	r0, r7, #1
 800aa94:	d1d6      	bne.n	800aa44 <_vfiprintf_r+0x1bc>
 800aa96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa98:	07d9      	lsls	r1, r3, #31
 800aa9a:	d405      	bmi.n	800aaa8 <_vfiprintf_r+0x220>
 800aa9c:	89ab      	ldrh	r3, [r5, #12]
 800aa9e:	059a      	lsls	r2, r3, #22
 800aaa0:	d402      	bmi.n	800aaa8 <_vfiprintf_r+0x220>
 800aaa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aaa4:	f7ff fd2a 	bl	800a4fc <__retarget_lock_release_recursive>
 800aaa8:	89ab      	ldrh	r3, [r5, #12]
 800aaaa:	065b      	lsls	r3, r3, #25
 800aaac:	f53f af12 	bmi.w	800a8d4 <_vfiprintf_r+0x4c>
 800aab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aab2:	e711      	b.n	800a8d8 <_vfiprintf_r+0x50>
 800aab4:	ab03      	add	r3, sp, #12
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	462a      	mov	r2, r5
 800aaba:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <_vfiprintf_r+0x258>)
 800aabc:	a904      	add	r1, sp, #16
 800aabe:	4630      	mov	r0, r6
 800aac0:	f000 f880 	bl	800abc4 <_printf_i>
 800aac4:	e7e4      	b.n	800aa90 <_vfiprintf_r+0x208>
 800aac6:	bf00      	nop
 800aac8:	08019f14 	.word	0x08019f14
 800aacc:	08019f34 	.word	0x08019f34
 800aad0:	08019ef4 	.word	0x08019ef4
 800aad4:	08019f58 	.word	0x08019f58
 800aad8:	08019f62 	.word	0x08019f62
 800aadc:	00000000 	.word	0x00000000
 800aae0:	0800a863 	.word	0x0800a863
 800aae4:	08019f5e 	.word	0x08019f5e

0800aae8 <_printf_common>:
 800aae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaec:	4616      	mov	r6, r2
 800aaee:	4699      	mov	r9, r3
 800aaf0:	688a      	ldr	r2, [r1, #8]
 800aaf2:	690b      	ldr	r3, [r1, #16]
 800aaf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	bfb8      	it	lt
 800aafc:	4613      	movlt	r3, r2
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab04:	4607      	mov	r7, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	b10a      	cbz	r2, 800ab0e <_printf_common+0x26>
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	6033      	str	r3, [r6, #0]
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	0699      	lsls	r1, r3, #26
 800ab12:	bf42      	ittt	mi
 800ab14:	6833      	ldrmi	r3, [r6, #0]
 800ab16:	3302      	addmi	r3, #2
 800ab18:	6033      	strmi	r3, [r6, #0]
 800ab1a:	6825      	ldr	r5, [r4, #0]
 800ab1c:	f015 0506 	ands.w	r5, r5, #6
 800ab20:	d106      	bne.n	800ab30 <_printf_common+0x48>
 800ab22:	f104 0a19 	add.w	sl, r4, #25
 800ab26:	68e3      	ldr	r3, [r4, #12]
 800ab28:	6832      	ldr	r2, [r6, #0]
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	42ab      	cmp	r3, r5
 800ab2e:	dc26      	bgt.n	800ab7e <_printf_common+0x96>
 800ab30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab34:	1e13      	subs	r3, r2, #0
 800ab36:	6822      	ldr	r2, [r4, #0]
 800ab38:	bf18      	it	ne
 800ab3a:	2301      	movne	r3, #1
 800ab3c:	0692      	lsls	r2, r2, #26
 800ab3e:	d42b      	bmi.n	800ab98 <_printf_common+0xb0>
 800ab40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab44:	4649      	mov	r1, r9
 800ab46:	4638      	mov	r0, r7
 800ab48:	47c0      	blx	r8
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d01e      	beq.n	800ab8c <_printf_common+0xa4>
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	68e5      	ldr	r5, [r4, #12]
 800ab52:	6832      	ldr	r2, [r6, #0]
 800ab54:	f003 0306 	and.w	r3, r3, #6
 800ab58:	2b04      	cmp	r3, #4
 800ab5a:	bf08      	it	eq
 800ab5c:	1aad      	subeq	r5, r5, r2
 800ab5e:	68a3      	ldr	r3, [r4, #8]
 800ab60:	6922      	ldr	r2, [r4, #16]
 800ab62:	bf0c      	ite	eq
 800ab64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab68:	2500      	movne	r5, #0
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	bfc4      	itt	gt
 800ab6e:	1a9b      	subgt	r3, r3, r2
 800ab70:	18ed      	addgt	r5, r5, r3
 800ab72:	2600      	movs	r6, #0
 800ab74:	341a      	adds	r4, #26
 800ab76:	42b5      	cmp	r5, r6
 800ab78:	d11a      	bne.n	800abb0 <_printf_common+0xc8>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	e008      	b.n	800ab90 <_printf_common+0xa8>
 800ab7e:	2301      	movs	r3, #1
 800ab80:	4652      	mov	r2, sl
 800ab82:	4649      	mov	r1, r9
 800ab84:	4638      	mov	r0, r7
 800ab86:	47c0      	blx	r8
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d103      	bne.n	800ab94 <_printf_common+0xac>
 800ab8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab94:	3501      	adds	r5, #1
 800ab96:	e7c6      	b.n	800ab26 <_printf_common+0x3e>
 800ab98:	18e1      	adds	r1, r4, r3
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	2030      	movs	r0, #48	; 0x30
 800ab9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aba2:	4422      	add	r2, r4
 800aba4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800abac:	3302      	adds	r3, #2
 800abae:	e7c7      	b.n	800ab40 <_printf_common+0x58>
 800abb0:	2301      	movs	r3, #1
 800abb2:	4622      	mov	r2, r4
 800abb4:	4649      	mov	r1, r9
 800abb6:	4638      	mov	r0, r7
 800abb8:	47c0      	blx	r8
 800abba:	3001      	adds	r0, #1
 800abbc:	d0e6      	beq.n	800ab8c <_printf_common+0xa4>
 800abbe:	3601      	adds	r6, #1
 800abc0:	e7d9      	b.n	800ab76 <_printf_common+0x8e>
	...

0800abc4 <_printf_i>:
 800abc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	7e0f      	ldrb	r7, [r1, #24]
 800abca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abcc:	2f78      	cmp	r7, #120	; 0x78
 800abce:	4691      	mov	r9, r2
 800abd0:	4680      	mov	r8, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	469a      	mov	sl, r3
 800abd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abda:	d807      	bhi.n	800abec <_printf_i+0x28>
 800abdc:	2f62      	cmp	r7, #98	; 0x62
 800abde:	d80a      	bhi.n	800abf6 <_printf_i+0x32>
 800abe0:	2f00      	cmp	r7, #0
 800abe2:	f000 80d8 	beq.w	800ad96 <_printf_i+0x1d2>
 800abe6:	2f58      	cmp	r7, #88	; 0x58
 800abe8:	f000 80a3 	beq.w	800ad32 <_printf_i+0x16e>
 800abec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abf4:	e03a      	b.n	800ac6c <_printf_i+0xa8>
 800abf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abfa:	2b15      	cmp	r3, #21
 800abfc:	d8f6      	bhi.n	800abec <_printf_i+0x28>
 800abfe:	a101      	add	r1, pc, #4	; (adr r1, 800ac04 <_printf_i+0x40>)
 800ac00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac04:	0800ac5d 	.word	0x0800ac5d
 800ac08:	0800ac71 	.word	0x0800ac71
 800ac0c:	0800abed 	.word	0x0800abed
 800ac10:	0800abed 	.word	0x0800abed
 800ac14:	0800abed 	.word	0x0800abed
 800ac18:	0800abed 	.word	0x0800abed
 800ac1c:	0800ac71 	.word	0x0800ac71
 800ac20:	0800abed 	.word	0x0800abed
 800ac24:	0800abed 	.word	0x0800abed
 800ac28:	0800abed 	.word	0x0800abed
 800ac2c:	0800abed 	.word	0x0800abed
 800ac30:	0800ad7d 	.word	0x0800ad7d
 800ac34:	0800aca1 	.word	0x0800aca1
 800ac38:	0800ad5f 	.word	0x0800ad5f
 800ac3c:	0800abed 	.word	0x0800abed
 800ac40:	0800abed 	.word	0x0800abed
 800ac44:	0800ad9f 	.word	0x0800ad9f
 800ac48:	0800abed 	.word	0x0800abed
 800ac4c:	0800aca1 	.word	0x0800aca1
 800ac50:	0800abed 	.word	0x0800abed
 800ac54:	0800abed 	.word	0x0800abed
 800ac58:	0800ad67 	.word	0x0800ad67
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	1d1a      	adds	r2, r3, #4
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	602a      	str	r2, [r5, #0]
 800ac64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e0a3      	b.n	800adb8 <_printf_i+0x1f4>
 800ac70:	6820      	ldr	r0, [r4, #0]
 800ac72:	6829      	ldr	r1, [r5, #0]
 800ac74:	0606      	lsls	r6, r0, #24
 800ac76:	f101 0304 	add.w	r3, r1, #4
 800ac7a:	d50a      	bpl.n	800ac92 <_printf_i+0xce>
 800ac7c:	680e      	ldr	r6, [r1, #0]
 800ac7e:	602b      	str	r3, [r5, #0]
 800ac80:	2e00      	cmp	r6, #0
 800ac82:	da03      	bge.n	800ac8c <_printf_i+0xc8>
 800ac84:	232d      	movs	r3, #45	; 0x2d
 800ac86:	4276      	negs	r6, r6
 800ac88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac8c:	485e      	ldr	r0, [pc, #376]	; (800ae08 <_printf_i+0x244>)
 800ac8e:	230a      	movs	r3, #10
 800ac90:	e019      	b.n	800acc6 <_printf_i+0x102>
 800ac92:	680e      	ldr	r6, [r1, #0]
 800ac94:	602b      	str	r3, [r5, #0]
 800ac96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac9a:	bf18      	it	ne
 800ac9c:	b236      	sxthne	r6, r6
 800ac9e:	e7ef      	b.n	800ac80 <_printf_i+0xbc>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	6820      	ldr	r0, [r4, #0]
 800aca4:	1d19      	adds	r1, r3, #4
 800aca6:	6029      	str	r1, [r5, #0]
 800aca8:	0601      	lsls	r1, r0, #24
 800acaa:	d501      	bpl.n	800acb0 <_printf_i+0xec>
 800acac:	681e      	ldr	r6, [r3, #0]
 800acae:	e002      	b.n	800acb6 <_printf_i+0xf2>
 800acb0:	0646      	lsls	r6, r0, #25
 800acb2:	d5fb      	bpl.n	800acac <_printf_i+0xe8>
 800acb4:	881e      	ldrh	r6, [r3, #0]
 800acb6:	4854      	ldr	r0, [pc, #336]	; (800ae08 <_printf_i+0x244>)
 800acb8:	2f6f      	cmp	r7, #111	; 0x6f
 800acba:	bf0c      	ite	eq
 800acbc:	2308      	moveq	r3, #8
 800acbe:	230a      	movne	r3, #10
 800acc0:	2100      	movs	r1, #0
 800acc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800acc6:	6865      	ldr	r5, [r4, #4]
 800acc8:	60a5      	str	r5, [r4, #8]
 800acca:	2d00      	cmp	r5, #0
 800accc:	bfa2      	ittt	ge
 800acce:	6821      	ldrge	r1, [r4, #0]
 800acd0:	f021 0104 	bicge.w	r1, r1, #4
 800acd4:	6021      	strge	r1, [r4, #0]
 800acd6:	b90e      	cbnz	r6, 800acdc <_printf_i+0x118>
 800acd8:	2d00      	cmp	r5, #0
 800acda:	d04d      	beq.n	800ad78 <_printf_i+0x1b4>
 800acdc:	4615      	mov	r5, r2
 800acde:	fbb6 f1f3 	udiv	r1, r6, r3
 800ace2:	fb03 6711 	mls	r7, r3, r1, r6
 800ace6:	5dc7      	ldrb	r7, [r0, r7]
 800ace8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acec:	4637      	mov	r7, r6
 800acee:	42bb      	cmp	r3, r7
 800acf0:	460e      	mov	r6, r1
 800acf2:	d9f4      	bls.n	800acde <_printf_i+0x11a>
 800acf4:	2b08      	cmp	r3, #8
 800acf6:	d10b      	bne.n	800ad10 <_printf_i+0x14c>
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	07de      	lsls	r6, r3, #31
 800acfc:	d508      	bpl.n	800ad10 <_printf_i+0x14c>
 800acfe:	6923      	ldr	r3, [r4, #16]
 800ad00:	6861      	ldr	r1, [r4, #4]
 800ad02:	4299      	cmp	r1, r3
 800ad04:	bfde      	ittt	le
 800ad06:	2330      	movle	r3, #48	; 0x30
 800ad08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ad10:	1b52      	subs	r2, r2, r5
 800ad12:	6122      	str	r2, [r4, #16]
 800ad14:	f8cd a000 	str.w	sl, [sp]
 800ad18:	464b      	mov	r3, r9
 800ad1a:	aa03      	add	r2, sp, #12
 800ad1c:	4621      	mov	r1, r4
 800ad1e:	4640      	mov	r0, r8
 800ad20:	f7ff fee2 	bl	800aae8 <_printf_common>
 800ad24:	3001      	adds	r0, #1
 800ad26:	d14c      	bne.n	800adc2 <_printf_i+0x1fe>
 800ad28:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2c:	b004      	add	sp, #16
 800ad2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad32:	4835      	ldr	r0, [pc, #212]	; (800ae08 <_printf_i+0x244>)
 800ad34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ad38:	6829      	ldr	r1, [r5, #0]
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad40:	6029      	str	r1, [r5, #0]
 800ad42:	061d      	lsls	r5, r3, #24
 800ad44:	d514      	bpl.n	800ad70 <_printf_i+0x1ac>
 800ad46:	07df      	lsls	r7, r3, #31
 800ad48:	bf44      	itt	mi
 800ad4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ad4e:	6023      	strmi	r3, [r4, #0]
 800ad50:	b91e      	cbnz	r6, 800ad5a <_printf_i+0x196>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	f023 0320 	bic.w	r3, r3, #32
 800ad58:	6023      	str	r3, [r4, #0]
 800ad5a:	2310      	movs	r3, #16
 800ad5c:	e7b0      	b.n	800acc0 <_printf_i+0xfc>
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	f043 0320 	orr.w	r3, r3, #32
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	2378      	movs	r3, #120	; 0x78
 800ad68:	4828      	ldr	r0, [pc, #160]	; (800ae0c <_printf_i+0x248>)
 800ad6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad6e:	e7e3      	b.n	800ad38 <_printf_i+0x174>
 800ad70:	0659      	lsls	r1, r3, #25
 800ad72:	bf48      	it	mi
 800ad74:	b2b6      	uxthmi	r6, r6
 800ad76:	e7e6      	b.n	800ad46 <_printf_i+0x182>
 800ad78:	4615      	mov	r5, r2
 800ad7a:	e7bb      	b.n	800acf4 <_printf_i+0x130>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	6826      	ldr	r6, [r4, #0]
 800ad80:	6961      	ldr	r1, [r4, #20]
 800ad82:	1d18      	adds	r0, r3, #4
 800ad84:	6028      	str	r0, [r5, #0]
 800ad86:	0635      	lsls	r5, r6, #24
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	d501      	bpl.n	800ad90 <_printf_i+0x1cc>
 800ad8c:	6019      	str	r1, [r3, #0]
 800ad8e:	e002      	b.n	800ad96 <_printf_i+0x1d2>
 800ad90:	0670      	lsls	r0, r6, #25
 800ad92:	d5fb      	bpl.n	800ad8c <_printf_i+0x1c8>
 800ad94:	8019      	strh	r1, [r3, #0]
 800ad96:	2300      	movs	r3, #0
 800ad98:	6123      	str	r3, [r4, #16]
 800ad9a:	4615      	mov	r5, r2
 800ad9c:	e7ba      	b.n	800ad14 <_printf_i+0x150>
 800ad9e:	682b      	ldr	r3, [r5, #0]
 800ada0:	1d1a      	adds	r2, r3, #4
 800ada2:	602a      	str	r2, [r5, #0]
 800ada4:	681d      	ldr	r5, [r3, #0]
 800ada6:	6862      	ldr	r2, [r4, #4]
 800ada8:	2100      	movs	r1, #0
 800adaa:	4628      	mov	r0, r5
 800adac:	f7f5 fa98 	bl	80002e0 <memchr>
 800adb0:	b108      	cbz	r0, 800adb6 <_printf_i+0x1f2>
 800adb2:	1b40      	subs	r0, r0, r5
 800adb4:	6060      	str	r0, [r4, #4]
 800adb6:	6863      	ldr	r3, [r4, #4]
 800adb8:	6123      	str	r3, [r4, #16]
 800adba:	2300      	movs	r3, #0
 800adbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adc0:	e7a8      	b.n	800ad14 <_printf_i+0x150>
 800adc2:	6923      	ldr	r3, [r4, #16]
 800adc4:	462a      	mov	r2, r5
 800adc6:	4649      	mov	r1, r9
 800adc8:	4640      	mov	r0, r8
 800adca:	47d0      	blx	sl
 800adcc:	3001      	adds	r0, #1
 800adce:	d0ab      	beq.n	800ad28 <_printf_i+0x164>
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	079b      	lsls	r3, r3, #30
 800add4:	d413      	bmi.n	800adfe <_printf_i+0x23a>
 800add6:	68e0      	ldr	r0, [r4, #12]
 800add8:	9b03      	ldr	r3, [sp, #12]
 800adda:	4298      	cmp	r0, r3
 800addc:	bfb8      	it	lt
 800adde:	4618      	movlt	r0, r3
 800ade0:	e7a4      	b.n	800ad2c <_printf_i+0x168>
 800ade2:	2301      	movs	r3, #1
 800ade4:	4632      	mov	r2, r6
 800ade6:	4649      	mov	r1, r9
 800ade8:	4640      	mov	r0, r8
 800adea:	47d0      	blx	sl
 800adec:	3001      	adds	r0, #1
 800adee:	d09b      	beq.n	800ad28 <_printf_i+0x164>
 800adf0:	3501      	adds	r5, #1
 800adf2:	68e3      	ldr	r3, [r4, #12]
 800adf4:	9903      	ldr	r1, [sp, #12]
 800adf6:	1a5b      	subs	r3, r3, r1
 800adf8:	42ab      	cmp	r3, r5
 800adfa:	dcf2      	bgt.n	800ade2 <_printf_i+0x21e>
 800adfc:	e7eb      	b.n	800add6 <_printf_i+0x212>
 800adfe:	2500      	movs	r5, #0
 800ae00:	f104 0619 	add.w	r6, r4, #25
 800ae04:	e7f5      	b.n	800adf2 <_printf_i+0x22e>
 800ae06:	bf00      	nop
 800ae08:	08019f69 	.word	0x08019f69
 800ae0c:	08019f7a 	.word	0x08019f7a

0800ae10 <realloc>:
 800ae10:	4b02      	ldr	r3, [pc, #8]	; (800ae1c <realloc+0xc>)
 800ae12:	460a      	mov	r2, r1
 800ae14:	4601      	mov	r1, r0
 800ae16:	6818      	ldr	r0, [r3, #0]
 800ae18:	f000 b9a0 	b.w	800b15c <_realloc_r>
 800ae1c:	240004fc 	.word	0x240004fc

0800ae20 <_sbrk_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	4d06      	ldr	r5, [pc, #24]	; (800ae3c <_sbrk_r+0x1c>)
 800ae24:	2300      	movs	r3, #0
 800ae26:	4604      	mov	r4, r0
 800ae28:	4608      	mov	r0, r1
 800ae2a:	602b      	str	r3, [r5, #0]
 800ae2c:	f7f9 f876 	bl	8003f1c <_sbrk>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	d102      	bne.n	800ae3a <_sbrk_r+0x1a>
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	b103      	cbz	r3, 800ae3a <_sbrk_r+0x1a>
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	24000ce4 	.word	0x24000ce4

0800ae40 <siprintf>:
 800ae40:	b40e      	push	{r1, r2, r3}
 800ae42:	b500      	push	{lr}
 800ae44:	b09c      	sub	sp, #112	; 0x70
 800ae46:	ab1d      	add	r3, sp, #116	; 0x74
 800ae48:	9002      	str	r0, [sp, #8]
 800ae4a:	9006      	str	r0, [sp, #24]
 800ae4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae50:	4809      	ldr	r0, [pc, #36]	; (800ae78 <siprintf+0x38>)
 800ae52:	9107      	str	r1, [sp, #28]
 800ae54:	9104      	str	r1, [sp, #16]
 800ae56:	4909      	ldr	r1, [pc, #36]	; (800ae7c <siprintf+0x3c>)
 800ae58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5c:	9105      	str	r1, [sp, #20]
 800ae5e:	6800      	ldr	r0, [r0, #0]
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	a902      	add	r1, sp, #8
 800ae64:	f000 fa04 	bl	800b270 <_svfiprintf_r>
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	b01c      	add	sp, #112	; 0x70
 800ae70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae74:	b003      	add	sp, #12
 800ae76:	4770      	bx	lr
 800ae78:	240004fc 	.word	0x240004fc
 800ae7c:	ffff0208 	.word	0xffff0208

0800ae80 <__sread>:
 800ae80:	b510      	push	{r4, lr}
 800ae82:	460c      	mov	r4, r1
 800ae84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae88:	f000 faf2 	bl	800b470 <_read_r>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	bfab      	itete	ge
 800ae90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae92:	89a3      	ldrhlt	r3, [r4, #12]
 800ae94:	181b      	addge	r3, r3, r0
 800ae96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae9a:	bfac      	ite	ge
 800ae9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ae9e:	81a3      	strhlt	r3, [r4, #12]
 800aea0:	bd10      	pop	{r4, pc}

0800aea2 <__swrite>:
 800aea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aea6:	461f      	mov	r7, r3
 800aea8:	898b      	ldrh	r3, [r1, #12]
 800aeaa:	05db      	lsls	r3, r3, #23
 800aeac:	4605      	mov	r5, r0
 800aeae:	460c      	mov	r4, r1
 800aeb0:	4616      	mov	r6, r2
 800aeb2:	d505      	bpl.n	800aec0 <__swrite+0x1e>
 800aeb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb8:	2302      	movs	r3, #2
 800aeba:	2200      	movs	r2, #0
 800aebc:	f000 f930 	bl	800b120 <_lseek_r>
 800aec0:	89a3      	ldrh	r3, [r4, #12]
 800aec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	4632      	mov	r2, r6
 800aece:	463b      	mov	r3, r7
 800aed0:	4628      	mov	r0, r5
 800aed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aed6:	f000 b869 	b.w	800afac <_write_r>

0800aeda <__sseek>:
 800aeda:	b510      	push	{r4, lr}
 800aedc:	460c      	mov	r4, r1
 800aede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee2:	f000 f91d 	bl	800b120 <_lseek_r>
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	bf15      	itete	ne
 800aeec:	6560      	strne	r0, [r4, #84]	; 0x54
 800aeee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aef6:	81a3      	strheq	r3, [r4, #12]
 800aef8:	bf18      	it	ne
 800aefa:	81a3      	strhne	r3, [r4, #12]
 800aefc:	bd10      	pop	{r4, pc}

0800aefe <__sclose>:
 800aefe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af02:	f000 b8db 	b.w	800b0bc <_close_r>
	...

0800af08 <__swbuf_r>:
 800af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0a:	460e      	mov	r6, r1
 800af0c:	4614      	mov	r4, r2
 800af0e:	4605      	mov	r5, r0
 800af10:	b118      	cbz	r0, 800af1a <__swbuf_r+0x12>
 800af12:	6983      	ldr	r3, [r0, #24]
 800af14:	b90b      	cbnz	r3, 800af1a <__swbuf_r+0x12>
 800af16:	f7ff f9ad 	bl	800a274 <__sinit>
 800af1a:	4b21      	ldr	r3, [pc, #132]	; (800afa0 <__swbuf_r+0x98>)
 800af1c:	429c      	cmp	r4, r3
 800af1e:	d12b      	bne.n	800af78 <__swbuf_r+0x70>
 800af20:	686c      	ldr	r4, [r5, #4]
 800af22:	69a3      	ldr	r3, [r4, #24]
 800af24:	60a3      	str	r3, [r4, #8]
 800af26:	89a3      	ldrh	r3, [r4, #12]
 800af28:	071a      	lsls	r2, r3, #28
 800af2a:	d52f      	bpl.n	800af8c <__swbuf_r+0x84>
 800af2c:	6923      	ldr	r3, [r4, #16]
 800af2e:	b36b      	cbz	r3, 800af8c <__swbuf_r+0x84>
 800af30:	6923      	ldr	r3, [r4, #16]
 800af32:	6820      	ldr	r0, [r4, #0]
 800af34:	1ac0      	subs	r0, r0, r3
 800af36:	6963      	ldr	r3, [r4, #20]
 800af38:	b2f6      	uxtb	r6, r6
 800af3a:	4283      	cmp	r3, r0
 800af3c:	4637      	mov	r7, r6
 800af3e:	dc04      	bgt.n	800af4a <__swbuf_r+0x42>
 800af40:	4621      	mov	r1, r4
 800af42:	4628      	mov	r0, r5
 800af44:	f7ff f902 	bl	800a14c <_fflush_r>
 800af48:	bb30      	cbnz	r0, 800af98 <__swbuf_r+0x90>
 800af4a:	68a3      	ldr	r3, [r4, #8]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	60a3      	str	r3, [r4, #8]
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	6022      	str	r2, [r4, #0]
 800af56:	701e      	strb	r6, [r3, #0]
 800af58:	6963      	ldr	r3, [r4, #20]
 800af5a:	3001      	adds	r0, #1
 800af5c:	4283      	cmp	r3, r0
 800af5e:	d004      	beq.n	800af6a <__swbuf_r+0x62>
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	07db      	lsls	r3, r3, #31
 800af64:	d506      	bpl.n	800af74 <__swbuf_r+0x6c>
 800af66:	2e0a      	cmp	r6, #10
 800af68:	d104      	bne.n	800af74 <__swbuf_r+0x6c>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4628      	mov	r0, r5
 800af6e:	f7ff f8ed 	bl	800a14c <_fflush_r>
 800af72:	b988      	cbnz	r0, 800af98 <__swbuf_r+0x90>
 800af74:	4638      	mov	r0, r7
 800af76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <__swbuf_r+0x9c>)
 800af7a:	429c      	cmp	r4, r3
 800af7c:	d101      	bne.n	800af82 <__swbuf_r+0x7a>
 800af7e:	68ac      	ldr	r4, [r5, #8]
 800af80:	e7cf      	b.n	800af22 <__swbuf_r+0x1a>
 800af82:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <__swbuf_r+0xa0>)
 800af84:	429c      	cmp	r4, r3
 800af86:	bf08      	it	eq
 800af88:	68ec      	ldreq	r4, [r5, #12]
 800af8a:	e7ca      	b.n	800af22 <__swbuf_r+0x1a>
 800af8c:	4621      	mov	r1, r4
 800af8e:	4628      	mov	r0, r5
 800af90:	f000 f81e 	bl	800afd0 <__swsetup_r>
 800af94:	2800      	cmp	r0, #0
 800af96:	d0cb      	beq.n	800af30 <__swbuf_r+0x28>
 800af98:	f04f 37ff 	mov.w	r7, #4294967295
 800af9c:	e7ea      	b.n	800af74 <__swbuf_r+0x6c>
 800af9e:	bf00      	nop
 800afa0:	08019f14 	.word	0x08019f14
 800afa4:	08019f34 	.word	0x08019f34
 800afa8:	08019ef4 	.word	0x08019ef4

0800afac <_write_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4d07      	ldr	r5, [pc, #28]	; (800afcc <_write_r+0x20>)
 800afb0:	4604      	mov	r4, r0
 800afb2:	4608      	mov	r0, r1
 800afb4:	4611      	mov	r1, r2
 800afb6:	2200      	movs	r2, #0
 800afb8:	602a      	str	r2, [r5, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	f7f8 ff5d 	bl	8003e7a <_write>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_write_r+0x1e>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b103      	cbz	r3, 800afca <_write_r+0x1e>
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	24000ce4 	.word	0x24000ce4

0800afd0 <__swsetup_r>:
 800afd0:	4b32      	ldr	r3, [pc, #200]	; (800b09c <__swsetup_r+0xcc>)
 800afd2:	b570      	push	{r4, r5, r6, lr}
 800afd4:	681d      	ldr	r5, [r3, #0]
 800afd6:	4606      	mov	r6, r0
 800afd8:	460c      	mov	r4, r1
 800afda:	b125      	cbz	r5, 800afe6 <__swsetup_r+0x16>
 800afdc:	69ab      	ldr	r3, [r5, #24]
 800afde:	b913      	cbnz	r3, 800afe6 <__swsetup_r+0x16>
 800afe0:	4628      	mov	r0, r5
 800afe2:	f7ff f947 	bl	800a274 <__sinit>
 800afe6:	4b2e      	ldr	r3, [pc, #184]	; (800b0a0 <__swsetup_r+0xd0>)
 800afe8:	429c      	cmp	r4, r3
 800afea:	d10f      	bne.n	800b00c <__swsetup_r+0x3c>
 800afec:	686c      	ldr	r4, [r5, #4]
 800afee:	89a3      	ldrh	r3, [r4, #12]
 800aff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aff4:	0719      	lsls	r1, r3, #28
 800aff6:	d42c      	bmi.n	800b052 <__swsetup_r+0x82>
 800aff8:	06dd      	lsls	r5, r3, #27
 800affa:	d411      	bmi.n	800b020 <__swsetup_r+0x50>
 800affc:	2309      	movs	r3, #9
 800affe:	6033      	str	r3, [r6, #0]
 800b000:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b004:	81a3      	strh	r3, [r4, #12]
 800b006:	f04f 30ff 	mov.w	r0, #4294967295
 800b00a:	e03e      	b.n	800b08a <__swsetup_r+0xba>
 800b00c:	4b25      	ldr	r3, [pc, #148]	; (800b0a4 <__swsetup_r+0xd4>)
 800b00e:	429c      	cmp	r4, r3
 800b010:	d101      	bne.n	800b016 <__swsetup_r+0x46>
 800b012:	68ac      	ldr	r4, [r5, #8]
 800b014:	e7eb      	b.n	800afee <__swsetup_r+0x1e>
 800b016:	4b24      	ldr	r3, [pc, #144]	; (800b0a8 <__swsetup_r+0xd8>)
 800b018:	429c      	cmp	r4, r3
 800b01a:	bf08      	it	eq
 800b01c:	68ec      	ldreq	r4, [r5, #12]
 800b01e:	e7e6      	b.n	800afee <__swsetup_r+0x1e>
 800b020:	0758      	lsls	r0, r3, #29
 800b022:	d512      	bpl.n	800b04a <__swsetup_r+0x7a>
 800b024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b026:	b141      	cbz	r1, 800b03a <__swsetup_r+0x6a>
 800b028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b02c:	4299      	cmp	r1, r3
 800b02e:	d002      	beq.n	800b036 <__swsetup_r+0x66>
 800b030:	4630      	mov	r0, r6
 800b032:	f7ff fb1f 	bl	800a674 <_free_r>
 800b036:	2300      	movs	r3, #0
 800b038:	6363      	str	r3, [r4, #52]	; 0x34
 800b03a:	89a3      	ldrh	r3, [r4, #12]
 800b03c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b040:	81a3      	strh	r3, [r4, #12]
 800b042:	2300      	movs	r3, #0
 800b044:	6063      	str	r3, [r4, #4]
 800b046:	6923      	ldr	r3, [r4, #16]
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	89a3      	ldrh	r3, [r4, #12]
 800b04c:	f043 0308 	orr.w	r3, r3, #8
 800b050:	81a3      	strh	r3, [r4, #12]
 800b052:	6923      	ldr	r3, [r4, #16]
 800b054:	b94b      	cbnz	r3, 800b06a <__swsetup_r+0x9a>
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b05c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b060:	d003      	beq.n	800b06a <__swsetup_r+0x9a>
 800b062:	4621      	mov	r1, r4
 800b064:	4630      	mov	r0, r6
 800b066:	f7ff fa6f 	bl	800a548 <__smakebuf_r>
 800b06a:	89a0      	ldrh	r0, [r4, #12]
 800b06c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b070:	f010 0301 	ands.w	r3, r0, #1
 800b074:	d00a      	beq.n	800b08c <__swsetup_r+0xbc>
 800b076:	2300      	movs	r3, #0
 800b078:	60a3      	str	r3, [r4, #8]
 800b07a:	6963      	ldr	r3, [r4, #20]
 800b07c:	425b      	negs	r3, r3
 800b07e:	61a3      	str	r3, [r4, #24]
 800b080:	6923      	ldr	r3, [r4, #16]
 800b082:	b943      	cbnz	r3, 800b096 <__swsetup_r+0xc6>
 800b084:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b088:	d1ba      	bne.n	800b000 <__swsetup_r+0x30>
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	0781      	lsls	r1, r0, #30
 800b08e:	bf58      	it	pl
 800b090:	6963      	ldrpl	r3, [r4, #20]
 800b092:	60a3      	str	r3, [r4, #8]
 800b094:	e7f4      	b.n	800b080 <__swsetup_r+0xb0>
 800b096:	2000      	movs	r0, #0
 800b098:	e7f7      	b.n	800b08a <__swsetup_r+0xba>
 800b09a:	bf00      	nop
 800b09c:	240004fc 	.word	0x240004fc
 800b0a0:	08019f14 	.word	0x08019f14
 800b0a4:	08019f34 	.word	0x08019f34
 800b0a8:	08019ef4 	.word	0x08019ef4

0800b0ac <abort>:
 800b0ac:	b508      	push	{r3, lr}
 800b0ae:	2006      	movs	r0, #6
 800b0b0:	f000 fa18 	bl	800b4e4 <raise>
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	f7f8 feb9 	bl	8003e2c <_exit>
	...

0800b0bc <_close_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d06      	ldr	r5, [pc, #24]	; (800b0d8 <_close_r+0x1c>)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	602b      	str	r3, [r5, #0]
 800b0c8:	f7f8 fef3 	bl	8003eb2 <_close>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d102      	bne.n	800b0d6 <_close_r+0x1a>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	b103      	cbz	r3, 800b0d6 <_close_r+0x1a>
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	bd38      	pop	{r3, r4, r5, pc}
 800b0d8:	24000ce4 	.word	0x24000ce4

0800b0dc <_fstat_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4d07      	ldr	r5, [pc, #28]	; (800b0fc <_fstat_r+0x20>)
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	602b      	str	r3, [r5, #0]
 800b0ea:	f7f8 feee 	bl	8003eca <_fstat>
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d102      	bne.n	800b0f8 <_fstat_r+0x1c>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	b103      	cbz	r3, 800b0f8 <_fstat_r+0x1c>
 800b0f6:	6023      	str	r3, [r4, #0]
 800b0f8:	bd38      	pop	{r3, r4, r5, pc}
 800b0fa:	bf00      	nop
 800b0fc:	24000ce4 	.word	0x24000ce4

0800b100 <_isatty_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4d06      	ldr	r5, [pc, #24]	; (800b11c <_isatty_r+0x1c>)
 800b104:	2300      	movs	r3, #0
 800b106:	4604      	mov	r4, r0
 800b108:	4608      	mov	r0, r1
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	f7f8 feed 	bl	8003eea <_isatty>
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	d102      	bne.n	800b11a <_isatty_r+0x1a>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	b103      	cbz	r3, 800b11a <_isatty_r+0x1a>
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	24000ce4 	.word	0x24000ce4

0800b120 <_lseek_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	; (800b140 <_lseek_r+0x20>)
 800b124:	4604      	mov	r4, r0
 800b126:	4608      	mov	r0, r1
 800b128:	4611      	mov	r1, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	602a      	str	r2, [r5, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	f7f8 fee6 	bl	8003f00 <_lseek>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_lseek_r+0x1e>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_lseek_r+0x1e>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	24000ce4 	.word	0x24000ce4

0800b144 <__malloc_lock>:
 800b144:	4801      	ldr	r0, [pc, #4]	; (800b14c <__malloc_lock+0x8>)
 800b146:	f7ff b9d8 	b.w	800a4fa <__retarget_lock_acquire_recursive>
 800b14a:	bf00      	nop
 800b14c:	24000cd8 	.word	0x24000cd8

0800b150 <__malloc_unlock>:
 800b150:	4801      	ldr	r0, [pc, #4]	; (800b158 <__malloc_unlock+0x8>)
 800b152:	f7ff b9d3 	b.w	800a4fc <__retarget_lock_release_recursive>
 800b156:	bf00      	nop
 800b158:	24000cd8 	.word	0x24000cd8

0800b15c <_realloc_r>:
 800b15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b160:	4680      	mov	r8, r0
 800b162:	4614      	mov	r4, r2
 800b164:	460e      	mov	r6, r1
 800b166:	b921      	cbnz	r1, 800b172 <_realloc_r+0x16>
 800b168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b16c:	4611      	mov	r1, r2
 800b16e:	f7ff baed 	b.w	800a74c <_malloc_r>
 800b172:	b92a      	cbnz	r2, 800b180 <_realloc_r+0x24>
 800b174:	f7ff fa7e 	bl	800a674 <_free_r>
 800b178:	4625      	mov	r5, r4
 800b17a:	4628      	mov	r0, r5
 800b17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b180:	f000 f9cc 	bl	800b51c <_malloc_usable_size_r>
 800b184:	4284      	cmp	r4, r0
 800b186:	4607      	mov	r7, r0
 800b188:	d802      	bhi.n	800b190 <_realloc_r+0x34>
 800b18a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b18e:	d812      	bhi.n	800b1b6 <_realloc_r+0x5a>
 800b190:	4621      	mov	r1, r4
 800b192:	4640      	mov	r0, r8
 800b194:	f7ff fada 	bl	800a74c <_malloc_r>
 800b198:	4605      	mov	r5, r0
 800b19a:	2800      	cmp	r0, #0
 800b19c:	d0ed      	beq.n	800b17a <_realloc_r+0x1e>
 800b19e:	42bc      	cmp	r4, r7
 800b1a0:	4622      	mov	r2, r4
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	bf28      	it	cs
 800b1a6:	463a      	movcs	r2, r7
 800b1a8:	f7ff fa1e 	bl	800a5e8 <memcpy>
 800b1ac:	4631      	mov	r1, r6
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	f7ff fa60 	bl	800a674 <_free_r>
 800b1b4:	e7e1      	b.n	800b17a <_realloc_r+0x1e>
 800b1b6:	4635      	mov	r5, r6
 800b1b8:	e7df      	b.n	800b17a <_realloc_r+0x1e>

0800b1ba <__ssputs_r>:
 800b1ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1be:	688e      	ldr	r6, [r1, #8]
 800b1c0:	429e      	cmp	r6, r3
 800b1c2:	4682      	mov	sl, r0
 800b1c4:	460c      	mov	r4, r1
 800b1c6:	4690      	mov	r8, r2
 800b1c8:	461f      	mov	r7, r3
 800b1ca:	d838      	bhi.n	800b23e <__ssputs_r+0x84>
 800b1cc:	898a      	ldrh	r2, [r1, #12]
 800b1ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1d2:	d032      	beq.n	800b23a <__ssputs_r+0x80>
 800b1d4:	6825      	ldr	r5, [r4, #0]
 800b1d6:	6909      	ldr	r1, [r1, #16]
 800b1d8:	eba5 0901 	sub.w	r9, r5, r1
 800b1dc:	6965      	ldr	r5, [r4, #20]
 800b1de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	444b      	add	r3, r9
 800b1ea:	106d      	asrs	r5, r5, #1
 800b1ec:	429d      	cmp	r5, r3
 800b1ee:	bf38      	it	cc
 800b1f0:	461d      	movcc	r5, r3
 800b1f2:	0553      	lsls	r3, r2, #21
 800b1f4:	d531      	bpl.n	800b25a <__ssputs_r+0xa0>
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7ff faa8 	bl	800a74c <_malloc_r>
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	b950      	cbnz	r0, 800b216 <__ssputs_r+0x5c>
 800b200:	230c      	movs	r3, #12
 800b202:	f8ca 3000 	str.w	r3, [sl]
 800b206:	89a3      	ldrh	r3, [r4, #12]
 800b208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b20c:	81a3      	strh	r3, [r4, #12]
 800b20e:	f04f 30ff 	mov.w	r0, #4294967295
 800b212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b216:	6921      	ldr	r1, [r4, #16]
 800b218:	464a      	mov	r2, r9
 800b21a:	f7ff f9e5 	bl	800a5e8 <memcpy>
 800b21e:	89a3      	ldrh	r3, [r4, #12]
 800b220:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	6126      	str	r6, [r4, #16]
 800b22c:	6165      	str	r5, [r4, #20]
 800b22e:	444e      	add	r6, r9
 800b230:	eba5 0509 	sub.w	r5, r5, r9
 800b234:	6026      	str	r6, [r4, #0]
 800b236:	60a5      	str	r5, [r4, #8]
 800b238:	463e      	mov	r6, r7
 800b23a:	42be      	cmp	r6, r7
 800b23c:	d900      	bls.n	800b240 <__ssputs_r+0x86>
 800b23e:	463e      	mov	r6, r7
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	4632      	mov	r2, r6
 800b244:	4641      	mov	r1, r8
 800b246:	f7ff f9dd 	bl	800a604 <memmove>
 800b24a:	68a3      	ldr	r3, [r4, #8]
 800b24c:	1b9b      	subs	r3, r3, r6
 800b24e:	60a3      	str	r3, [r4, #8]
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	4433      	add	r3, r6
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	2000      	movs	r0, #0
 800b258:	e7db      	b.n	800b212 <__ssputs_r+0x58>
 800b25a:	462a      	mov	r2, r5
 800b25c:	f7ff ff7e 	bl	800b15c <_realloc_r>
 800b260:	4606      	mov	r6, r0
 800b262:	2800      	cmp	r0, #0
 800b264:	d1e1      	bne.n	800b22a <__ssputs_r+0x70>
 800b266:	6921      	ldr	r1, [r4, #16]
 800b268:	4650      	mov	r0, sl
 800b26a:	f7ff fa03 	bl	800a674 <_free_r>
 800b26e:	e7c7      	b.n	800b200 <__ssputs_r+0x46>

0800b270 <_svfiprintf_r>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	4698      	mov	r8, r3
 800b276:	898b      	ldrh	r3, [r1, #12]
 800b278:	061b      	lsls	r3, r3, #24
 800b27a:	b09d      	sub	sp, #116	; 0x74
 800b27c:	4607      	mov	r7, r0
 800b27e:	460d      	mov	r5, r1
 800b280:	4614      	mov	r4, r2
 800b282:	d50e      	bpl.n	800b2a2 <_svfiprintf_r+0x32>
 800b284:	690b      	ldr	r3, [r1, #16]
 800b286:	b963      	cbnz	r3, 800b2a2 <_svfiprintf_r+0x32>
 800b288:	2140      	movs	r1, #64	; 0x40
 800b28a:	f7ff fa5f 	bl	800a74c <_malloc_r>
 800b28e:	6028      	str	r0, [r5, #0]
 800b290:	6128      	str	r0, [r5, #16]
 800b292:	b920      	cbnz	r0, 800b29e <_svfiprintf_r+0x2e>
 800b294:	230c      	movs	r3, #12
 800b296:	603b      	str	r3, [r7, #0]
 800b298:	f04f 30ff 	mov.w	r0, #4294967295
 800b29c:	e0d1      	b.n	800b442 <_svfiprintf_r+0x1d2>
 800b29e:	2340      	movs	r3, #64	; 0x40
 800b2a0:	616b      	str	r3, [r5, #20]
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a6:	2320      	movs	r3, #32
 800b2a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2b0:	2330      	movs	r3, #48	; 0x30
 800b2b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b45c <_svfiprintf_r+0x1ec>
 800b2b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2ba:	f04f 0901 	mov.w	r9, #1
 800b2be:	4623      	mov	r3, r4
 800b2c0:	469a      	mov	sl, r3
 800b2c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2c6:	b10a      	cbz	r2, 800b2cc <_svfiprintf_r+0x5c>
 800b2c8:	2a25      	cmp	r2, #37	; 0x25
 800b2ca:	d1f9      	bne.n	800b2c0 <_svfiprintf_r+0x50>
 800b2cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b2d0:	d00b      	beq.n	800b2ea <_svfiprintf_r+0x7a>
 800b2d2:	465b      	mov	r3, fp
 800b2d4:	4622      	mov	r2, r4
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	4638      	mov	r0, r7
 800b2da:	f7ff ff6e 	bl	800b1ba <__ssputs_r>
 800b2de:	3001      	adds	r0, #1
 800b2e0:	f000 80aa 	beq.w	800b438 <_svfiprintf_r+0x1c8>
 800b2e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2e6:	445a      	add	r2, fp
 800b2e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 80a2 	beq.w	800b438 <_svfiprintf_r+0x1c8>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2fe:	f10a 0a01 	add.w	sl, sl, #1
 800b302:	9304      	str	r3, [sp, #16]
 800b304:	9307      	str	r3, [sp, #28]
 800b306:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b30a:	931a      	str	r3, [sp, #104]	; 0x68
 800b30c:	4654      	mov	r4, sl
 800b30e:	2205      	movs	r2, #5
 800b310:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b314:	4851      	ldr	r0, [pc, #324]	; (800b45c <_svfiprintf_r+0x1ec>)
 800b316:	f7f4 ffe3 	bl	80002e0 <memchr>
 800b31a:	9a04      	ldr	r2, [sp, #16]
 800b31c:	b9d8      	cbnz	r0, 800b356 <_svfiprintf_r+0xe6>
 800b31e:	06d0      	lsls	r0, r2, #27
 800b320:	bf44      	itt	mi
 800b322:	2320      	movmi	r3, #32
 800b324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b328:	0711      	lsls	r1, r2, #28
 800b32a:	bf44      	itt	mi
 800b32c:	232b      	movmi	r3, #43	; 0x2b
 800b32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b332:	f89a 3000 	ldrb.w	r3, [sl]
 800b336:	2b2a      	cmp	r3, #42	; 0x2a
 800b338:	d015      	beq.n	800b366 <_svfiprintf_r+0xf6>
 800b33a:	9a07      	ldr	r2, [sp, #28]
 800b33c:	4654      	mov	r4, sl
 800b33e:	2000      	movs	r0, #0
 800b340:	f04f 0c0a 	mov.w	ip, #10
 800b344:	4621      	mov	r1, r4
 800b346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b34a:	3b30      	subs	r3, #48	; 0x30
 800b34c:	2b09      	cmp	r3, #9
 800b34e:	d94e      	bls.n	800b3ee <_svfiprintf_r+0x17e>
 800b350:	b1b0      	cbz	r0, 800b380 <_svfiprintf_r+0x110>
 800b352:	9207      	str	r2, [sp, #28]
 800b354:	e014      	b.n	800b380 <_svfiprintf_r+0x110>
 800b356:	eba0 0308 	sub.w	r3, r0, r8
 800b35a:	fa09 f303 	lsl.w	r3, r9, r3
 800b35e:	4313      	orrs	r3, r2
 800b360:	9304      	str	r3, [sp, #16]
 800b362:	46a2      	mov	sl, r4
 800b364:	e7d2      	b.n	800b30c <_svfiprintf_r+0x9c>
 800b366:	9b03      	ldr	r3, [sp, #12]
 800b368:	1d19      	adds	r1, r3, #4
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	9103      	str	r1, [sp, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	bfbb      	ittet	lt
 800b372:	425b      	neglt	r3, r3
 800b374:	f042 0202 	orrlt.w	r2, r2, #2
 800b378:	9307      	strge	r3, [sp, #28]
 800b37a:	9307      	strlt	r3, [sp, #28]
 800b37c:	bfb8      	it	lt
 800b37e:	9204      	strlt	r2, [sp, #16]
 800b380:	7823      	ldrb	r3, [r4, #0]
 800b382:	2b2e      	cmp	r3, #46	; 0x2e
 800b384:	d10c      	bne.n	800b3a0 <_svfiprintf_r+0x130>
 800b386:	7863      	ldrb	r3, [r4, #1]
 800b388:	2b2a      	cmp	r3, #42	; 0x2a
 800b38a:	d135      	bne.n	800b3f8 <_svfiprintf_r+0x188>
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	1d1a      	adds	r2, r3, #4
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	9203      	str	r2, [sp, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	bfb8      	it	lt
 800b398:	f04f 33ff 	movlt.w	r3, #4294967295
 800b39c:	3402      	adds	r4, #2
 800b39e:	9305      	str	r3, [sp, #20]
 800b3a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b46c <_svfiprintf_r+0x1fc>
 800b3a4:	7821      	ldrb	r1, [r4, #0]
 800b3a6:	2203      	movs	r2, #3
 800b3a8:	4650      	mov	r0, sl
 800b3aa:	f7f4 ff99 	bl	80002e0 <memchr>
 800b3ae:	b140      	cbz	r0, 800b3c2 <_svfiprintf_r+0x152>
 800b3b0:	2340      	movs	r3, #64	; 0x40
 800b3b2:	eba0 000a 	sub.w	r0, r0, sl
 800b3b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b3ba:	9b04      	ldr	r3, [sp, #16]
 800b3bc:	4303      	orrs	r3, r0
 800b3be:	3401      	adds	r4, #1
 800b3c0:	9304      	str	r3, [sp, #16]
 800b3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c6:	4826      	ldr	r0, [pc, #152]	; (800b460 <_svfiprintf_r+0x1f0>)
 800b3c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3cc:	2206      	movs	r2, #6
 800b3ce:	f7f4 ff87 	bl	80002e0 <memchr>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d038      	beq.n	800b448 <_svfiprintf_r+0x1d8>
 800b3d6:	4b23      	ldr	r3, [pc, #140]	; (800b464 <_svfiprintf_r+0x1f4>)
 800b3d8:	bb1b      	cbnz	r3, 800b422 <_svfiprintf_r+0x1b2>
 800b3da:	9b03      	ldr	r3, [sp, #12]
 800b3dc:	3307      	adds	r3, #7
 800b3de:	f023 0307 	bic.w	r3, r3, #7
 800b3e2:	3308      	adds	r3, #8
 800b3e4:	9303      	str	r3, [sp, #12]
 800b3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3e8:	4433      	add	r3, r6
 800b3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ec:	e767      	b.n	800b2be <_svfiprintf_r+0x4e>
 800b3ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	2001      	movs	r0, #1
 800b3f6:	e7a5      	b.n	800b344 <_svfiprintf_r+0xd4>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	3401      	adds	r4, #1
 800b3fc:	9305      	str	r3, [sp, #20]
 800b3fe:	4619      	mov	r1, r3
 800b400:	f04f 0c0a 	mov.w	ip, #10
 800b404:	4620      	mov	r0, r4
 800b406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b40a:	3a30      	subs	r2, #48	; 0x30
 800b40c:	2a09      	cmp	r2, #9
 800b40e:	d903      	bls.n	800b418 <_svfiprintf_r+0x1a8>
 800b410:	2b00      	cmp	r3, #0
 800b412:	d0c5      	beq.n	800b3a0 <_svfiprintf_r+0x130>
 800b414:	9105      	str	r1, [sp, #20]
 800b416:	e7c3      	b.n	800b3a0 <_svfiprintf_r+0x130>
 800b418:	fb0c 2101 	mla	r1, ip, r1, r2
 800b41c:	4604      	mov	r4, r0
 800b41e:	2301      	movs	r3, #1
 800b420:	e7f0      	b.n	800b404 <_svfiprintf_r+0x194>
 800b422:	ab03      	add	r3, sp, #12
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	462a      	mov	r2, r5
 800b428:	4b0f      	ldr	r3, [pc, #60]	; (800b468 <_svfiprintf_r+0x1f8>)
 800b42a:	a904      	add	r1, sp, #16
 800b42c:	4638      	mov	r0, r7
 800b42e:	f3af 8000 	nop.w
 800b432:	1c42      	adds	r2, r0, #1
 800b434:	4606      	mov	r6, r0
 800b436:	d1d6      	bne.n	800b3e6 <_svfiprintf_r+0x176>
 800b438:	89ab      	ldrh	r3, [r5, #12]
 800b43a:	065b      	lsls	r3, r3, #25
 800b43c:	f53f af2c 	bmi.w	800b298 <_svfiprintf_r+0x28>
 800b440:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b442:	b01d      	add	sp, #116	; 0x74
 800b444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b448:	ab03      	add	r3, sp, #12
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	462a      	mov	r2, r5
 800b44e:	4b06      	ldr	r3, [pc, #24]	; (800b468 <_svfiprintf_r+0x1f8>)
 800b450:	a904      	add	r1, sp, #16
 800b452:	4638      	mov	r0, r7
 800b454:	f7ff fbb6 	bl	800abc4 <_printf_i>
 800b458:	e7eb      	b.n	800b432 <_svfiprintf_r+0x1c2>
 800b45a:	bf00      	nop
 800b45c:	08019f58 	.word	0x08019f58
 800b460:	08019f62 	.word	0x08019f62
 800b464:	00000000 	.word	0x00000000
 800b468:	0800b1bb 	.word	0x0800b1bb
 800b46c:	08019f5e 	.word	0x08019f5e

0800b470 <_read_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4d07      	ldr	r5, [pc, #28]	; (800b490 <_read_r+0x20>)
 800b474:	4604      	mov	r4, r0
 800b476:	4608      	mov	r0, r1
 800b478:	4611      	mov	r1, r2
 800b47a:	2200      	movs	r2, #0
 800b47c:	602a      	str	r2, [r5, #0]
 800b47e:	461a      	mov	r2, r3
 800b480:	f7f8 fcde 	bl	8003e40 <_read>
 800b484:	1c43      	adds	r3, r0, #1
 800b486:	d102      	bne.n	800b48e <_read_r+0x1e>
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	b103      	cbz	r3, 800b48e <_read_r+0x1e>
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	bd38      	pop	{r3, r4, r5, pc}
 800b490:	24000ce4 	.word	0x24000ce4

0800b494 <_raise_r>:
 800b494:	291f      	cmp	r1, #31
 800b496:	b538      	push	{r3, r4, r5, lr}
 800b498:	4604      	mov	r4, r0
 800b49a:	460d      	mov	r5, r1
 800b49c:	d904      	bls.n	800b4a8 <_raise_r+0x14>
 800b49e:	2316      	movs	r3, #22
 800b4a0:	6003      	str	r3, [r0, #0]
 800b4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}
 800b4a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b4aa:	b112      	cbz	r2, 800b4b2 <_raise_r+0x1e>
 800b4ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b4b0:	b94b      	cbnz	r3, 800b4c6 <_raise_r+0x32>
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 f830 	bl	800b518 <_getpid_r>
 800b4b8:	462a      	mov	r2, r5
 800b4ba:	4601      	mov	r1, r0
 800b4bc:	4620      	mov	r0, r4
 800b4be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4c2:	f000 b817 	b.w	800b4f4 <_kill_r>
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d00a      	beq.n	800b4e0 <_raise_r+0x4c>
 800b4ca:	1c59      	adds	r1, r3, #1
 800b4cc:	d103      	bne.n	800b4d6 <_raise_r+0x42>
 800b4ce:	2316      	movs	r3, #22
 800b4d0:	6003      	str	r3, [r0, #0]
 800b4d2:	2001      	movs	r0, #1
 800b4d4:	e7e7      	b.n	800b4a6 <_raise_r+0x12>
 800b4d6:	2400      	movs	r4, #0
 800b4d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b4dc:	4628      	mov	r0, r5
 800b4de:	4798      	blx	r3
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	e7e0      	b.n	800b4a6 <_raise_r+0x12>

0800b4e4 <raise>:
 800b4e4:	4b02      	ldr	r3, [pc, #8]	; (800b4f0 <raise+0xc>)
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	6818      	ldr	r0, [r3, #0]
 800b4ea:	f7ff bfd3 	b.w	800b494 <_raise_r>
 800b4ee:	bf00      	nop
 800b4f0:	240004fc 	.word	0x240004fc

0800b4f4 <_kill_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	4d07      	ldr	r5, [pc, #28]	; (800b514 <_kill_r+0x20>)
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	4611      	mov	r1, r2
 800b500:	602b      	str	r3, [r5, #0]
 800b502:	f7f8 fc83 	bl	8003e0c <_kill>
 800b506:	1c43      	adds	r3, r0, #1
 800b508:	d102      	bne.n	800b510 <_kill_r+0x1c>
 800b50a:	682b      	ldr	r3, [r5, #0]
 800b50c:	b103      	cbz	r3, 800b510 <_kill_r+0x1c>
 800b50e:	6023      	str	r3, [r4, #0]
 800b510:	bd38      	pop	{r3, r4, r5, pc}
 800b512:	bf00      	nop
 800b514:	24000ce4 	.word	0x24000ce4

0800b518 <_getpid_r>:
 800b518:	f7f8 bc70 	b.w	8003dfc <_getpid>

0800b51c <_malloc_usable_size_r>:
 800b51c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b520:	1f18      	subs	r0, r3, #4
 800b522:	2b00      	cmp	r3, #0
 800b524:	bfbc      	itt	lt
 800b526:	580b      	ldrlt	r3, [r1, r0]
 800b528:	18c0      	addlt	r0, r0, r3
 800b52a:	4770      	bx	lr

0800b52c <_init>:
 800b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52e:	bf00      	nop
 800b530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b532:	bc08      	pop	{r3}
 800b534:	469e      	mov	lr, r3
 800b536:	4770      	bx	lr

0800b538 <_fini>:
 800b538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53a:	bf00      	nop
 800b53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b53e:	bc08      	pop	{r3}
 800b540:	469e      	mov	lr, r3
 800b542:	4770      	bx	lr
